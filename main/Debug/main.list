
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f44  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0801517c  0801517c  0002517c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015638  08015638  00025638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015640  08015640  00025640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015644  08015644  00025644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b8  20000000  08015648  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ca1  200001b8  08015800  000301b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000607  20001e59  08015800  00031e59  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041bff  00000000  00000000  000301ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009138  00000000  00000000  00071ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002980  00000000  00000000  0007af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002488  00000000  00000000  0007d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040b1a  00000000  00000000  0007fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f951  00000000  00000000  000c084a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178478  00000000  00000000  0010019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00278613  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a840  00000000  00000000  00278664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001b8 	.word	0x200001b8
 8000254:	00000000 	.word	0x00000000
 8000258:	08015164 	.word	0x08015164

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001bc 	.word	0x200001bc
 8000274:	08015164 	.word	0x08015164

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	2000167c 	.word	0x2000167c
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00e f99e 	bl	800e6d4 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00e f9ca 	bl	800e734 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	20001718 	.word	0x20001718
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20001680 	.word	0x20001680
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20001684 	.word	0x20001684
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20001c84 	.word	0x20001c84

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d f9f8 	bl	800d858 <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00d f8d7 	bl	800d620 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20001724 	.word	0x20001724
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20001c84 	.word	0x20001c84
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	20001728 	.word	0x20001728
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	200017b4 	.word	0x200017b4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	200017b8 	.word	0x200017b8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	200017b0 	.word	0x200017b0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	200017ac 	.word	0x200017ac
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	20001718 	.word	0x20001718
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20001680 	.word	0x20001680
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20001684 	.word	0x20001684
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_uldivmod>:
 80004d4:	b953      	cbnz	r3, 80004ec <__aeabi_uldivmod+0x18>
 80004d6:	b94a      	cbnz	r2, 80004ec <__aeabi_uldivmod+0x18>
 80004d8:	2900      	cmp	r1, #0
 80004da:	bf08      	it	eq
 80004dc:	2800      	cmpeq	r0, #0
 80004de:	bf1c      	itt	ne
 80004e0:	f04f 31ff 	movne.w	r1, #4294967295
 80004e4:	f04f 30ff 	movne.w	r0, #4294967295
 80004e8:	f000 b982 	b.w	80007f0 <__aeabi_idiv0>
 80004ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f4:	f000 f806 	bl	8000504 <__udivmoddi4>
 80004f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000500:	b004      	add	sp, #16
 8000502:	4770      	bx	lr

08000504 <__udivmoddi4>:
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	4604      	mov	r4, r0
 800050c:	460f      	mov	r7, r1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d148      	bne.n	80005a4 <__udivmoddi4+0xa0>
 8000512:	428a      	cmp	r2, r1
 8000514:	4694      	mov	ip, r2
 8000516:	d961      	bls.n	80005dc <__udivmoddi4+0xd8>
 8000518:	fab2 f382 	clz	r3, r2
 800051c:	b143      	cbz	r3, 8000530 <__udivmoddi4+0x2c>
 800051e:	f1c3 0120 	rsb	r1, r3, #32
 8000522:	409f      	lsls	r7, r3
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	409c      	lsls	r4, r3
 800052a:	fa20 f101 	lsr.w	r1, r0, r1
 800052e:	430f      	orrs	r7, r1
 8000530:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	0c22      	lsrs	r2, r4, #16
 800053a:	fbb7 f6f1 	udiv	r6, r7, r1
 800053e:	fb01 7716 	mls	r7, r1, r6, r7
 8000542:	fb06 f00e 	mul.w	r0, r6, lr
 8000546:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800054a:	4290      	cmp	r0, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x5c>
 800054e:	eb1c 0202 	adds.w	r2, ip, r2
 8000552:	f106 37ff 	add.w	r7, r6, #4294967295
 8000556:	d202      	bcs.n	800055e <__udivmoddi4+0x5a>
 8000558:	4290      	cmp	r0, r2
 800055a:	f200 8137 	bhi.w	80007cc <__udivmoddi4+0x2c8>
 800055e:	463e      	mov	r6, r7
 8000560:	1a12      	subs	r2, r2, r0
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fbb2 f0f1 	udiv	r0, r2, r1
 8000568:	fb01 2210 	mls	r2, r1, r0, r2
 800056c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000570:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x86>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000580:	d202      	bcs.n	8000588 <__udivmoddi4+0x84>
 8000582:	45a6      	cmp	lr, r4
 8000584:	f200 811c 	bhi.w	80007c0 <__udivmoddi4+0x2bc>
 8000588:	4610      	mov	r0, r2
 800058a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800058e:	eba4 040e 	sub.w	r4, r4, lr
 8000592:	2600      	movs	r6, #0
 8000594:	b11d      	cbz	r5, 800059e <__udivmoddi4+0x9a>
 8000596:	40dc      	lsrs	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	e9c5 4300 	strd	r4, r3, [r5]
 800059e:	4631      	mov	r1, r6
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0xb8>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	f000 80fd 	beq.w	80007a8 <__udivmoddi4+0x2a4>
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9c5 0100 	strd	r0, r1, [r5]
 80005b4:	4630      	mov	r0, r6
 80005b6:	4631      	mov	r1, r6
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005bc:	fab3 f683 	clz	r6, r3
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d14b      	bne.n	800065c <__udivmoddi4+0x158>
 80005c4:	428b      	cmp	r3, r1
 80005c6:	f0c0 80f2 	bcc.w	80007ae <__udivmoddi4+0x2aa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	f240 80ef 	bls.w	80007ae <__udivmoddi4+0x2aa>
 80005d0:	4630      	mov	r0, r6
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d0e3      	beq.n	800059e <__udivmoddi4+0x9a>
 80005d6:	e9c5 4700 	strd	r4, r7, [r5]
 80005da:	e7e0      	b.n	800059e <__udivmoddi4+0x9a>
 80005dc:	b902      	cbnz	r2, 80005e0 <__udivmoddi4+0xdc>
 80005de:	deff      	udf	#255	; 0xff
 80005e0:	fab2 f382 	clz	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 809d 	bne.w	8000724 <__udivmoddi4+0x220>
 80005ea:	1a89      	subs	r1, r1, r2
 80005ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005f0:	b297      	uxth	r7, r2
 80005f2:	2601      	movs	r6, #1
 80005f4:	0c20      	lsrs	r0, r4, #16
 80005f6:	fbb1 f2fe 	udiv	r2, r1, lr
 80005fa:	fb0e 1112 	mls	r1, lr, r2, r1
 80005fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000602:	fb07 f002 	mul.w	r0, r7, r2
 8000606:	4288      	cmp	r0, r1
 8000608:	d90f      	bls.n	800062a <__udivmoddi4+0x126>
 800060a:	eb1c 0101 	adds.w	r1, ip, r1
 800060e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000612:	bf2c      	ite	cs
 8000614:	f04f 0901 	movcs.w	r9, #1
 8000618:	f04f 0900 	movcc.w	r9, #0
 800061c:	4288      	cmp	r0, r1
 800061e:	d903      	bls.n	8000628 <__udivmoddi4+0x124>
 8000620:	f1b9 0f00 	cmp.w	r9, #0
 8000624:	f000 80cf 	beq.w	80007c6 <__udivmoddi4+0x2c2>
 8000628:	4642      	mov	r2, r8
 800062a:	1a09      	subs	r1, r1, r0
 800062c:	b2a4      	uxth	r4, r4
 800062e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000632:	fb0e 1110 	mls	r1, lr, r0, r1
 8000636:	fb00 f707 	mul.w	r7, r0, r7
 800063a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800063e:	42a7      	cmp	r7, r4
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x150>
 8000642:	eb1c 0404 	adds.w	r4, ip, r4
 8000646:	f100 31ff 	add.w	r1, r0, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x14e>
 800064c:	42a7      	cmp	r7, r4
 800064e:	f200 80b4 	bhi.w	80007ba <__udivmoddi4+0x2b6>
 8000652:	4608      	mov	r0, r1
 8000654:	1be4      	subs	r4, r4, r7
 8000656:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800065a:	e79b      	b.n	8000594 <__udivmoddi4+0x90>
 800065c:	f1c6 0720 	rsb	r7, r6, #32
 8000660:	40b3      	lsls	r3, r6
 8000662:	fa01 f406 	lsl.w	r4, r1, r6
 8000666:	fa22 fc07 	lsr.w	ip, r2, r7
 800066a:	40f9      	lsrs	r1, r7
 800066c:	40b2      	lsls	r2, r6
 800066e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000672:	fa20 f307 	lsr.w	r3, r0, r7
 8000676:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800067a:	431c      	orrs	r4, r3
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fa00 f306 	lsl.w	r3, r0, r6
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f8f9 	udiv	r8, r1, r9
 800068a:	fb09 1118 	mls	r1, r9, r8, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb08 f00e 	mul.w	r0, r8, lr
 8000696:	4288      	cmp	r0, r1
 8000698:	d90f      	bls.n	80006ba <__udivmoddi4+0x1b6>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f108 3aff 	add.w	sl, r8, #4294967295
 80006a2:	bf2c      	ite	cs
 80006a4:	f04f 0b01 	movcs.w	fp, #1
 80006a8:	f04f 0b00 	movcc.w	fp, #0
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d903      	bls.n	80006b8 <__udivmoddi4+0x1b4>
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	f000 808d 	beq.w	80007d2 <__udivmoddi4+0x2ce>
 80006b8:	46d0      	mov	r8, sl
 80006ba:	1a09      	subs	r1, r1, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb1 f0f9 	udiv	r0, r1, r9
 80006c2:	fb09 1110 	mls	r1, r9, r0, r1
 80006c6:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ca:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ce:	458e      	cmp	lr, r1
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1de>
 80006d2:	eb1c 0101 	adds.w	r1, ip, r1
 80006d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80006da:	d201      	bcs.n	80006e0 <__udivmoddi4+0x1dc>
 80006dc:	458e      	cmp	lr, r1
 80006de:	d87f      	bhi.n	80007e0 <__udivmoddi4+0x2dc>
 80006e0:	4620      	mov	r0, r4
 80006e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e6:	eba1 010e 	sub.w	r1, r1, lr
 80006ea:	fba0 9802 	umull	r9, r8, r0, r2
 80006ee:	4541      	cmp	r1, r8
 80006f0:	464c      	mov	r4, r9
 80006f2:	46c6      	mov	lr, r8
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0x1f8>
 80006f6:	d106      	bne.n	8000706 <__udivmoddi4+0x202>
 80006f8:	454b      	cmp	r3, r9
 80006fa:	d204      	bcs.n	8000706 <__udivmoddi4+0x202>
 80006fc:	3801      	subs	r0, #1
 80006fe:	ebb9 0402 	subs.w	r4, r9, r2
 8000702:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000706:	2d00      	cmp	r5, #0
 8000708:	d070      	beq.n	80007ec <__udivmoddi4+0x2e8>
 800070a:	1b1a      	subs	r2, r3, r4
 800070c:	eb61 010e 	sbc.w	r1, r1, lr
 8000710:	fa22 f306 	lsr.w	r3, r2, r6
 8000714:	fa01 f707 	lsl.w	r7, r1, r7
 8000718:	40f1      	lsrs	r1, r6
 800071a:	2600      	movs	r6, #0
 800071c:	431f      	orrs	r7, r3
 800071e:	e9c5 7100 	strd	r7, r1, [r5]
 8000722:	e73c      	b.n	800059e <__udivmoddi4+0x9a>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0020 	rsb	r0, r3, #32
 800072c:	fa01 f203 	lsl.w	r2, r1, r3
 8000730:	fa21 f600 	lsr.w	r6, r1, r0
 8000734:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000738:	fa24 f100 	lsr.w	r1, r4, r0
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	409c      	lsls	r4, r3
 8000742:	4311      	orrs	r1, r2
 8000744:	fbb6 f0fe 	udiv	r0, r6, lr
 8000748:	0c0a      	lsrs	r2, r1, #16
 800074a:	fb0e 6610 	mls	r6, lr, r0, r6
 800074e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000752:	fb00 f607 	mul.w	r6, r0, r7
 8000756:	4296      	cmp	r6, r2
 8000758:	d90e      	bls.n	8000778 <__udivmoddi4+0x274>
 800075a:	eb1c 0202 	adds.w	r2, ip, r2
 800075e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000762:	bf2c      	ite	cs
 8000764:	f04f 0901 	movcs.w	r9, #1
 8000768:	f04f 0900 	movcc.w	r9, #0
 800076c:	4296      	cmp	r6, r2
 800076e:	d902      	bls.n	8000776 <__udivmoddi4+0x272>
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	d031      	beq.n	80007da <__udivmoddi4+0x2d6>
 8000776:	4640      	mov	r0, r8
 8000778:	1b92      	subs	r2, r2, r6
 800077a:	b289      	uxth	r1, r1
 800077c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000780:	fb0e 2216 	mls	r2, lr, r6, r2
 8000784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000788:	fb06 f207 	mul.w	r2, r6, r7
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__udivmoddi4+0x29c>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f106 38ff 	add.w	r8, r6, #4294967295
 8000798:	d201      	bcs.n	800079e <__udivmoddi4+0x29a>
 800079a:	428a      	cmp	r2, r1
 800079c:	d823      	bhi.n	80007e6 <__udivmoddi4+0x2e2>
 800079e:	4646      	mov	r6, r8
 80007a0:	1a89      	subs	r1, r1, r2
 80007a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007a6:	e725      	b.n	80005f4 <__udivmoddi4+0xf0>
 80007a8:	462e      	mov	r6, r5
 80007aa:	4628      	mov	r0, r5
 80007ac:	e6f7      	b.n	800059e <__udivmoddi4+0x9a>
 80007ae:	1a84      	subs	r4, r0, r2
 80007b0:	eb61 0303 	sbc.w	r3, r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	461f      	mov	r7, r3
 80007b8:	e70b      	b.n	80005d2 <__udivmoddi4+0xce>
 80007ba:	4464      	add	r4, ip
 80007bc:	3802      	subs	r0, #2
 80007be:	e749      	b.n	8000654 <__udivmoddi4+0x150>
 80007c0:	4464      	add	r4, ip
 80007c2:	3802      	subs	r0, #2
 80007c4:	e6e1      	b.n	800058a <__udivmoddi4+0x86>
 80007c6:	3a02      	subs	r2, #2
 80007c8:	4461      	add	r1, ip
 80007ca:	e72e      	b.n	800062a <__udivmoddi4+0x126>
 80007cc:	3e02      	subs	r6, #2
 80007ce:	4462      	add	r2, ip
 80007d0:	e6c6      	b.n	8000560 <__udivmoddi4+0x5c>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	e76f      	b.n	80006ba <__udivmoddi4+0x1b6>
 80007da:	3802      	subs	r0, #2
 80007dc:	4462      	add	r2, ip
 80007de:	e7cb      	b.n	8000778 <__udivmoddi4+0x274>
 80007e0:	3802      	subs	r0, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e77d      	b.n	80006e2 <__udivmoddi4+0x1de>
 80007e6:	3e02      	subs	r6, #2
 80007e8:	4461      	add	r1, ip
 80007ea:	e7d9      	b.n	80007a0 <__udivmoddi4+0x29c>
 80007ec:	462e      	mov	r6, r5
 80007ee:	e6d6      	b.n	800059e <__udivmoddi4+0x9a>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	; 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <tx_application_define+0x40>)
 800080a:	490b      	ldr	r1, [pc, #44]	; (8000838 <tx_application_define+0x44>)
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <tx_application_define+0x48>)
 800080e:	f00d fb6f 	bl	800def0 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <tx_application_define+0x48>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f80f 	bl	8000840 <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	e7fe      	b.n	800082a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200001d4 	.word	0x200001d4
 8000838:	0801517c 	.word	0x0801517c
 800083c:	200005d4 	.word	0x200005d4

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&menu_task_ptr, "menu_task", menu_task_entry, 0x1234,
 800084c:	23b0      	movs	r3, #176	; 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2301      	movs	r3, #1
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230f      	movs	r3, #15
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230f      	movs	r3, #15
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <App_ThreadX_Init+0x90>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f241 2334 	movw	r3, #4660	; 0x1234
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <App_ThreadX_Init+0x94>)
 8000870:	4919      	ldr	r1, [pc, #100]	; (80008d8 <App_ThreadX_Init+0x98>)
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <App_ThreadX_Init+0x9c>)
 8000874:	f00d fe3c 	bl	800e4f0 <_txe_thread_create>
                  menu_task_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);

  tx_thread_create(&debounce_task_ptr, "debounce_task", debounce_task_entry,
 8000878:	23b0      	movs	r3, #176	; 0xb0
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	2301      	movs	r3, #1
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2301      	movs	r3, #1
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	230e      	movs	r3, #14
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	230e      	movs	r3, #14
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <App_ThreadX_Init+0xa0>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	f241 2334 	movw	r3, #4660	; 0x1234
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <App_ThreadX_Init+0xa4>)
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <App_ThreadX_Init+0xa8>)
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <App_ThreadX_Init+0xac>)
 80008a0:	f00d fe26 	bl	800e4f0 <_txe_thread_create>
                  0x1234, debounce_task_stack, THREAD_STACK_SIZE, 14, 14, 1,
                  TX_AUTO_START);

  tx_semaphore_create(&debounce_semaphore_ptr, "debounce_semaphore", 0);
 80008a4:	231c      	movs	r3, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <App_ThreadX_Init+0xb0>)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <App_ThreadX_Init+0xb4>)
 80008ac:	f00d fd48 	bl	800e340 <_txe_semaphore_create>

  tx_queue_create(&event_queue_ptr, "event_queue", sizeof(fm_event_t),
 80008b0:	2338      	movs	r3, #56	; 0x38
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <App_ThreadX_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	490f      	ldr	r1, [pc, #60]	; (80008fc <App_ThreadX_Init+0xbc>)
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xc0>)
 80008c2:	f00d fbb5 	bl	800e030 <_txe_queue_create>
  #ifndef FM_THREADX_LOW_POWER
      tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
  #endif
  /* USER CODE END App_ThreadX_Init */

  return (ret);
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000060c 	.word	0x2000060c
 80008d4:	08000a05 	.word	0x08000a05
 80008d8:	08015190 	.word	0x08015190
 80008dc:	2000120c 	.word	0x2000120c
 80008e0:	20000a0c 	.word	0x20000a0c
 80008e4:	08000a49 	.word	0x08000a49
 80008e8:	0801519c 	.word	0x0801519c
 80008ec:	200012bc 	.word	0x200012bc
 80008f0:	080151ac 	.word	0x080151ac
 80008f4:	2000136c 	.word	0x2000136c
 80008f8:	20000e0c 	.word	0x20000e0c
 80008fc:	080151c0 	.word	0x080151c0
 8000900:	20001388 	.word	0x20001388

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000908:	f00a fd74 	bl	800b3f4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */
#ifdef FM_THREADX_LOW_POWER
  uint32_t ticks_to_sleep;

  g_lptim1_start = LPTIM1->CNT;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <App_ThreadX_LowPower_Timer_Setup+0x44>)
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <App_ThreadX_LowPower_Timer_Setup+0x48>)
 8000920:	801a      	strh	r2, [r3, #0]
  /*
   * clock_freq/RTC_WAKEUPCLOCK_RTCCLK_DIV16
   */
  ticks_to_sleep = (32768 / 16) * count;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	02db      	lsls	r3, r3, #11
 8000926:	60fb      	str	r3, [r7, #12]
  ticks_to_sleep /= TX_TIMER_TICKS_PER_SECOND;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <App_ThreadX_LowPower_Timer_Setup+0x4c>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	60fb      	str	r3, [r7, #12]

#ifdef FM_DEBUG_UART_TX_TIME_ON_IDLE
//  fm_debug_uint32_uart(count);
#endif

  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks_to_sleep,
 8000934:	2300      	movs	r3, #0
 8000936:	2200      	movs	r2, #0
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <App_ThreadX_LowPower_Timer_Setup+0x50>)
 800093c:	f008 fce4 	bl	8009308 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <App_ThreadX_LowPower_Timer_Setup+0x3a>
      RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
  {
    Error_Handler();
 8000946:	f000 fc5d 	bl	8001204 <Error_Handler>
  }

#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	46004400 	.word	0x46004400
 8000958:	20000608 	.word	0x20000608
 800095c:	51eb851f 	.word	0x51eb851f
 8000960:	200014a0 	.word	0x200014a0

08000964 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <App_ThreadX_LowPower_Enter+0x18>)
 800096e:	f003 fc91 	bl	8004294 <HAL_GPIO_WritePin>

  #ifdef FM_THREADX_LOW_POWER
  HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8000972:	2001      	movs	r0, #1
 8000974:	f004 f92c 	bl	8004bd0 <HAL_PWREx_EnterSTOP1Mode>
  #endif

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	42020400 	.word	0x42020400

08000980 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /*
     * If CPU wakes up other reason but timer flag we must wait until
     * expected time was elapsed. Debugger issues makes wake up CPU earlier
     */
  #ifdef FM_THREADX_LOW_POWER
    SystemClock_Config();
 8000984:	f000 f8d2 	bl	8000b2c <SystemClock_Config>
  #endif

  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <App_ThreadX_LowPower_Exit+0x18>)
 800098e:	f003 fc81 	bl	8004294 <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	42020400 	.word	0x42020400

0800099c <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
#ifdef FM_THREADX_LOW_POWER
  static uint16_t cnt_drift = 0;
  ULONG cnt_ret;
  g_lptim1_end = LPTIM1->CNT;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <App_ThreadX_LowPower_Timer_Adjust+0x58>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009aa:	801a      	strh	r2, [r3, #0]
  cnt_ret = (g_lptim1_end - g_lptim1_start);
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <App_ThreadX_LowPower_Timer_Adjust+0x5c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <App_ThreadX_LowPower_Timer_Adjust+0x60>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	607b      	str	r3, [r7, #4]
  cnt_ret *= TX_TIMER_TICKS_PER_SECOND;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	607b      	str	r3, [r7, #4]
  cnt_ret += cnt_drift;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
  cnt_drift = cnt_ret % 2048; // 2048 = lptim_clok_frq /  clock_prescaler
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <App_ThreadX_LowPower_Timer_Adjust+0x64>)
 80009dc:	801a      	strh	r2, [r3, #0]
  cnt_ret /= 2048;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0adb      	lsrs	r3, r3, #11
 80009e2:	607b      	str	r3, [r7, #4]
  return (cnt_ret);
 80009e4:	687b      	ldr	r3, [r7, #4]
#else
  return (0);
#endif
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	46004400 	.word	0x46004400
 80009f8:	2000060a 	.word	0x2000060a
 80009fc:	20000608 	.word	0x20000608
 8000a00:	200013c0 	.word	0x200013c0

08000a04 <menu_task_entry>:

/* USER CODE BEGIN 1 */
VOID menu_task_entry(ULONG initial_input)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    ptr_fun_menu_t ptr_menu = fm_menu_show_init;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <menu_task_entry+0x3c>)
 8000a0e:	617b      	str	r3, [r7, #20]
    fm_event_t event_next = EVENT_LCD_REFRESH;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
    UINT ret_status;
    while(1)
    {
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a14:	f107 030f 	add.w	r3, r7, #15
 8000a18:	2264      	movs	r2, #100	; 0x64
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <menu_task_entry+0x40>)
 8000a1e:	f00d fbd5 	bl	800e1cc <_txe_queue_receive>
 8000a22:	6138      	str	r0, [r7, #16]
        if(ret_status == TX_SUCCESS)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <menu_task_entry+0x32>
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(event_next);
 8000a2a:	7bfa      	ldrb	r2, [r7, #15]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4798      	blx	r3
 8000a32:	6178      	str	r0, [r7, #20]
 8000a34:	e7ee      	b.n	8000a14 <menu_task_entry+0x10>
        }
        else
        {
            ptr_menu = (ptr_fun_menu_t)(*ptr_menu)(EVENT_LCD_REFRESH);
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	2001      	movs	r0, #1
 8000a3a:	4798      	blx	r3
 8000a3c:	6178      	str	r0, [r7, #20]
        ret_status = tx_queue_receive(&event_queue_ptr,&event_next,100);
 8000a3e:	e7e9      	b.n	8000a14 <menu_task_entry+0x10>
 8000a40:	08013ff5 	.word	0x08013ff5
 8000a44:	20001388 	.word	0x20001388

08000a48 <debounce_task_entry>:
        }
    }
}

VOID debounce_task_entry(ULONG initial_input)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    /*
     * debounce_time*10ms se espera para evitar rebotes.
     */
    const int debounce_time = 14;
 8000a50:	230e      	movs	r3, #14
 8000a52:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	4819      	ldr	r0, [pc, #100]	; (8000ac0 <debounce_task_entry+0x78>)
 8000a5a:	f00d fd07 	bl	800e46c <_txe_semaphore_get>

        tx_thread_sleep(debounce_time);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00c f8f7 	bl	800cc54 <_tx_thread_sleep>

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a74:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a84:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a94:	611a      	str	r2, [r3, #16]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <debounce_task_entry+0x7c>)
 8000aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa4:	611a      	str	r2, [r3, #16]

        HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000aa6:	2015      	movs	r0, #21
 8000aa8:	f003 fa00 	bl	8003eac <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000aac:	2016      	movs	r0, #22
 8000aae:	f003 f9fd 	bl	8003eac <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000ab2:	2017      	movs	r0, #23
 8000ab4:	f003 f9fa 	bl	8003eac <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000ab8:	2018      	movs	r0, #24
 8000aba:	f003 f9f7 	bl	8003eac <HAL_NVIC_EnableIRQ>
        tx_semaphore_get(&debounce_semaphore_ptr,TX_WAIT_FOREVER);
 8000abe:	e7c9      	b.n	8000a54 <debounce_task_entry+0xc>
 8000ac0:	2000136c 	.word	0x2000136c
 8000ac4:	46022000 	.word	0x46022000

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000acc:	f000 febc 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f82c 	bl	8000b2c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ad4:	f000 f886 	bl	8000be4 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f000 faae 	bl	8001038 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000adc:	f000 f902 	bl	8000ce4 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000ae0:	f000 f914 	bl	8000d0c <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000ae4:	f000 f95e 	bl	8000da4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000ae8:	f000 f9ea 	bl	8000ec0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000aec:	f000 fa58 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000af0:	f000 f88a 	bl	8000c08 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  fm_lcd_clear();
 8000af4:	f00e fe7b 	bl	800f7ee <fm_lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afc:	2100      	movs	r1, #0
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <main+0x58>)
 8000b00:	f002 ff8e 	bl	8003a20 <HAL_ADCEx_Calibration_Start>
  __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <main+0x5c>)
 8000b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <main+0x5c>)
 8000b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
   HAL_LPTIM_Counter_Start(&hlptim1);
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <main+0x60>)
 8000b16:	f003 fd37 	bl	8004588 <HAL_LPTIM_Counter_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b1a:	f7ff fef3 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <main+0x56>
 8000b20:	200013c4 	.word	0x200013c4
 8000b24:	46020c00 	.word	0x46020c00
 8000b28:	20001450 	.word	0x20001450

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09e      	sub	sp, #120	; 0x78
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	2260      	movs	r2, #96	; 0x60
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f013 fdcc 	bl	80146d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000b50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b54:	f003 ff60 	bl	8004a18 <HAL_PWREx_ControlVoltageScaling>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000b5e:	f000 fb51 	bl	8001204 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b62:	f003 ff49 	bl	80049f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <SystemClock_Config+0xb4>)
 8000b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <SystemClock_Config+0xb4>)
 8000b6e:	f023 0318 	bic.w	r3, r3, #24
 8000b72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000b76:	2316      	movs	r3, #22
 8000b78:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b7a:	2381      	movs	r3, #129	; 0x81
 8000b7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b84:	2310      	movs	r3, #16
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 f873 	bl	8004c88 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ba8:	f000 fb2c 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	231f      	movs	r3, #31
 8000bae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 ff39 	bl	8005a40 <HAL_RCC_ClockConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bd4:	f000 fb16 	bl	8001204 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3778      	adds	r7, #120	; 0x78
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	46020c00 	.word	0x46020c00

08000be4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000be8:	f004 f81e 	bl	8004c28 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bec:	f004 f83c 	bl	8004c68 <HAL_PWREx_DisableUCPDDeadBattery>
/* USER CODE BEGIN PWR */
  HAL_PWREx_EnableVddIO2();
 8000bf0:	f004 f81a 	bl	8004c28 <HAL_PWREx_EnableVddIO2>

  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f003 ff9b 	bl	8004b30 <HAL_PWREx_ConfigSupply>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemPower_Config+0x20>
  {
      Error_Handler();
 8000c00:	f000 fb00 	bl	8001204 <Error_Handler>
  }
/* USER CODE END PWR */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2220      	movs	r2, #32
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f013 fd5f 	bl	80146d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c1c:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <MX_ADC1_Init+0xd4>)
 8000c1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000c92:	f001 f9bd 	bl	8002010 <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c9c:	f000 fab2 	bl	8001204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_ADC1_Init+0xd8>)
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000ca8:	2306      	movs	r3, #6
 8000caa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_ADC1_Init+0xd0>)
 8000cc0:	f001 fe0c 	bl	80028dc <HAL_ADC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000cca:	f000 fa9b 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200013c4 	.word	0x200013c4
 8000cdc:	42028000 	.word	0x42028000
 8000ce0:	ce080000 	.word	0xce080000

08000ce4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f003 fb1d 	bl	8004328 <HAL_ICACHE_ConfigAssociativityMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000cf4:	f000 fa86 	bl	8001204 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000cf8:	f003 fb36 	bl	8004368 <HAL_ICACHE_Enable>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d02:	f000 fa7f 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000d10:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <MX_LPTIM1_Init+0x90>)
 8000d14:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d22:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d32:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_LPTIM1_Init+0x8c>)
 8000d54:	f003 fb18 	bl	8004388 <HAL_LPTIM_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000d5e:	f000 fa51 	bl	8001204 <Error_Handler>
  /*
   * To run in stop mode the LPBAM low-power backgroung autonomous mode must be
   * configured
   *
   */
  __HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_LPDMA1_CLKAM_ENABLE();
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  __HAL_RCC_SRAM4_CLKAM_ENABLE();
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d88:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <MX_LPTIM1_Init+0x94>)
 8000d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

  /* USER CODE END LPTIM1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20001450 	.word	0x20001450
 8000d9c:	46004400 	.word	0x46004400
 8000da0:	46020c00 	.word	0x46020c00

08000da4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dd4:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <MX_RTC_Init+0x118>)
 8000dd6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd8:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000de0:	227f      	movs	r2, #127	; 0x7f
 8000de2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000de6:	22ff      	movs	r2, #255	; 0xff
 8000de8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dea:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e10:	4829      	ldr	r0, [pc, #164]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e12:	f007 ff2d 	bl	8008c70 <HAL_RTC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f9f2 	bl	8001204 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4820      	ldr	r0, [pc, #128]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e38:	f008 fb50 	bl	80094dc <HAL_RTCEx_PrivilegeModeSet>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e42:	f000 f9df 	bl	8001204 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000e46:	2311      	movs	r3, #17
 8000e48:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e64:	f007 ff86 	bl	8008d74 <HAL_RTC_SetTime>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000e6e:	f000 f9c9 	bl	8001204 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e72:	2301      	movs	r3, #1
 8000e74:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_MAY;
 8000e76:	2305      	movs	r3, #5
 8000e78:	717b      	strb	r3, [r7, #5]
  sDate.Date = 8;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 23;
 8000e7e:	2317      	movs	r3, #23
 8000e80:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000e8a:	f008 f881 	bl	8008f90 <HAL_RTC_SetDate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000e94:	f000 f9b6 	bl	8001204 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_RTC_Init+0x114>)
 8000ea2:	f008 fa31 	bl	8009308 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000eac:	f000 f9aa 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3738      	adds	r7, #56	; 0x38
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200014a0 	.word	0x200014a0
 8000ebc:	46007800 	.word	0x46007800

08000ec0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <MX_SPI1_Init+0xdc>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ed8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ee0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000ee4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000efa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000efe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f5e:	f008 faeb 	bl	8009538 <HAL_SPI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000f68:	f000 f94c 	bl	8001204 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_SPI1_Init+0xd8>)
 8000f80:	f008 fef7 	bl	8009d72 <HAL_SPIEx_SetConfigAutonomousMode>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000f8a:	f000 f93b 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200014d0 	.word	0x200014d0
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <MX_USART2_UART_Init+0x94>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000fea:	f009 faed 	bl	800a5c8 <HAL_UART_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f000 f906 	bl	8001204 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_USART2_UART_Init+0x90>)
 8000ffc:	f009 ffc6 	bl	800af8c <HAL_UARTEx_SetTxFifoThreshold>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001006:	f000 f8fd 	bl	8001204 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <MX_USART2_UART_Init+0x90>)
 800100e:	f009 fffb 	bl	800b008 <HAL_UARTEx_SetRxFifoThreshold>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001018:	f000 f8f4 	bl	8001204 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_USART2_UART_Init+0x90>)
 800101e:	f009 ff7c 	bl	800af1a <HAL_UARTEx_DisableFifoMode>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001028:	f000 f8ec 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20001560 	.word	0x20001560
 8001034:	40004400 	.word	0x40004400

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001054:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800105e:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800106e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800107e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001090:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <MX_GPIO_Init+0x17c>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <MX_GPIO_Init+0x17c>)
 800109c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ae:	4a41      	ldr	r2, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010b8:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x17c>)
 80010ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2150      	movs	r1, #80	; 0x50
 80010ca:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010cc:	f003 f8e2 	bl	8004294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2104      	movs	r1, #4
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <MX_GPIO_Init+0x184>)
 80010d6:	f003 f8dd 	bl	8004294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	4838      	ldr	r0, [pc, #224]	; (80011c0 <MX_GPIO_Init+0x188>)
 80010e0:	f003 f8d8 	bl	8004294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 80010e4:	2350      	movs	r3, #80	; 0x50
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x180>)
 80010fc:	f002 fef2 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_GPIO_Init+0x18c>)
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	482a      	ldr	r0, [pc, #168]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001116:	f002 fee5 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_red_Pin */
  GPIO_InitStruct.Pin = led_red_Pin;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_red_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4822      	ldr	r0, [pc, #136]	; (80011bc <MX_GPIO_Init+0x184>)
 8001132:	f002 fed7 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001136:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_GPIO_Init+0x18c>)
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	481b      	ldr	r0, [pc, #108]	; (80011b8 <MX_GPIO_Init+0x180>)
 800114c:	f002 feca 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_blue_Pin */
  GPIO_InitStruct.Pin = led_blue_Pin;
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_blue_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4816      	ldr	r0, [pc, #88]	; (80011c0 <MX_GPIO_Init+0x188>)
 8001168:	f002 febc 	bl	8003ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2015      	movs	r0, #21
 8001172:	f002 fe81 	bl	8003e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001176:	2015      	movs	r0, #21
 8001178:	f002 fe98 	bl	8003eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2016      	movs	r0, #22
 8001182:	f002 fe79 	bl	8003e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001186:	2016      	movs	r0, #22
 8001188:	f002 fe90 	bl	8003eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2017      	movs	r0, #23
 8001192:	f002 fe71 	bl	8003e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8001196:	2017      	movs	r0, #23
 8001198:	f002 fe88 	bl	8003eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2018      	movs	r0, #24
 80011a2:	f002 fe69 	bl	8003e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80011a6:	2018      	movs	r0, #24
 80011a8:	f002 fe80 	bl	8003eac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	46020c00 	.word	0x46020c00
 80011b8:	42020000 	.word	0x42020000
 80011bc:	42021800 	.word	0x42021800
 80011c0:	42020400 	.word	0x42020400
 80011c4:	10110000 	.word	0x10110000

080011c8 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */

__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f008 f911 	bl	80093f8 <HAL_RTCEx_DeactivateWakeUpTimer>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011f2:	f000 fb57 	bl	80018a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40001000 	.word	0x40001000

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2104      	movs	r1, #4
 8001210:	4801      	ldr	r0, [pc, #4]	; (8001218 <Error_Handler+0x14>)
 8001212:	f003 f83f 	bl	8004294 <HAL_GPIO_WritePin>
  while (1)
 8001216:	e7fe      	b.n	8001216 <Error_Handler+0x12>
 8001218:	42021800 	.word	0x42021800

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_MspInit+0x34>)
 8001224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001228:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_MspInit+0x34>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_MspInit+0x34>)
 8001234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_PWREx_EnableVddA();
 8001240:	f003 fd02 	bl	8004c48 <HAL_PWREx_EnableVddA>
  HAL_PWREx_EnableVddIO2();
 8001244:	f003 fcf0 	bl	8004c28 <HAL_PWREx_EnableVddIO2>
  /* USER CODE END MspInit 1 */
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	46020c00 	.word	0x46020c00

08001254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b6      	sub	sp, #216	; 0xd8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	22c8      	movs	r2, #200	; 0xc8
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f013 fa37 	bl	80146d8 <memset>
  if(hadc->Instance==ADC1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <HAL_ADC_MspInit+0x70>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d122      	bne.n	80012ba <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4618      	mov	r0, r3
 800128e:	f004 ffe5 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8001298:	f7ff ffb4 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_ADC_MspInit+0x74>)
 800129e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_ADC_MspInit+0x74>)
 80012a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_ADC_MspInit+0x74>)
 80012ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	37d8      	adds	r7, #216	; 0xd8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	42028000 	.word	0x42028000
 80012c8:	46020c00 	.word	0x46020c00

080012cc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b6      	sub	sp, #216	; 0xd8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	22c8      	movs	r2, #200	; 0xc8
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f013 f9fb 	bl	80146d8 <memset>
  if(hlptim->Instance==LPTIM1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_LPTIM_MspInit+0x80>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d12a      	bne.n	8001342 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80012ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80012f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4618      	mov	r0, r3
 8001306:	f004 ffa9 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8001310:	f7ff ff78 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_LPTIM_MspInit+0x84>)
 8001316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800131a:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_LPTIM_MspInit+0x84>)
 800131c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001320:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_LPTIM_MspInit+0x84>)
 8001326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800132a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2043      	movs	r0, #67	; 0x43
 8001338:	f002 fd9e 	bl	8003e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800133c:	2043      	movs	r0, #67	; 0x43
 800133e:	f002 fdb5 	bl	8003eac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	37d8      	adds	r7, #216	; 0xd8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	46004400 	.word	0x46004400
 8001350:	46020c00 	.word	0x46020c00

08001354 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0b6      	sub	sp, #216	; 0xd8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	22c8      	movs	r2, #200	; 0xc8
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f013 f9b7 	bl	80146d8 <memset>
  if(hrtc->Instance==RTC)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_RTC_MspInit+0x90>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d132      	bne.n	80013da <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001374:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f004 ff65 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001398:	f7ff ff34 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RTC_MspInit+0x94>)
 800139e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_RTC_MspInit+0x94>)
 80013a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_RTC_MspInit+0x94>)
 80013ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013b2:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_RTC_MspInit+0x94>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_RTC_MspInit+0x94>)
 80013be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2002      	movs	r0, #2
 80013d0:	f002 fd52 	bl	8003e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80013d4:	2002      	movs	r0, #2
 80013d6:	f002 fd69 	bl	8003eac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	37d8      	adds	r7, #216	; 0xd8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	46007800 	.word	0x46007800
 80013e8:	46020c00 	.word	0x46020c00

080013ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0bc      	sub	sp, #240	; 0xf0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22c8      	movs	r2, #200	; 0xc8
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f013 f963 	bl	80146d8 <memset>
  if(hspi->Instance==SPI1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <HAL_SPI_MspInit+0xc8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d146      	bne.n	80014aa <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800141c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001428:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800142c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4618      	mov	r0, r3
 8001436:	f004 ff11 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001440:	f7ff fee0 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_SPI_MspInit+0xcc>)
 8001446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800144a:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_SPI_MspInit+0xcc>)
 800144c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001450:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_SPI_MspInit+0xcc>)
 8001456:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800145a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_SPI_MspInit+0xcc>)
 8001464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_SPI_MspInit+0xcc>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_SPI_MspInit+0xcc>)
 8001474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 8001480:	2382      	movs	r3, #130	; 0x82
 8001482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001498:	2305      	movs	r3, #5
 800149a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_SPI_MspInit+0xd0>)
 80014a6:	f002 fd1d 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	37f0      	adds	r7, #240	; 0xf0
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40013000 	.word	0x40013000
 80014b8:	46020c00 	.word	0x46020c00
 80014bc:	42020000 	.word	0x42020000

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0bc      	sub	sp, #240	; 0xf0
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	22c8      	movs	r2, #200	; 0xc8
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f013 f8f9 	bl	80146d8 <memset>
  if(huart->Instance==USART2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_UART_MspInit+0xc4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d144      	bne.n	800157a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f0:	f04f 0202 	mov.w	r2, #2
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fea9 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001510:	f7ff fe78 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_UART_MspInit+0xc8>)
 8001516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800151a:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_UART_MspInit+0xc8>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_MspInit+0xc8>)
 8001526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_UART_MspInit+0xc8>)
 8001534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_UART_MspInit+0xc8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_UART_MspInit+0xc8>)
 8001544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001550:	230c      	movs	r3, #12
 8001552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001568:	2307      	movs	r3, #7
 800156a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_MspInit+0xcc>)
 8001576:	f002 fcb5 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	37f0      	adds	r7, #240	; 0xf0
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	46020c00 	.word	0x46020c00
 800158c:	42020000 	.word	0x42020000

08001590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <HAL_InitTick+0xcc>)
 80015a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <HAL_InitTick+0xcc>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_InitTick+0xcc>)
 80015b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015be:	f107 0210 	add.w	r2, r7, #16
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fd89 	bl	80060e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ce:	f004 fd4b 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 80015d2:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_InitTick+0xd0>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	3b01      	subs	r3, #1
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_InitTick+0xd4>)
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <HAL_InitTick+0xd8>)
 80015e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_InitTick+0xd4>)
 80015ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <HAL_InitTick+0xd4>)
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_InitTick+0xd4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_InitTick+0xd4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001602:	4818      	ldr	r0, [pc, #96]	; (8001664 <HAL_InitTick+0xd4>)
 8001604:	f008 fbf6 	bl	8009df4 <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800160e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001616:	4813      	ldr	r0, [pc, #76]	; (8001664 <HAL_InitTick+0xd4>)
 8001618:	f008 fc4e 	bl	8009eb8 <HAL_TIM_Base_Start_IT>
 800161c:	4603      	mov	r3, r0
 800161e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10e      	bne.n	8001648 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d808      	bhi.n	8001642 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	2031      	movs	r0, #49	; 0x31
 8001636:	f002 fc1f 	bl	8003e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_InitTick+0xdc>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e002      	b.n	8001648 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001648:	2031      	movs	r0, #49	; 0x31
 800164a:	f002 fc2f 	bl	8003eac <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800164e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001652:	4618      	mov	r0, r3
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	46020c00 	.word	0x46020c00
 8001660:	431bde83 	.word	0x431bde83
 8001664:	200015f4 	.word	0x200015f4
 8001668:	40001000 	.word	0x40001000
 800166c:	20000004 	.word	0x20000004

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler+0x4>

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <RTC_IRQHandler+0x10>)
 80016a2:	f007 ff01 	bl	80094a8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200014a0 	.word	0x200014a0

080016b0 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80016b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016b8:	f002 fe04 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80016c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016c8:	f002 fdfc 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80016d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016d8:	f002 fdf4 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016e8:	f002 fdec 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM6_IRQHandler+0x10>)
 80016f6:	f008 fc7f 	bl	8009ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200015f4 	.word	0x200015f4

08001704 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <LPTIM1_IRQHandler+0x10>)
 800170a:	f002 ff71 	bl	80045f0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20001450 	.word	0x20001450

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f012 ff9c 	bl	8014684 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200c0000 	.word	0x200c0000
 8001778:	00000400 	.word	0x00000400
 800177c:	20001640 	.word	0x20001640
 8001780:	20001e60 	.word	0x20001e60

08001784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <SystemInit+0x68>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <SystemInit+0x68>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <SystemInit+0x6c>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <SystemInit+0x6c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <SystemInit+0x6c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <SystemInit+0x6c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <SystemInit+0x6c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <SystemInit+0x6c>)
 80017b6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017ba:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <SystemInit+0x6c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <SystemInit+0x6c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <SystemInit+0x6c>)
 80017cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <SystemInit+0x6c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SystemInit+0x68>)
 80017da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017de:	609a      	str	r2, [r3, #8]
  #endif
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	46020c00 	.word	0x46020c00

080017f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f8:	f7ff ffc4 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017fe:	e003      	b.n	8001808 <LoopCopyDataInit>

08001800 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001802:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001804:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001806:	3104      	adds	r1, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001808:	480a      	ldr	r0, [pc, #40]	; (8001834 <LoopForever+0xa>)
	ldr	r3, =_edata
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <LoopForever+0xe>)
	adds	r2, r0, r1
 800180c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800180e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001810:	d3f6      	bcc.n	8001800 <CopyDataInit>
	ldr	r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001814:	e002      	b.n	800181c <LoopFillZerobss>

08001816 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001816:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001818:	f842 3b04 	str.w	r3, [r2], #4

0800181c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <LoopForever+0x16>)
	cmp	r2, r3
 800181e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001820:	d3f9      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f012 ff35 	bl	8014690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001826:	f7ff f94f 	bl	8000ac8 <main>

0800182a <LoopForever>:

LoopForever:
    b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800182c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001830:	08015648 	.word	0x08015648
	ldr	r0, =_sdata
 8001834:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001838:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 800183c:	200001b8 	.word	0x200001b8
	ldr	r3, = _ebss
 8001840:	20001e59 	.word	0x20001e59

08001844 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_IRQHandler>
	...

08001848 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_Init+0x4c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_Init+0x4c>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f002 fb02 	bl	8003e62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800185e:	f004 fae1 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_Init+0x50>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	490b      	ldr	r1, [pc, #44]	; (800189c <HAL_Init+0x54>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_Init+0x58>)
 8001876:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001878:	200f      	movs	r0, #15
 800187a:	f7ff fe89 	bl	8001590 <HAL_InitTick>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e002      	b.n	800188e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fcc8 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000
 8001898:	46020c00 	.word	0x46020c00
 800189c:	080153e8 	.word	0x080153e8
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20001644 	.word	0x20001644

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20001644 	.word	0x20001644

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_GetREVID+0x18>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	b29b      	uxth	r3, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e0044000 	.word	0xe0044000

08001948 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <LL_ADC_SetResolution+0x3c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d104      	bne.n	80019d0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f023 020c 	bic.w	r2, r3, #12
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	46021000 	.word	0x46021000

080019f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3360      	adds	r3, #96	; 0x60
 8001a02:	461a      	mov	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3360      	adds	r3, #96	; 0x60
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b087      	sub	sp, #28
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3360      	adds	r3, #96	; 0x60
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3360      	adds	r3, #96	; 0x60
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	; 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	d002      	beq.n	8001b32 <LL_ADC_SetGainCompensation+0x32>
 8001b2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b30:	e000      	b.n	8001b34 <LL_ADC_SetGainCompensation+0x34>
 8001b32:	2200      	movs	r2, #0
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2107      	movs	r1, #7
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	401a      	ands	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d020      	beq.n	8001c02 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3330      	adds	r3, #48	; 0x30
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	4413      	add	r3, r2
 8001bd2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	211f      	movs	r1, #31
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	f003 011f 	and.w	r1, r3, #31
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001c00:	e02b      	b.n	8001c5a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	401a      	ands	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d104      	bne.n	8001c2a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	e010      	b.n	8001c4c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001c40:	2320      	movs	r3, #32
 8001c42:	e003      	b.n	8001c4c <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	f001 011f 	and.w	r1, r1, #31
 8001c52:	408b      	lsls	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c5a:	bf00      	nop
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	46021000 	.word	0x46021000

08001c6c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2201      	movs	r2, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	e015      	b.n	8001cbc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
  return result;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc6:	bf00      	nop
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b08b      	sub	sp, #44	; 0x2c
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d042      	beq.n	8001d9e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d104      	bne.n	8001d2c <LL_ADC_SetChannelSamplingTime+0x28>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 021f 	and.w	r2, r3, #31
 8001d2a:	e011      	b.n	8001d50 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	617b      	str	r3, [r7, #20]
  return result;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e003      	b.n	8001d4e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	0e5b      	lsrs	r3, r3, #25
 8001d54:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001d58:	460b      	mov	r3, r1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	1ad2      	subs	r2, r2, r3
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3314      	adds	r3, #20
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	0e5b      	lsrs	r3, r3, #25
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2107      	movs	r1, #7
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	431a      	orrs	r2, r3
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001d9c:	e00e      	b.n	8001dbc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	0219      	lsls	r1, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	400b      	ands	r3, r1
 8001db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001db6:	431a      	orrs	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	615a      	str	r2, [r3, #20]
}
 8001dbc:	bf00      	nop
 8001dbe:	372c      	adds	r7, #44	; 0x2c
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	46021000 	.word	0x46021000

08001dcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0318 	and.w	r3, r3, #24
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df0:	40d9      	lsrs	r1, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	400b      	ands	r3, r1
 8001df6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	000fffff 	.word	0x000fffff

08001e14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6093      	str	r3, [r2, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eec:	f043 0202 	orr.w	r2, r3, #2
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_IsEnabled+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_IsEnabled+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_IsDisableOngoing+0x18>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_IsDisableOngoing+0x1a>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f88:	f043 0210 	orr.w	r2, r3, #16
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d101      	bne.n	8001fb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e2b3      	b.n	8002598 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a8b      	ldr	r2, [pc, #556]	; (800226c <HAL_ADC_Init+0x25c>)
 800203e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff f903 	bl	8001254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fee9 	bl	8001e38 <LL_ADC_IsDeepPowerDownEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fecf 	bl	8001e14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff04 	bl	8001e88 <LL_ADC_IsInternalRegulatorEnabled>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fee8 	bl	8001e60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002090:	4b77      	ldr	r3, [pc, #476]	; (8002270 <HAL_ADC_Init+0x260>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_ADC_Init+0x264>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fee6 	bl	8001e88 <LL_ADC_IsInternalRegulatorEnabled>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff59 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 80020ea:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f040 8244 	bne.w	8002582 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 8240 	bne.w	8002582 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002106:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fef2 	bl	8001f00 <LL_ADC_IsEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d140      	bne.n	80021a4 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a51      	ldr	r2, [pc, #324]	; (800226c <HAL_ADC_Init+0x25c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d028      	beq.n	800217e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a51      	ldr	r2, [pc, #324]	; (8002278 <HAL_ADC_Init+0x268>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d109      	bne.n	800214a <HAL_ADC_Init+0x13a>
 8002136:	4850      	ldr	r0, [pc, #320]	; (8002278 <HAL_ADC_Init+0x268>)
 8002138:	f7ff fee2 	bl	8001f00 <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e008      	b.n	800215c <HAL_ADC_Init+0x14c>
 800214a:	4848      	ldr	r0, [pc, #288]	; (800226c <HAL_ADC_Init+0x25c>)
 800214c:	f7ff fed8 	bl	8001f00 <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d021      	beq.n	80021a4 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a44      	ldr	r2, [pc, #272]	; (8002278 <HAL_ADC_Init+0x268>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_ADC_Init+0x15e>
 800216a:	4a44      	ldr	r2, [pc, #272]	; (800227c <HAL_ADC_Init+0x26c>)
 800216c:	e000      	b.n	8002170 <HAL_ADC_Init+0x160>
 800216e:	4a44      	ldr	r2, [pc, #272]	; (8002280 <HAL_ADC_Init+0x270>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f7ff fbe6 	bl	8001948 <LL_ADC_SetCommonClock>
 800217c:	e012      	b.n	80021a4 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7ff fc11 	bl	80019b0 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_ADC_Init+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800219e:	4938      	ldr	r1, [pc, #224]	; (8002280 <HAL_ADC_Init+0x270>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a30      	ldr	r2, [pc, #192]	; (800226c <HAL_ADC_Init+0x25c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d010      	beq.n	80021d0 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021ba:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80021c0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80021c8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80021ca:	4313      	orrs	r3, r2
 80021cc:	623b      	str	r3, [r7, #32]
 80021ce:	e030      	b.n	8002232 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7f1b      	ldrb	r3, [r3, #28]
 80021d4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021dc:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021de:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	d002      	beq.n	80021ee <HAL_ADC_Init+0x1de>
 80021e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ec:	e000      	b.n	80021f0 <HAL_ADC_Init+0x1e0>
 80021ee:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021f0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80021f6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	da04      	bge.n	800220a <HAL_ADC_Init+0x1fa>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002208:	e001      	b.n	800220e <HAL_ADC_Init+0x1fe>
 800220a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800220e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4918      	ldr	r1, [pc, #96]	; (8002278 <HAL_ADC_Init+0x268>)
 8002216:	428b      	cmp	r3, r1
 8002218:	d103      	bne.n	8002222 <HAL_ADC_Init+0x212>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002220:	e003      	b.n	800222a <HAL_ADC_Init+0x21a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002228:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800222a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800222c:	6a3a      	ldr	r2, [r7, #32]
 800222e:	4313      	orrs	r3, r2
 8002230:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d12f      	bne.n	800229c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_ADC_Init+0x25c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	3b01      	subs	r3, #1
 800224c:	045b      	lsls	r3, r3, #17
 800224e:	6a3a      	ldr	r2, [r7, #32]
 8002250:	4313      	orrs	r3, r2
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	e022      	b.n	800229c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	e018      	b.n	800229c <HAL_ADC_Init+0x28c>
 800226a:	bf00      	nop
 800226c:	46021000 	.word	0x46021000
 8002270:	20000000 	.word	0x20000000
 8002274:	053e2d63 	.word	0x053e2d63
 8002278:	42028000 	.word	0x42028000
 800227c:	42028308 	.word	0x42028308
 8002280:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_ADC_Init+0x4dc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	4313      	orrs	r3, r2
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	4313      	orrs	r3, r2
 80022c0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <HAL_ADC_Init+0x4e0>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	430b      	orrs	r3, r1
 80022d4:	60d3      	str	r3, [r2, #12]
 80022d6:	e031      	b.n	800233c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	4313      	orrs	r3, r2
 80022ee:	6a3a      	ldr	r2, [r7, #32]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b7e      	ldr	r3, [pc, #504]	; (80024f4 <HAL_ADC_Init+0x4e4>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	6a39      	ldr	r1, [r7, #32]
 8002304:	430b      	orrs	r3, r1
 8002306:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_ADC_Init+0x4dc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f000 8093 	beq.w	800246e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fe25 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 8002352:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe46 	bl	8001fea <LL_ADC_INJ_IsConversionOngoing>
 800235e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d161      	bne.n	800242a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d15e      	bne.n	800242a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7f1b      	ldrb	r3, [r3, #28]
 8002370:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4960      	ldr	r1, [pc, #384]	; (80024f8 <HAL_ADC_Init+0x4e8>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d102      	bne.n	8002382 <HAL_ADC_Init+0x372>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	e002      	b.n	8002388 <HAL_ADC_Init+0x378>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002388:	4313      	orrs	r3, r2
 800238a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	6a39      	ldr	r1, [r7, #32]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f7ff fba2 	bl	8001b00 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d11e      	bne.n	8002404 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_ADC_Init+0x4ec>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80023da:	0411      	lsls	r1, r2, #16
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023f2:	0892      	lsrs	r2, r2, #2
 80023f4:	430a      	orrs	r2, r1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	611a      	str	r2, [r3, #16]
 8002402:	e007      	b.n	8002414 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10c      	bne.n	800244c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	f023 010f 	bic.w	r1, r3, #15
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
 800244a:	e007      	b.n	800245c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 020f 	bic.w	r2, r2, #15
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002460:	f023 0303 	bic.w	r3, r3, #3
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800246c:	e092      	b.n	8002594 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002474:	2b01      	cmp	r3, #1
 8002476:	d111      	bne.n	800249c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002480:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002486:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800248c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	4313      	orrs	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_ADC_Init+0x4f0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	69f9      	ldr	r1, [r7, #28]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	461a      	mov	r2, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	f7ff fb43 	bl	8001b46 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	461a      	mov	r2, r3
 80024ca:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80024ce:	f7ff fb3a 	bl	8001b46 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d114      	bne.n	8002504 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f062 020f 	orn	r2, r2, #15
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
 80024ea:	e024      	b.n	8002536 <HAL_ADC_Init+0x526>
 80024ec:	46021000 	.word	0x46021000
 80024f0:	fff0c013 	.word	0xfff0c013
 80024f4:	ffde800d 	.word	0xffde800d
 80024f8:	42028000 	.word	0x42028000
 80024fc:	fc00f81e 	.word	0xfc00f81e
 8002500:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800250c:	d113      	bne.n	8002536 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f003 031c 	and.w	r3, r3, #28
 8002520:	f06f 020f 	mvn.w	r2, #15
 8002524:	fa02 f103 	lsl.w	r1, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_ADC_Init+0x590>)
 800253e:	4013      	ands	r3, r2
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	429a      	cmp	r2, r3
 8002544:	d10b      	bne.n	800255e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002550:	f023 0303 	bic.w	r3, r3, #3
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800255c:	e01a      	b.n	8002594 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002562:	f023 0312 	bic.w	r3, r3, #18
 8002566:	f043 0210 	orr.w	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002580:	e008      	b.n	8002594 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002586:	f043 0210 	orr.w	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002598:	4618      	mov	r0, r3
 800259a:	3728      	adds	r7, #40	; 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	833ffff3 	.word	0x833ffff3

080025a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fcf3 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d15d      	bne.n	8002678 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Start+0x26>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e059      	b.n	800267e <HAL_ADC_Start+0xda>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f001 f916 	bl	8003804 <ADC_Enable>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d145      	bne.n	800266e <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <HAL_ADC_Start+0xe4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d011      	beq.n	8002624 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260c:	d106      	bne.n	800261c <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002612:	f023 0206 	bic.w	r2, r3, #6
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	67da      	str	r2, [r3, #124]	; 0x7c
 800261a:	e006      	b.n	800262a <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	67da      	str	r2, [r3, #124]	; 0x7c
 8002622:	e002      	b.n	800262a <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	221c      	movs	r2, #28
 8002630:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_ADC_Start+0xe4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800265a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fc70 	bl	8001f4c <LL_ADC_REG_StartConversion>
 800266c:	e006      	b.n	800267c <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002676:	e001      	b.n	800267c <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002678:	2302      	movs	r3, #2
 800267a:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	46021000 	.word	0x46021000

0800268c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Stop+0x16>
 800269e:	2302      	movs	r3, #2
 80026a0:	e023      	b.n	80026ea <HAL_ADC_Stop+0x5e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80026aa:	2103      	movs	r1, #3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 ffed 	bl	800368c <ADC_ConversionStop>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f001 f911 	bl	80038e4 <ADC_Disable>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b08      	cmp	r3, #8
 8002704:	d102      	bne.n	800270c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002706:	2308      	movs	r3, #8
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e027      	b.n	800275c <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6a      	ldr	r2, [pc, #424]	; (80028bc <HAL_ADC_PollForConversion+0x1c8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d011      	beq.n	800273a <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0be      	b.n	80028b2 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002734:	2304      	movs	r3, #4
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e010      	b.n	800275c <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0ac      	b.n	80028b2 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002758:	2304      	movs	r3, #4
 800275a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800275c:	f7ff f8b6 	bl	80018cc <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002762:	e021      	b.n	80027a8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d01d      	beq.n	80027a8 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800276c:	f7ff f8ae 	bl	80018cc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <HAL_ADC_PollForConversion+0x8e>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d112      	bne.n	80027a8 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002794:	f043 0204 	orr.w	r2, r3, #4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e084      	b.n	80028b2 <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0d6      	beq.n	8002764 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f9dc 	bl	8001b84 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d06e      	beq.n	80028b0 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d169      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a36      	ldr	r2, [pc, #216]	; (80028bc <HAL_ADC_PollForConversion+0x1c8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02e      	beq.n	8002844 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d111      	bne.n	8002818 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d104      	bne.n	8002830 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2208      	movs	r2, #8
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e03f      	b.n	80028b0 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d13a      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e035      	b.n	80028b0 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b08      	cmp	r3, #8
 8002850:	d126      	bne.n	80028a0 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fba0 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d112      	bne.n	8002888 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 020c 	bic.w	r2, r2, #12
 8002870:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	679a      	str	r2, [r3, #120]	; 0x78
 8002886:	e00b      	b.n	80028a0 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7f1b      	ldrb	r3, [r3, #28]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	220c      	movs	r2, #12
 80028ae:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	46021000 	.word	0x46021000

080028c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0bc      	sub	sp, #240	; 0xf0
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4aa8      	ldr	r2, [pc, #672]	; (8002b98 <HAL_ADC_ConfigChannel+0x2bc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d103      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x36>
 800290c:	2302      	movs	r3, #2
 800290e:	f000 beb5 	b.w	800367c <HAL_ADC_ConfigChannel+0xda0>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fb3c 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 8695 	bne.w	8003656 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a99      	ldr	r2, [pc, #612]	; (8002b98 <HAL_ADC_ConfigChannel+0x2bc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f000 83ea 	beq.w	800310c <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x7a>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2201      	movs	r2, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	e01d      	b.n	8002992 <HAL_ADC_ConfigChannel+0xb6>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 800296a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800296e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800297a:	2320      	movs	r3, #32
 800297c:	e004      	b.n	8002988 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800297e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2201      	movs	r2, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	69d1      	ldr	r1, [r2, #28]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	f7ff f8fd 	bl	8001bac <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff faf0 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 80029bc:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fb10 	bl	8001fea <LL_ADC_INJ_IsConversionOngoing>
 80029ca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 81ed 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f040 81e8 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f7ff f988 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d046      	beq.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a26:	f7fe ffe3 	bl	80019f0 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6919      	ldr	r1, [r3, #16]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f7ff f811 	bl	8001a5e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	7e9b      	ldrb	r3, [r3, #26]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d11e      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x17e>
 8002a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a58:	e000      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x180>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f7ff f834 	bl	8001aca <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x19c>
 8002a72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a76:	e000      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x19e>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff f80a 	bl	8001a94 <LL_ADC_SetOffsetSignedSaturation>
 8002a80:	e197      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7ff f81c 	bl	8001aca <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7fe fff9 	bl	8001a94 <LL_ADC_SetOffsetSignedSaturation>
 8002aa2:	e186      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe ffc1 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1f4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe ffb6 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 021f 	and.w	r2, r3, #31
 8002ace:	e01e      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x232>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe ffab 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e004      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x24a>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	0e9b      	lsrs	r3, r3, #26
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	e018      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x27c>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e004      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002b4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d107      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	f7fe ff42 	bl	80019f0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe ff5d 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x2c0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ff52 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	e020      	b.n	8002bda <HAL_ADC_ConfigChannel+0x2fe>
 8002b98:	46021000 	.word	0x46021000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ff45 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002bca:	2320      	movs	r3, #32
 8002bcc:	e004      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002bce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x316>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0e9b      	lsrs	r3, r3, #26
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	e018      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x348>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e004      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	2300      	movs	r3, #0
 8002c32:	2101      	movs	r1, #1
 8002c34:	f7fe fedc 	bl	80019f0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fef7 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x388>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe feec 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	e01e      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x3c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fee1 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e004      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x3de>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	e018      	b.n	8002cec <HAL_ADC_ConfigChannel+0x410>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e004      	b.n	8002cec <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d107      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	f7fe fe78 	bl	80019f0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2103      	movs	r1, #3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fe93 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x450>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2103      	movs	r1, #3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fe88 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	e01a      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x486>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2103      	movs	r1, #3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fe7d 	bl	8001a32 <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002d52:	2320      	movs	r3, #32
 8002d54:	e004      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x49e>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	e011      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x4c2>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002d92:	2320      	movs	r3, #32
 8002d94:	e003      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d107      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2300      	movs	r3, #0
 8002dac:	2103      	movs	r1, #3
 8002dae:	f7fe fe1f 	bl	80019f0 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f8a2 	bl	8001f00 <LL_ADC_IsEnabled>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8456 	bne.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f7fe fffb 	bl	8001dcc <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dde:	f040 80d6 	bne.w	8002f8e <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10b      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x52a>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2b09      	cmp	r3, #9
 8002dfc:	bf94      	ite	ls
 8002dfe:	2301      	movls	r3, #1
 8002e00:	2300      	movhi	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e019      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x55e>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e16:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002e1e:	2320      	movs	r3, #32
 8002e20:	e003      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	bf94      	ite	ls
 8002e34:	2301      	movls	r3, #1
 8002e36:	2300      	movhi	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04d      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x5fe>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x57e>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	0e9b      	lsrs	r3, r3, #26
 8002e50:	3301      	adds	r3, #1
 8002e52:	069b      	lsls	r3, r3, #26
 8002e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e58:	e015      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x5aa>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e003      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	069b      	lsls	r3, r3, #26
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x5ca>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	e017      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x5fa>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	e04e      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x69c>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x61a>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	3301      	adds	r3, #1
 8002eee:	069b      	lsls	r3, r3, #26
 8002ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef4:	e015      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x646>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f06:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e003      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	069b      	lsls	r3, r3, #26
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x666>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	e017      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x696>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e003      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002f8a:	f7fe febb 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f280 836c 	bge.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a97      	ldr	r2, [pc, #604]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x6ca>
 8002fa2:	4b97      	ldr	r3, [pc, #604]	; (8003200 <HAL_ADC_ConfigChannel+0x924>)
 8002fa4:	e000      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x6cc>
 8002fa6:	4b97      	ldr	r3, [pc, #604]	; (8003204 <HAL_ADC_ConfigChannel+0x928>)
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fcf3 	bl	8001994 <LL_ADC_GetCommonPathInternalCh>
 8002fae:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a91      	ldr	r2, [pc, #580]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d109      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x6f4>
 8002fbc:	488f      	ldr	r0, [pc, #572]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 8002fbe:	f7fe ff9f 	bl	8001f00 <LL_ADC_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e008      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x706>
 8002fd0:	488d      	ldr	r0, [pc, #564]	; (8003208 <HAL_ADC_ConfigChannel+0x92c>)
 8002fd2:	f7fe ff95 	bl	8001f00 <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8088 	beq.w	80030f8 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a87      	ldr	r2, [pc, #540]	; (800320c <HAL_ADC_ConfigChannel+0x930>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d132      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12c      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7e      	ldr	r2, [pc, #504]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d005      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x738>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7e      	ldr	r2, [pc, #504]	; (8003208 <HAL_ADC_ConfigChannel+0x92c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	f040 832b 	bne.w	800366a <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a78      	ldr	r2, [pc, #480]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x746>
 800301e:	4a78      	ldr	r2, [pc, #480]	; (8003200 <HAL_ADC_ConfigChannel+0x924>)
 8003020:	e000      	b.n	8003024 <HAL_ADC_ConfigChannel+0x748>
 8003022:	4a78      	ldr	r2, [pc, #480]	; (8003204 <HAL_ADC_ConfigChannel+0x928>)
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7fe fc9d 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003034:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_ADC_ConfigChannel+0x934>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	4a76      	ldr	r2, [pc, #472]	; (8003214 <HAL_ADC_ConfigChannel+0x938>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	3301      	adds	r3, #1
 8003044:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003046:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003048:	e002      	b.n	8003050 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3b01      	subs	r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f9      	bne.n	800304a <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003056:	e308      	b.n	800366a <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6e      	ldr	r2, [pc, #440]	; (8003218 <HAL_ADC_ConfigChannel+0x93c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d121      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11b      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a62      	ldr	r2, [pc, #392]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d005      	beq.n	8003084 <HAL_ADC_ConfigChannel+0x7a8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a62      	ldr	r2, [pc, #392]	; (8003208 <HAL_ADC_ConfigChannel+0x92c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f040 82f5 	bne.w	800366e <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a5c      	ldr	r2, [pc, #368]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7b6>
 800308e:	4a5c      	ldr	r2, [pc, #368]	; (8003200 <HAL_ADC_ConfigChannel+0x924>)
 8003090:	e000      	b.n	8003094 <HAL_ADC_ConfigChannel+0x7b8>
 8003092:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <HAL_ADC_ConfigChannel+0x928>)
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fe fc65 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a4:	e2e3      	b.n	800366e <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a5c      	ldr	r2, [pc, #368]	; (800321c <HAL_ADC_ConfigChannel+0x940>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f040 82df 	bne.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 82d8 	bne.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a4d      	ldr	r2, [pc, #308]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d005      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x7fa>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a4e      	ldr	r2, [pc, #312]	; (8003208 <HAL_ADC_ConfigChannel+0x92c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	f040 82cd 	bne.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a48      	ldr	r2, [pc, #288]	; (80031fc <HAL_ADC_ConfigChannel+0x920>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x808>
 80030e0:	4a47      	ldr	r2, [pc, #284]	; (8003200 <HAL_ADC_ConfigChannel+0x924>)
 80030e2:	e000      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x80a>
 80030e4:	4a47      	ldr	r2, [pc, #284]	; (8003204 <HAL_ADC_ConfigChannel+0x928>)
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7fe fc3c 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 80030f6:	e2bb      	b.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800310a:	e2b1      	b.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8003114:	f7fe fc0a 	bl	800192c <HAL_GetREVID>
 8003118:	4603      	mov	r3, r0
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	d130      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a3e      	ldr	r2, [pc, #248]	; (8003220 <HAL_ADC_ConfigChannel+0x944>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d103      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 800312a:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <HAL_ADC_ConfigChannel+0x948>)
 800312c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003130:	e027      	b.n	8003182 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_ADC_ConfigChannel+0x94c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_ADC_ConfigChannel+0x950>)
 800313e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003142:	e01e      	b.n	8003182 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a39      	ldr	r2, [pc, #228]	; (8003230 <HAL_ADC_ConfigChannel+0x954>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d103      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_ADC_ConfigChannel+0x958>)
 8003150:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003154:	e015      	b.n	8003182 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a37      	ldr	r2, [pc, #220]	; (8003238 <HAL_ADC_ConfigChannel+0x95c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d103      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_ADC_ConfigChannel+0x960>)
 8003162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003166:	e00c      	b.n	8003182 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a34      	ldr	r2, [pc, #208]	; (8003240 <HAL_ADC_ConfigChannel+0x964>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d103      	bne.n	800317a <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_ADC_ConfigChannel+0x95c>)
 8003174:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003178:	e003      	b.n	8003182 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	f000 81a2 	beq.w	80034d0 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003194:	d004      	beq.n	80031a0 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800319a:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_ADC_ConfigChannel+0x968>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d107      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe fd5f 	bl	8001c6c <LL_ADC_REG_SetSequencerChAdd>
 80031ae:	e0c1      	b.n	8003334 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	210f      	movs	r1, #15
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x904>
 80031d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	e037      	b.n	8003250 <HAL_ADC_ConfigChannel+0x974>
 80031e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d127      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e029      	b.n	8003250 <HAL_ADC_ConfigChannel+0x974>
 80031fc:	42028000 	.word	0x42028000
 8003200:	42028308 	.word	0x42028308
 8003204:	46021308 	.word	0x46021308
 8003208:	46021000 	.word	0x46021000
 800320c:	ce080000 	.word	0xce080000
 8003210:	20000000 	.word	0x20000000
 8003214:	053e2d63 	.word	0x053e2d63
 8003218:	ca040000 	.word	0xca040000
 800321c:	80000001 	.word	0x80000001
 8003220:	b6002000 	.word	0xb6002000
 8003224:	da400000 	.word	0xda400000
 8003228:	ba004000 	.word	0xba004000
 800322c:	de800000 	.word	0xde800000
 8003230:	b2001000 	.word	0xb2001000
 8003234:	81000001 	.word	0x81000001
 8003238:	d6200000 	.word	0xd6200000
 800323c:	d2100000 	.word	0xd2100000
 8003240:	d7200000 	.word	0xd7200000
 8003244:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	6849      	ldr	r1, [r1, #4]
 8003254:	f001 011f 	and.w	r1, r1, #31
 8003258:	408b      	lsls	r3, r1
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	429a      	cmp	r2, r3
 8003270:	d860      	bhi.n	8003334 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003272:	f7fe fb5b 	bl	800192c <HAL_GetREVID>
 8003276:	4603      	mov	r3, r0
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d851      	bhi.n	8003322 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 800327e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003282:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x9c4>
 800328a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800328e:	0e9b      	lsrs	r3, r3, #26
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2b13      	cmp	r3, #19
 8003296:	bf8c      	ite	hi
 8003298:	2301      	movhi	r3, #1
 800329a:	2300      	movls	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e016      	b.n	80032ce <HAL_ADC_ConfigChannel+0x9f2>
 80032a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	61bb      	str	r3, [r7, #24]
  return result;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e003      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b13      	cmp	r3, #19
 80032c6:	bf8c      	ite	hi
 80032c8:	2301      	movhi	r3, #1
 80032ca:	2300      	movls	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d027      	beq.n	8003322 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80032d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0xa16>
 80032de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	3b09      	subs	r3, #9
 80032ea:	2201      	movs	r2, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	e015      	b.n	800331e <HAL_ADC_ConfigChannel+0xa42>
 80032f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	60fb      	str	r3, [r7, #12]
  return result;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e003      	b.n	8003316 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3b09      	subs	r3, #9
 8003318:	2201      	movs	r2, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800332e:	4619      	mov	r1, r3
 8003330:	f7fe fc3c 	bl	8001bac <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	461a      	mov	r2, r3
 800333e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003342:	f7fe fcdf 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f280 8190 	bge.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a97      	ldr	r2, [pc, #604]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0xa82>
 800335a:	4b97      	ldr	r3, [pc, #604]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 800335c:	e000      	b.n	8003360 <HAL_ADC_ConfigChannel+0xa84>
 800335e:	4b97      	ldr	r3, [pc, #604]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fb17 	bl	8001994 <LL_ADC_GetCommonPathInternalCh>
 8003366:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a94      	ldr	r2, [pc, #592]	; (80035c0 <HAL_ADC_ConfigChannel+0xce4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d126      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d120      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a8b      	ldr	r2, [pc, #556]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0xab2>
 800338a:	4a8b      	ldr	r2, [pc, #556]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 800338c:	e000      	b.n	8003390 <HAL_ADC_ConfigChannel+0xab4>
 800338e:	4a8b      	ldr	r2, [pc, #556]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7fe fae7 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033a0:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_ADC_ConfigChannel+0xce8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	4a88      	ldr	r2, [pc, #544]	; (80035c8 <HAL_ADC_ConfigChannel+0xcec>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80033b2:	e002      	b.n	80033ba <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f9      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80033c0:	e067      	b.n	8003492 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a81      	ldr	r2, [pc, #516]	; (80035cc <HAL_ADC_ConfigChannel+0xcf0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d116      	bne.n	80033fa <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d110      	bne.n	80033fa <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a75      	ldr	r2, [pc, #468]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0xb0a>
 80033e2:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 80033e4:	e000      	b.n	80033e8 <HAL_ADC_ConfigChannel+0xb0c>
 80033e6:	4a75      	ldr	r2, [pc, #468]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 80033e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7fe fabb 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 80033f8:	e04b      	b.n	8003492 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a74      	ldr	r2, [pc, #464]	; (80035d0 <HAL_ADC_ConfigChannel+0xcf4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d116      	bne.n	8003432 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a67      	ldr	r2, [pc, #412]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0xb42>
 800341a:	4a67      	ldr	r2, [pc, #412]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 800341c:	e000      	b.n	8003420 <HAL_ADC_ConfigChannel+0xb44>
 800341e:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 8003420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f7fe fa9f 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 8003430:	e02f      	b.n	8003492 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a67      	ldr	r2, [pc, #412]	; (80035d4 <HAL_ADC_ConfigChannel+0xcf8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d12a      	bne.n	8003492 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800343c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d124      	bne.n	8003492 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a62      	ldr	r2, [pc, #392]	; (80035d8 <HAL_ADC_ConfigChannel+0xcfc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d11f      	bne.n	8003492 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_ADC_ConfigChannel+0xb84>
 800345c:	4a56      	ldr	r2, [pc, #344]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 800345e:	e000      	b.n	8003462 <HAL_ADC_ConfigChannel+0xb86>
 8003460:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003466:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7fe fa7e 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003472:	f7fe fa5b 	bl	800192c <HAL_GetREVID>
 8003476:	4603      	mov	r3, r0
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d809      	bhi.n	8003492 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003492:	f7fe fa4b 	bl	800192c <HAL_GetREVID>
 8003496:	4603      	mov	r3, r0
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	f040 80e8 	bne.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a4d      	ldr	r2, [pc, #308]	; (80035dc <HAL_ADC_ConfigChannel+0xd00>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f040 80e2 	bne.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 80db 	bne.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80034ce:	e0cf      	b.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d8:	d004      	beq.n	80034e4 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80034de:	4a40      	ldr	r2, [pc, #256]	; (80035e0 <HAL_ADC_ConfigChannel+0xd04>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d106      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fbf0 	bl	8001cd2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f280 80ba 	bge.w	8003670 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0xc2e>
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 8003508:	e000      	b.n	800350c <HAL_ADC_ConfigChannel+0xc30>
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fa41 	bl	8001994 <LL_ADC_GetCommonPathInternalCh>
 8003512:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a32      	ldr	r2, [pc, #200]	; (80035e4 <HAL_ADC_ConfigChannel+0xd08>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d110      	bne.n	8003542 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_ADC_ConfigChannel+0xc52>
 800352a:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 800352c:	e000      	b.n	8003530 <HAL_ADC_ConfigChannel+0xc54>
 800352e:	4a23      	ldr	r2, [pc, #140]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003534:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f7fe fa17 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 8003540:	e06d      	b.n	800361e <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <HAL_ADC_ConfigChannel+0xd0c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d110      	bne.n	800356e <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0xc7e>
 8003556:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 8003558:	e000      	b.n	800355c <HAL_ADC_ConfigChannel+0xc80>
 800355a:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7fe fa01 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 800356c:	e057      	b.n	800361e <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <HAL_ADC_ConfigChannel+0xcf4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d110      	bne.n	800359a <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0xcaa>
 8003582:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 8003584:	e000      	b.n	8003588 <HAL_ADC_ConfigChannel+0xcac>
 8003586:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_ADC_ConfigChannel+0xce0>)
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7fe f9eb 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 8003598:	e041      	b.n	800361e <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_ADC_ConfigChannel+0xcf8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d13c      	bne.n	800361e <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a02      	ldr	r2, [pc, #8]	; (80035b4 <HAL_ADC_ConfigChannel+0xcd8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d11e      	bne.n	80035ec <HAL_ADC_ConfigChannel+0xd10>
 80035ae:	4a02      	ldr	r2, [pc, #8]	; (80035b8 <HAL_ADC_ConfigChannel+0xcdc>)
 80035b0:	e01d      	b.n	80035ee <HAL_ADC_ConfigChannel+0xd12>
 80035b2:	bf00      	nop
 80035b4:	42028000 	.word	0x42028000
 80035b8:	42028308 	.word	0x42028308
 80035bc:	46021308 	.word	0x46021308
 80035c0:	b6002000 	.word	0xb6002000
 80035c4:	20000000 	.word	0x20000000
 80035c8:	053e2d63 	.word	0x053e2d63
 80035cc:	ba004000 	.word	0xba004000
 80035d0:	80000001 	.word	0x80000001
 80035d4:	b2001000 	.word	0xb2001000
 80035d8:	46021000 	.word	0x46021000
 80035dc:	d7200000 	.word	0xd7200000
 80035e0:	80000010 	.word	0x80000010
 80035e4:	ce080000 	.word	0xce080000
 80035e8:	ca040000 	.word	0xca040000
 80035ec:	4a25      	ldr	r2, [pc, #148]	; (8003684 <HAL_ADC_ConfigChannel+0xda8>)
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7fe f9b8 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80035fe:	f7fe f995 	bl	800192c <HAL_GetREVID>
 8003602:	4603      	mov	r3, r0
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d809      	bhi.n	800361e <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800361e:	f7fe f985 	bl	800192c <HAL_GetREVID>
 8003622:	4603      	mov	r3, r0
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003628:	d122      	bne.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_ADC_ConfigChannel+0xdac>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d11d      	bne.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d117      	bne.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003654:	e00c      	b.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8003668:	e002      	b.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800366e:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003678:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 800367c:	4618      	mov	r0, r3
 800367e:	37f0      	adds	r7, #240	; 0xf0
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	46021308 	.word	0x46021308
 8003688:	d7200000 	.word	0xd7200000

0800368c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fc7a 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 80036a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fc9b 	bl	8001fea <LL_ADC_INJ_IsConversionOngoing>
 80036b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <ADC_ConversionStop+0x38>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8099 	beq.w	80037f6 <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02b      	beq.n	800372a <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d126      	bne.n	800372a <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7f1b      	ldrb	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d122      	bne.n	800372a <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80036e4:	2301      	movs	r3, #1
 80036e6:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036e8:	e014      	b.n	8003714 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4a44      	ldr	r2, [pc, #272]	; (8003800 <ADC_ConversionStop+0x174>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d90d      	bls.n	800370e <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e074      	b.n	80037f8 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d1e3      	bne.n	80036ea <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d014      	beq.n	800375a <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fc31 	bl	8001f9c <LL_ADC_REG_IsConversionOngoing>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00c      	beq.n	800375a <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fbee 	bl	8001f26 <LL_ADC_IsDisableOngoing>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fc0d 	bl	8001f74 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d014      	beq.n	800378a <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fc40 	bl	8001fea <LL_ADC_INJ_IsConversionOngoing>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe fbd6 	bl	8001f26 <LL_ADC_IsDisableOngoing>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d104      	bne.n	800378a <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fc1c 	bl	8001fc2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d005      	beq.n	800379c <ADC_ConversionStop+0x110>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d105      	bne.n	80037a2 <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003796:	230c      	movs	r3, #12
 8003798:	617b      	str	r3, [r7, #20]
        break;
 800379a:	e005      	b.n	80037a8 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 800379c:	2308      	movs	r3, #8
 800379e:	617b      	str	r3, [r7, #20]
        break;
 80037a0:	e002      	b.n	80037a8 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 80037a2:	2304      	movs	r3, #4
 80037a4:	617b      	str	r3, [r7, #20]
        break;
 80037a6:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80037a8:	f7fe f890 	bl	80018cc <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80037ae:	e01b      	b.n	80037e8 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037b0:	f7fe f88c 	bl	80018cc <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d914      	bls.n	80037e8 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d0:	f043 0210 	orr.w	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1dc      	bne.n	80037b0 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	000cdbff 	.word	0x000cdbff

08003804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fb75 	bl	8001f00 <LL_ADC_IsEnabled>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d15a      	bne.n	80038d2 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <ADC_Enable+0xd8>)
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e046      	b.n	80038d4 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fb2c 	bl	8001eb0 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <ADC_Enable+0x66>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <ADC_Enable+0xdc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d033      	beq.n	80038d2 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800386a:	f7fe f82f 	bl	80018cc <HAL_GetTick>
 800386e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003870:	e028      	b.n	80038c4 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fb42 	bl	8001f00 <LL_ADC_IsEnabled>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fb12 	bl	8001eb0 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800388c:	f7fe f81e 	bl	80018cc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d914      	bls.n	80038c4 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d00d      	beq.n	80038c4 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ac:	f043 0210 	orr.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d1cf      	bne.n	8003872 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	8000003f 	.word	0x8000003f
 80038e0:	46021000 	.word	0x46021000

080038e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fb18 	bl	8001f26 <LL_ADC_IsDisableOngoing>
 80038f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe faff 	bl	8001f00 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d047      	beq.n	8003998 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d144      	bne.n	8003998 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030d 	and.w	r3, r3, #13
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10c      	bne.n	8003936 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fad9 	bl	8001ed8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2203      	movs	r2, #3
 800392c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800392e:	f7fd ffcd 	bl	80018cc <HAL_GetTick>
 8003932:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003934:	e029      	b.n	800398a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	679a      	str	r2, [r3, #120]	; 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	67da      	str	r2, [r3, #124]	; 0x7c
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e023      	b.n	800399a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003952:	f7fd ffbb 	bl	80018cc <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d914      	bls.n	800398a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003972:	f043 0210 	orr.w	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800397e:	f043 0201 	orr.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1dc      	bne.n	8003952 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <LL_ADC_StartCalibration>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <LL_ADC_StartCalibration+0x4c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00c      	beq.n	80039d0 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <LL_ADC_StartCalibration+0x50>)
 80039bc:	4013      	ands	r3, r2
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	e009      	b.n	80039e4 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	46021000 	.word	0x46021000
 80039f4:	7ffeffc0 	.word	0x7ffeffc0

080039f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a0c:	d101      	bne.n	8003a12 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADCEx_Calibration_Start+0x1e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e133      	b.n	8003ca6 <HAL_ADCEx_Calibration_Start+0x286>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff ff4c 	bl	80038e4 <ADC_Disable>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8119 	bne.w	8003c8e <HAL_ADCEx_Calibration_Start+0x26e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a64:	f023 0302 	bic.w	r3, r3, #2
 8003a68:	f043 0202 	orr.w	r2, r3, #2
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	679a      	str	r2, [r3, #120]	; 0x78

    if (hadc->Instance == ADC4)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a8e      	ldr	r2, [pc, #568]	; (8003cb0 <HAL_ADCEx_Calibration_Start+0x290>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d150      	bne.n	8003b1c <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0203 	bic.w	r2, r2, #3
 8003aa0:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff73 	bl	80039a4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003abe:	e014      	b.n	8003aea <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4a7a      	ldr	r2, [pc, #488]	; (8003cb4 <HAL_ADCEx_Calibration_Start+0x294>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d90d      	bls.n	8003aea <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad2:	f023 0312 	bic.w	r3, r3, #18
 8003ad6:	f043 0210 	orr.w	r2, r3, #16
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	679a      	str	r2, [r3, #120]	; 0x78

          __HAL_UNLOCK(hadc);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0dd      	b.n	8003ca6 <HAL_ADCEx_Calibration_Start+0x286>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff82 	bl	80039f8 <LL_ADC_IsCalibrationOnGoing>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e2      	bne.n	8003ac0 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68d9      	ldr	r1, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
 8003b1a:	e0af      	b.n	8003c7c <HAL_ADCEx_Calibration_Start+0x25c>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003b1c:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <HAL_ADCEx_Calibration_Start+0x298>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003b26:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <HAL_ADCEx_Calibration_Start+0x298>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	f240 4255 	movw	r2, #1109	; 0x455
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d012      	beq.n	8003b60 <HAL_ADCEx_Calibration_Start+0x140>
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f240 4276 	movw	r2, #1142	; 0x476
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00d      	beq.n	8003b60 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f240 4281 	movw	r2, #1153	; 0x481
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_ADCEx_Calibration_Start+0x138>
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f240 4282 	movw	r2, #1154	; 0x482
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d16d      	bne.n	8003c34 <HAL_ADCEx_Calibration_Start+0x214>
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b5e:	d369      	bcc.n	8003c34 <HAL_ADCEx_Calibration_Start+0x214>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fe4f 	bl	8003804 <ADC_Enable>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (tmp_hal_status == HAL_OK)
 8003b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 8083 	bne.w	8003c7c <HAL_ADCEx_Calibration_Start+0x25c>
        {
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
 8003b88:	609a      	str	r2, [r3, #8]
          MODIFY_REG(hadc->Instance->CALFACT2, 0x00FF0000UL, 0x00020000UL);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003b92:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003bb2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff fe94 	bl	80038e4 <ADC_Disable>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003bc8:	d109      	bne.n	8003bde <HAL_ADCEx_Calibration_Start+0x1be>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <HAL_ADCEx_Calibration_Start+0x29c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf4:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bf6:	e014      	b.n	8003c22 <HAL_ADCEx_Calibration_Start+0x202>
          {
            wait_loop_index++;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <HAL_ADCEx_Calibration_Start+0x294>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d90d      	bls.n	8003c22 <HAL_ADCEx_Calibration_Start+0x202>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	f023 0312 	bic.w	r3, r3, #18
 8003c0e:	f043 0210 	orr.w	r2, r3, #16
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	679a      	str	r2, [r3, #120]	; 0x78

              __HAL_UNLOCK(hadc);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

              return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e041      	b.n	8003ca6 <HAL_ADCEx_Calibration_Start+0x286>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fee6 	bl	80039f8 <LL_ADC_IsCalibrationOnGoing>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e2      	bne.n	8003bf8 <HAL_ADCEx_Calibration_Start+0x1d8>
        if (tmp_hal_status == HAL_OK)
 8003c32:	e023      	b.n	8003c7c <HAL_ADCEx_Calibration_Start+0x25c>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff feb2 	bl	80039a4 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c40:	e014      	b.n	8003c6c <HAL_ADCEx_Calibration_Start+0x24c>
        {
          wait_loop_index++;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	3301      	adds	r3, #1
 8003c46:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <HAL_ADCEx_Calibration_Start+0x294>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d90d      	bls.n	8003c6c <HAL_ADCEx_Calibration_Start+0x24c>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c54:	f023 0312 	bic.w	r3, r3, #18
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	679a      	str	r2, [r3, #120]	; 0x78

            __HAL_UNLOCK(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

            return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e01c      	b.n	8003ca6 <HAL_ADCEx_Calibration_Start+0x286>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fec1 	bl	80039f8 <LL_ADC_IsCalibrationOnGoing>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e2      	bne.n	8003c42 <HAL_ADCEx_Calibration_Start+0x222>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c80:	f023 0303 	bic.w	r3, r3, #3
 8003c84:	f043 0201 	orr.w	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	679a      	str	r2, [r3, #120]	; 0x78
 8003c8c:	e005      	b.n	8003c9a <HAL_ADCEx_Calibration_Start+0x27a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c92:	f043 0210 	orr.w	r2, r3, #16
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3728      	adds	r7, #40	; 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	46021000 	.word	0x46021000
 8003cb4:	01ba813f 	.word	0x01ba813f
 8003cb8:	e0044000 	.word	0xe0044000
 8003cbc:	7ffeffc0 	.word	0x7ffeffc0

08003cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	60d3      	str	r3, [r2, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <__NVIC_GetPriorityGrouping+0x18>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 0307 	and.w	r3, r3, #7
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	db0b      	blt.n	8003d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	f003 021f 	and.w	r2, r3, #31
 8003d3c:	4907      	ldr	r1, [pc, #28]	; (8003d5c <__NVIC_EnableIRQ+0x38>)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2001      	movs	r0, #1
 8003d46:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000e100 	.word	0xe000e100

08003d60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	db12      	blt.n	8003d98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	f003 021f 	and.w	r2, r3, #31
 8003d78:	490a      	ldr	r1, [pc, #40]	; (8003da4 <__NVIC_DisableIRQ+0x44>)
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2001      	movs	r0, #1
 8003d82:	fa00 f202 	lsl.w	r2, r0, r2
 8003d86:	3320      	adds	r3, #32
 8003d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d8c:	f3bf 8f4f 	dsb	sy
}
 8003d90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d92:	f3bf 8f6f 	isb	sy
}
 8003d96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000e100 	.word	0xe000e100

08003da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	db0a      	blt.n	8003dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	490c      	ldr	r1, [pc, #48]	; (8003df4 <__NVIC_SetPriority+0x4c>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	0112      	lsls	r2, r2, #4
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd0:	e00a      	b.n	8003de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4908      	ldr	r1, [pc, #32]	; (8003df8 <__NVIC_SetPriority+0x50>)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	3b04      	subs	r3, #4
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	440b      	add	r3, r1
 8003de6:	761a      	strb	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000e100 	.word	0xe000e100
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f1c3 0307 	rsb	r3, r3, #7
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	bf28      	it	cs
 8003e1a:	2304      	movcs	r3, #4
 8003e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d902      	bls.n	8003e2c <NVIC_EncodePriority+0x30>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3b03      	subs	r3, #3
 8003e2a:	e000      	b.n	8003e2e <NVIC_EncodePriority+0x32>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	401a      	ands	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e44:	f04f 31ff 	mov.w	r1, #4294967295
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	4313      	orrs	r3, r2
         );
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff ff28 	bl	8003cc0 <__NVIC_SetPriorityGrouping>
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e86:	f7ff ff3f 	bl	8003d08 <__NVIC_GetPriorityGrouping>
 8003e8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f7ff ffb3 	bl	8003dfc <NVIC_EncodePriority>
 8003e96:	4602      	mov	r2, r0
 8003e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff ff82 	bl	8003da8 <__NVIC_SetPriority>
}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff32 	bl	8003d24 <__NVIC_EnableIRQ>
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff42 	bl	8003d60 <__NVIC_DisableIRQ>
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b089      	sub	sp, #36	; 0x24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003ef6:	e1ba      	b.n	800426e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	4013      	ands	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 81aa 	beq.w	8004268 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a55      	ldr	r2, [pc, #340]	; (800406c <HAL_GPIO_Init+0x188>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d15d      	bne.n	8003fd8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003f22:	2201      	movs	r2, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0201 	and.w	r2, r3, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003f4c:	4a48      	ldr	r2, [pc, #288]	; (8004070 <HAL_GPIO_Init+0x18c>)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f54:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003f56:	4a46      	ldr	r2, [pc, #280]	; (8004070 <HAL_GPIO_Init+0x18c>)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	08da      	lsrs	r2, r3, #3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3208      	adds	r2, #8
 8003f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	220f      	movs	r2, #15
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	220b      	movs	r2, #11
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	69f9      	ldr	r1, [r7, #28]
 8003fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e067      	b.n	80040a8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x104>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b12      	cmp	r3, #18
 8003fe6:	d145      	bne.n	8004074 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	08da      	lsrs	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3208      	adds	r2, #8
 8003ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	4013      	ands	r3, r2
 800400a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 020f 	and.w	r2, r3, #15
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	4313      	orrs	r3, r2
 8004024:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	08da      	lsrs	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	69f9      	ldr	r1, [r7, #28]
 8004030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2203      	movs	r2, #3
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	4013      	ands	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0203 	and.w	r2, r3, #3
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	4313      	orrs	r3, r2
 8004060:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e01e      	b.n	80040a8 <HAL_GPIO_Init+0x1c4>
 800406a:	bf00      	nop
 800406c:	46020000 	.word	0x46020000
 8004070:	08015440 	.word	0x08015440
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	4013      	ands	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d00b      	beq.n	80040c8 <HAL_GPIO_Init+0x1e4>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d007      	beq.n	80040c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040bc:	2b11      	cmp	r3, #17
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b12      	cmp	r3, #18
 80040c6:	d130      	bne.n	800412a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	4013      	ands	r3, r2
 80040de:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80040fe:	2201      	movs	r2, #1
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	4013      	ands	r3, r2
 800410c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0201 	and.w	r2, r3, #1
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	4313      	orrs	r3, r2
 8004122:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d017      	beq.n	8004162 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	2203      	movs	r2, #3
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	4013      	ands	r3, r2
 8004148:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	4313      	orrs	r3, r2
 800415a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d07c      	beq.n	8004268 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800416e:	4a47      	ldr	r2, [pc, #284]	; (800428c <HAL_GPIO_Init+0x3a8>)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3318      	adds	r3, #24
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	4013      	ands	r3, r2
 8004190:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0a9a      	lsrs	r2, r3, #10
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <HAL_GPIO_Init+0x3ac>)
 8004198:	4013      	ands	r3, r2
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	f002 0203 	and.w	r2, r2, #3
 80041a0:	00d2      	lsls	r2, r2, #3
 80041a2:	4093      	lsls	r3, r2
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80041aa:	4938      	ldr	r1, [pc, #224]	; (800428c <HAL_GPIO_Init+0x3a8>)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3318      	adds	r3, #24
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80041b8:	4b34      	ldr	r3, [pc, #208]	; (800428c <HAL_GPIO_Init+0x3a8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <HAL_GPIO_Init+0x3a8>)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <HAL_GPIO_Init+0x3a8>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_GPIO_Init+0x3a8>)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800420c:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_GPIO_Init+0x3a8>)
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004212:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	43db      	mvns	r3, r3
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	4013      	ands	r3, r2
 800421c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004232:	4a16      	ldr	r2, [pc, #88]	; (800428c <HAL_GPIO_Init+0x3a8>)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <HAL_GPIO_Init+0x3a8>)
 800423c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004240:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	4013      	ands	r3, r2
 800424a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_GPIO_Init+0x3a8>)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	3301      	adds	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	f47f ae3d 	bne.w	8003ef8 <HAL_GPIO_Init+0x14>
  }
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3724      	adds	r7, #36	; 0x24
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	46022000 	.word	0x46022000
 8004290:	002f7f7f 	.word	0x002f7f7f

08004294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	807b      	strh	r3, [r7, #2]
 80042a0:	4613      	mov	r3, r2
 80042a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042a4:	787b      	ldrb	r3, [r7, #1]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042aa:	887a      	ldrh	r2, [r7, #2]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80042b0:	e002      	b.n	80042b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f00b f97a 	bl	800f5dc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d006      	beq.n	8004302 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80042f4:	4a05      	ldr	r2, [pc, #20]	; (800430c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f807 	bl	8004310 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	46022000 	.word	0x46022000

08004310 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e007      	b.n	8004356 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 0204 	bic.w	r2, r3, #4
 800434e:	4905      	ldr	r1, [pc, #20]	; (8004364 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004356:	7bfb      	ldrb	r3, [r7, #15]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40030400 	.word	0x40030400

08004368 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_ICACHE_Enable+0x1c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <HAL_ICACHE_Enable+0x1c>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40030400 	.word	0x40030400

08004388 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0e7      	b.n	800456a <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fc ff89 	bl	80012cc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043da:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80043e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fad4 	bl	8004998 <LPTIM_WaitForFlag>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d101      	bne.n	80043fa <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0b7      	b.n	800456a <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6a12      	ldr	r2, [r2, #32]
 800440a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800440c:	2110      	movs	r1, #16
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fac2 	bl	8004998 <LPTIM_WaitForFlag>
 8004414:	4603      	mov	r3, r0
 8004416:	2b03      	cmp	r3, #3
 8004418:	d101      	bne.n	800441e <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0a5      	b.n	800456a <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10e      	bne.n	800444a <HAL_LPTIM_Init+0xc2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_LPTIM_Init+0xc2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d004      	beq.n	8004464 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004462:	d103      	bne.n	800446c <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 031e 	bic.w	r3, r3, #30
 800446a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004474:	4293      	cmp	r3, r2
 8004476:	d005      	beq.n	8004484 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800447e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004482:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_LPTIM_Init+0x1ec>)
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004494:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 800449a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80044a0:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80044b8:	4313      	orrs	r3, r2
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d004      	beq.n	80044d2 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d0:	d107      	bne.n	80044e2 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80044da:	4313      	orrs	r3, r2
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00a      	beq.n	8004504 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044f6:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80044fc:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_LPTIM_Init+0x1f0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_LPTIM_Init+0x198>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_LPTIM_Init+0x1f4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
 8004530:	e00e      	b.n	8004550 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <HAL_LPTIM_Init+0x1f8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_LPTIM_Init+0x1be>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a10      	ldr	r2, [pc, #64]	; (8004584 <HAL_LPTIM_Init+0x1fc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d104      	bne.n	8004550 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	ff39f1fe 	.word	0xff39f1fe
 8004578:	46004400 	.word	0x46004400
 800457c:	40009400 	.word	0x40009400
 8004580:	46004800 	.word	0x46004800
 8004584:	46004c00 	.word	0x46004c00

08004588 <HAL_LPTIM_Counter_Start>:
  * @brief  Start the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d00c      	beq.n	80045ba <HAL_LPTIM_Counter_Start+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045a8:	d107      	bne.n	80045ba <HAL_LPTIM_Counter_Start+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80045b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0204 	orr.w	r2, r2, #4
 80045d8:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d120      	bne.n	8004648 <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d119      	bne.n	8004648 <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f99c 	bl	8004970 <HAL_LPTIM_IC_CaptureCallback>
 8004638:	e002      	b.n	8004640 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f93e 	bl	80048bc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004656:	d122      	bne.n	800469e <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d11a      	bne.n	800469e <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004670:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f971 	bl	8004970 <HAL_LPTIM_IC_CaptureCallback>
 800468e:	e002      	b.n	8004696 <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f913 	bl	80048bc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ac:	d117      	bne.n	80046de <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046bc:	d10f      	bne.n	80046de <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046c6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f957 	bl	8004984 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ec:	d117      	bne.n	800471e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fc:	d10f      	bne.n	800471e <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004706:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f937 	bl	8004984 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b02      	cmp	r3, #2
 800472a:	d10d      	bne.n	8004748 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b02      	cmp	r3, #2
 8004738:	d106      	bne.n	8004748 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2202      	movs	r2, #2
 8004740:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8c4 	bl	80048d0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b04      	cmp	r3, #4
 8004754:	d10d      	bne.n	8004772 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b04      	cmp	r3, #4
 8004762:	d106      	bne.n	8004772 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2204      	movs	r2, #4
 800476a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8b9 	bl	80048e4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b08      	cmp	r3, #8
 800477e:	d111      	bne.n	80047a4 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b08      	cmp	r3, #8
 800478c:	d10a      	bne.n	80047a4 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2208      	movs	r2, #8
 8004794:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8aa 	bl	80048f8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047b2:	d113      	bne.n	80047dc <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047c2:	d10b      	bne.n	80047dc <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80047cc:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f88e 	bl	80048f8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d10d      	bne.n	8004806 <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d106      	bne.n	8004806 <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f883 	bl	800490c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b20      	cmp	r3, #32
 8004812:	d10d      	bne.n	8004830 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b20      	cmp	r3, #32
 8004820:	d106      	bne.n	8004830 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2220      	movs	r2, #32
 8004828:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f878 	bl	8004920 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d10d      	bne.n	800485a <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d106      	bne.n	800485a <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f86d 	bl	8004934 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d10d      	bne.n	8004884 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b80      	cmp	r3, #128	; 0x80
 8004874:	d106      	bne.n	8004884 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f862 	bl	8004948 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004892:	d10f      	bne.n	80048b4 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a2:	d107      	bne.n	80048b4 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ac:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f854 	bl	800495c <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <LPTIM_WaitForFlag+0x58>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <LPTIM_WaitForFlag+0x5c>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	0b9b      	lsrs	r3, r3, #14
 80049b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3b01      	subs	r3, #1
 80049c0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	4013      	ands	r3, r2
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d002      	beq.n	80049e2 <LPTIM_WaitForFlag+0x4a>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ec      	bne.n	80049bc <LPTIM_WaitForFlag+0x24>

  return result;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	20000000 	.word	0x20000000
 80049f4:	d1b71759 	.word	0xd1b71759

080049f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	46020800 	.word	0x46020800

08004a18 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004a20:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a28:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d10b      	bne.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d905      	bls.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a3a:	4b33      	ldr	r3, [pc, #204]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4a32      	ldr	r2, [pc, #200]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a44:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e057      	b.n	8004afa <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d90a      	bls.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004a52:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	4a2a      	ldr	r2, [pc, #168]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a64:	60d3      	str	r3, [r2, #12]
 8004a66:	e007      	b.n	8004a78 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a70:	4925      	ldr	r1, [pc, #148]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a78:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	2232      	movs	r2, #50	; 0x32
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a96:	e002      	b.n	8004a9e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f3      	bne.n	8004a98 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01b      	beq.n	8004aee <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	2232      	movs	r2, #50	; 0x32
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	099b      	lsrs	r3, r3, #6
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004ad4:	e002      	b.n	8004adc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f3      	bne.n	8004ad6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e000      	b.n	8004afa <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	46020800 	.word	0x46020800
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	10624dd3 	.word	0x10624dd3

08004b14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_PWREx_GetVoltageRange+0x18>)
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	46020800 	.word	0x46020800

08004b30 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b38:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <HAL_PWREx_ConfigSupply+0x94>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_PWREx_ConfigSupply+0x98>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	2232      	movs	r2, #50	; 0x32
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HAL_PWREx_ConfigSupply+0x98>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d113      	bne.n	8004b84 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_PWREx_ConfigSupply+0x9c>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <HAL_PWREx_ConfigSupply+0x9c>)
 8004b62:	f023 0302 	bic.w	r3, r3, #2
 8004b66:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b68:	e002      	b.n	8004b70 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_PWREx_ConfigSupply+0x9c>)
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d116      	bne.n	8004baa <HAL_PWREx_ConfigSupply+0x7a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f3      	bne.n	8004b6a <HAL_PWREx_ConfigSupply+0x3a>
 8004b82:	e012      	b.n	8004baa <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <HAL_PWREx_ConfigSupply+0x9c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <HAL_PWREx_ConfigSupply+0x9c>)
 8004b8a:	f043 0302 	orr.w	r3, r3, #2
 8004b8e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b90:	e002      	b.n	8004b98 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_PWREx_ConfigSupply+0x9c>)
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_PWREx_ConfigSupply+0x7a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f3      	bne.n	8004b92 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e000      	b.n	8004bb6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	10624dd3 	.word	0x10624dd3
 8004bcc:	46020800 	.word	0x46020800

08004bd0 <HAL_PWREx_EnterSTOP1Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_0);
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 0307 	bic.w	r3, r3, #7
 8004be2:	4a0f      	ldr	r2, [pc, #60]	; (8004c20 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	4a0d      	ldr	r2, [pc, #52]	; (8004c24 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004bf0:	f043 0304 	orr.w	r3, r3, #4
 8004bf4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004bfc:	bf30      	wfi
 8004bfe:	e002      	b.n	8004c06 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004c00:	bf40      	sev
    __WFE();
 8004c02:	bf20      	wfe
    __WFE();
 8004c04:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c06:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	4a06      	ldr	r2, [pc, #24]	; (8004c24 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	6113      	str	r3, [r2, #16]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	46020800 	.word	0x46020800
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c36:	6113      	str	r3, [r2, #16]
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	46020800 	.word	0x46020800

08004c48 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_PWREx_EnableVddA+0x1c>)
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <HAL_PWREx_EnableVddA+0x1c>)
 8004c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c56:	6113      	str	r3, [r2, #16]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	46020800 	.word	0x46020800

08004c68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	46020800 	.word	0x46020800

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08e      	sub	sp, #56	; 0x38
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f000 bec8 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca2:	4b99      	ldr	r3, [pc, #612]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cac:	4b96      	ldr	r3, [pc, #600]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 816c 	beq.w	8004f9c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_RCC_OscConfig+0x52>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	f040 80de 	bne.w	8004e8e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	f040 80da 	bne.w	8004e8e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f000 bea5 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cec:	4b86      	ldr	r3, [pc, #536]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <HAL_RCC_OscConfig+0x7a>
 8004cf8:	4b83      	ldr	r3, [pc, #524]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d00:	e005      	b.n	8004d0e <HAL_RCC_OscConfig+0x86>
 8004d02:	4b81      	ldr	r3, [pc, #516]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d255      	bcs.n	8004dbe <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 fa17 	bl	8006150 <RCC_SetFlashLatencyFromMSIRange>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f000 be82 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d2e:	4b76      	ldr	r3, [pc, #472]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d38:	6093      	str	r3, [r2, #8]
 8004d3a:	4b73      	ldr	r3, [pc, #460]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	4970      	ldr	r1, [pc, #448]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004d54:	d309      	bcc.n	8004d6a <HAL_RCC_OscConfig+0xe2>
 8004d56:	4b6c      	ldr	r3, [pc, #432]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 021f 	bic.w	r2, r3, #31
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4969      	ldr	r1, [pc, #420]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60cb      	str	r3, [r1, #12]
 8004d68:	e07e      	b.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da0a      	bge.n	8004d88 <HAL_RCC_OscConfig+0x100>
 8004d72:	4b65      	ldr	r3, [pc, #404]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	015b      	lsls	r3, r3, #5
 8004d80:	4961      	ldr	r1, [pc, #388]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60cb      	str	r3, [r1, #12]
 8004d86:	e06f      	b.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d30a      	bcc.n	8004da8 <HAL_RCC_OscConfig+0x120>
 8004d92:	4b5d      	ldr	r3, [pc, #372]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	4959      	ldr	r1, [pc, #356]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60cb      	str	r3, [r1, #12]
 8004da6:	e05f      	b.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
 8004da8:	4b57      	ldr	r3, [pc, #348]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	03db      	lsls	r3, r3, #15
 8004db6:	4954      	ldr	r1, [pc, #336]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60cb      	str	r3, [r1, #12]
 8004dbc:	e054      	b.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004dbe:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4a51      	ldr	r2, [pc, #324]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	494c      	ldr	r1, [pc, #304]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004de4:	d309      	bcc.n	8004dfa <HAL_RCC_OscConfig+0x172>
 8004de6:	4b48      	ldr	r3, [pc, #288]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 021f 	bic.w	r2, r3, #31
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4945      	ldr	r1, [pc, #276]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60cb      	str	r3, [r1, #12]
 8004df8:	e028      	b.n	8004e4c <HAL_RCC_OscConfig+0x1c4>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da0a      	bge.n	8004e18 <HAL_RCC_OscConfig+0x190>
 8004e02:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	015b      	lsls	r3, r3, #5
 8004e10:	493d      	ldr	r1, [pc, #244]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60cb      	str	r3, [r1, #12]
 8004e16:	e019      	b.n	8004e4c <HAL_RCC_OscConfig+0x1c4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d30a      	bcc.n	8004e38 <HAL_RCC_OscConfig+0x1b0>
 8004e22:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	4935      	ldr	r1, [pc, #212]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60cb      	str	r3, [r1, #12]
 8004e36:	e009      	b.n	8004e4c <HAL_RCC_OscConfig+0x1c4>
 8004e38:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	03db      	lsls	r3, r3, #15
 8004e46:	4930      	ldr	r1, [pc, #192]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f97a 	bl	8006150 <RCC_SetFlashLatencyFromMSIRange>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f000 bde5 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004e68:	f001 f8e4 	bl	8006034 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <HAL_RCC_OscConfig+0x284>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fc fb8d 	bl	8001590 <HAL_InitTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 808a 	beq.w	8004f9a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8a:	f000 bdd2 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d066      	beq.n	8004f64 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004e96:	4b1c      	ldr	r3, [pc, #112]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ea2:	f7fc fd13 	bl	80018cc <HAL_GetTick>
 8004ea6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ea8:	e009      	b.n	8004ebe <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eaa:	f7fc fd0f 	bl	80018cc <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	f000 bdba 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ef      	beq.n	8004eaa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed4:	6093      	str	r3, [r2, #8]
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	4909      	ldr	r1, [pc, #36]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ef0:	d30e      	bcc.n	8004f10 <HAL_RCC_OscConfig+0x288>
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f023 021f 	bic.w	r2, r3, #31
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	4902      	ldr	r1, [pc, #8]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60cb      	str	r3, [r1, #12]
 8004f04:	e04a      	b.n	8004f9c <HAL_RCC_OscConfig+0x314>
 8004f06:	bf00      	nop
 8004f08:	46020c00 	.word	0x46020c00
 8004f0c:	20000004 	.word	0x20000004
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	da0a      	bge.n	8004f2e <HAL_RCC_OscConfig+0x2a6>
 8004f18:	4b98      	ldr	r3, [pc, #608]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	015b      	lsls	r3, r3, #5
 8004f26:	4995      	ldr	r1, [pc, #596]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60cb      	str	r3, [r1, #12]
 8004f2c:	e036      	b.n	8004f9c <HAL_RCC_OscConfig+0x314>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d30a      	bcc.n	8004f4e <HAL_RCC_OscConfig+0x2c6>
 8004f38:	4b90      	ldr	r3, [pc, #576]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	498d      	ldr	r1, [pc, #564]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
 8004f4c:	e026      	b.n	8004f9c <HAL_RCC_OscConfig+0x314>
 8004f4e:	4b8b      	ldr	r3, [pc, #556]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	03db      	lsls	r3, r3, #15
 8004f5c:	4987      	ldr	r1, [pc, #540]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
 8004f62:	e01b      	b.n	8004f9c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004f64:	4b85      	ldr	r3, [pc, #532]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a84      	ldr	r2, [pc, #528]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f70:	f7fc fcac 	bl	80018cc <HAL_GetTick>
 8004f74:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f76:	e009      	b.n	8004f8c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f78:	f7fc fca8 	bl	80018cc <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d902      	bls.n	8004f8c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	f000 bd53 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f8c:	4b7b      	ldr	r3, [pc, #492]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ef      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
 8004f98:	e000      	b.n	8004f9c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 808b 	beq.w	80050c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_OscConfig+0x334>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d109      	bne.n	8004fca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d17d      	bne.n	80050c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f000 bd34 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x35a>
 8004fd4:	4b69      	ldr	r3, [pc, #420]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a68      	ldr	r2, [pc, #416]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e041      	b.n	8005066 <HAL_RCC_OscConfig+0x3de>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fea:	d112      	bne.n	8005012 <HAL_RCC_OscConfig+0x38a>
 8004fec:	4b63      	ldr	r3, [pc, #396]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a62      	ldr	r2, [pc, #392]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b60      	ldr	r3, [pc, #384]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5f      	ldr	r2, [pc, #380]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b5d      	ldr	r3, [pc, #372]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a5c      	ldr	r2, [pc, #368]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	e029      	b.n	8005066 <HAL_RCC_OscConfig+0x3de>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800501a:	d112      	bne.n	8005042 <HAL_RCC_OscConfig+0x3ba>
 800501c:	4b57      	ldr	r3, [pc, #348]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a56      	ldr	r2, [pc, #344]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4b54      	ldr	r3, [pc, #336]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a53      	ldr	r2, [pc, #332]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b51      	ldr	r3, [pc, #324]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a50      	ldr	r2, [pc, #320]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e011      	b.n	8005066 <HAL_RCC_OscConfig+0x3de>
 8005042:	4b4e      	ldr	r3, [pc, #312]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4d      	ldr	r2, [pc, #308]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b4b      	ldr	r3, [pc, #300]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4a      	ldr	r2, [pc, #296]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b48      	ldr	r3, [pc, #288]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a47      	ldr	r2, [pc, #284]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005060:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005064:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d014      	beq.n	8005098 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800506e:	f7fc fc2d 	bl	80018cc <HAL_GetTick>
 8005072:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005074:	e009      	b.n	800508a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005076:	f7fc fc29 	bl	80018cc <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	; 0x64
 8005082:	d902      	bls.n	800508a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	f000 bcd4 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508a:	4b3c      	ldr	r3, [pc, #240]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ef      	beq.n	8005076 <HAL_RCC_OscConfig+0x3ee>
 8005096:	e013      	b.n	80050c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005098:	f7fc fc18 	bl	80018cc <HAL_GetTick>
 800509c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509e:	e009      	b.n	80050b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fc fc14 	bl	80018cc <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d902      	bls.n	80050b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	f000 bcbf 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ef      	bne.n	80050a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05f      	beq.n	800518c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x456>
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d114      	bne.n	8005102 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d111      	bne.n	8005102 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f000 bca3 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80050ec:	4b23      	ldr	r3, [pc, #140]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	4920      	ldr	r1, [pc, #128]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005100:	e044      	b.n	800518c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d024      	beq.n	8005154 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005116:	f7fc fbd9 	bl	80018cc <HAL_GetTick>
 800511a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800511c:	e009      	b.n	8005132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511e:	f7fc fbd5 	bl	80018cc <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d902      	bls.n	8005132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	f000 bc80 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	490b      	ldr	r1, [pc, #44]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]
 8005152:	e01b      	b.n	800518c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a08      	ldr	r2, [pc, #32]	; (800517c <HAL_RCC_OscConfig+0x4f4>)
 800515a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800515e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005160:	f7fc fbb4 	bl	80018cc <HAL_GetTick>
 8005164:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005168:	f7fc fbb0 	bl	80018cc <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d904      	bls.n	8005180 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	f000 bc5b 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
 800517c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005180:	4baf      	ldr	r3, [pc, #700]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ed      	bne.n	8005168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80c8 	beq.w	800532a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a0:	4ba7      	ldr	r3, [pc, #668]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d111      	bne.n	80051d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	4ba4      	ldr	r3, [pc, #656]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80051b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b4:	4aa2      	ldr	r2, [pc, #648]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80051b6:	f043 0304 	orr.w	r3, r3, #4
 80051ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80051be:	4ba0      	ldr	r3, [pc, #640]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80051c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051d2:	4b9c      	ldr	r3, [pc, #624]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d119      	bne.n	8005212 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80051de:	4b99      	ldr	r3, [pc, #612]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	4a98      	ldr	r2, [pc, #608]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ea:	f7fc fb6f 	bl	80018cc <HAL_GetTick>
 80051ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051f0:	e009      	b.n	8005206 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f2:	f7fc fb6b 	bl	80018cc <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d902      	bls.n	8005206 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	f000 bc16 	b.w	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005206:	4b8f      	ldr	r3, [pc, #572]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0ef      	beq.n	80051f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d05f      	beq.n	80052da <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800521a:	4b89      	ldr	r3, [pc, #548]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800521c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005220:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522c:	429a      	cmp	r2, r3
 800522e:	d037      	beq.n	80052a0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d006      	beq.n	8005248 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e3f4      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01b      	beq.n	800528a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005252:	4b7b      	ldr	r3, [pc, #492]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005258:	4a79      	ldr	r2, [pc, #484]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800525a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800525e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005262:	f7fc fb33 	bl	80018cc <HAL_GetTick>
 8005266:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526a:	f7fc fb2f 	bl	80018cc <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b05      	cmp	r3, #5
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e3da      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800527c:	4b70      	ldr	r3, [pc, #448]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800527e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1ef      	bne.n	800526a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800528a:	4b6d      	ldr	r3, [pc, #436]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800528c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005290:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	4969      	ldr	r1, [pc, #420]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80052a0:	4b67      	ldr	r3, [pc, #412]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80052a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052a6:	4a66      	ldr	r2, [pc, #408]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80052a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80052b0:	f7fc fb0c 	bl	80018cc <HAL_GetTick>
 80052b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fc fb08 	bl	80018cc <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e3b3      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80052ca:	4b5d      	ldr	r3, [pc, #372]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80052cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ef      	beq.n	80052b8 <HAL_RCC_OscConfig+0x630>
 80052d8:	e01b      	b.n	8005312 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80052da:	4b59      	ldr	r3, [pc, #356]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80052dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052e0:	4a57      	ldr	r2, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80052e2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80052e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80052ea:	f7fc faef 	bl	80018cc <HAL_GetTick>
 80052ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f2:	f7fc faeb 	bl	80018cc <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e396      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005304:	4b4e      	ldr	r3, [pc, #312]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800530a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ef      	bne.n	80052f2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005312:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531a:	4b49      	ldr	r3, [pc, #292]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800531c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005320:	4a47      	ldr	r2, [pc, #284]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005322:	f023 0304 	bic.w	r3, r3, #4
 8005326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8111 	beq.w	800555a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005338:	2300      	movs	r3, #0
 800533a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533e:	4b40      	ldr	r3, [pc, #256]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d111      	bne.n	8005370 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534c:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	4a3b      	ldr	r2, [pc, #236]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800535c:	4b38      	ldr	r3, [pc, #224]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800535e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005370:	4b34      	ldr	r3, [pc, #208]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d118      	bne.n	80053ae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800537c:	4b31      	ldr	r3, [pc, #196]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	4a30      	ldr	r2, [pc, #192]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005388:	f7fc faa0 	bl	80018cc <HAL_GetTick>
 800538c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005390:	f7fc fa9c 	bl	80018cc <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e347      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053a2:	4b28      	ldr	r3, [pc, #160]	; (8005444 <HAL_RCC_OscConfig+0x7bc>)
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01f      	beq.n	80053fa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053c6:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80053c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053cc:	4a1c      	ldr	r2, [pc, #112]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80053d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053dc:	4a18      	ldr	r2, [pc, #96]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80053e6:	e018      	b.n	800541a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053e8:	4b15      	ldr	r3, [pc, #84]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80053ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80053f8:	e00f      	b.n	800541a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 80053fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005400:	4a0f      	ldr	r2, [pc, #60]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 800540c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <HAL_RCC_OscConfig+0x7b8>)
 8005412:	f023 0304 	bic.w	r3, r3, #4
 8005416:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d057      	beq.n	80054d2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005422:	f7fc fa53 	bl	80018cc <HAL_GetTick>
 8005426:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005428:	e00e      	b.n	8005448 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542a:	f7fc fa4f 	bl	80018cc <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f241 3288 	movw	r2, #5000	; 0x1388
 8005438:	4293      	cmp	r3, r2
 800543a:	d905      	bls.n	8005448 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e2f8      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
 8005440:	46020c00 	.word	0x46020c00
 8005444:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005448:	4b9c      	ldr	r3, [pc, #624]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800544a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0e9      	beq.n	800542a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01b      	beq.n	800549a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005462:	4b96      	ldr	r3, [pc, #600]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005468:	4a94      	ldr	r2, [pc, #592]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005472:	e00a      	b.n	800548a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fc fa2a 	bl	80018cc <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e2d3      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800548a:	4b8c      	ldr	r3, [pc, #560]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800548c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ed      	beq.n	8005474 <HAL_RCC_OscConfig+0x7ec>
 8005498:	e053      	b.n	8005542 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800549a:	4b88      	ldr	r3, [pc, #544]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800549c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054a0:	4a86      	ldr	r2, [pc, #536]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80054a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fc fa0e 	bl	80018cc <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e2b7      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054c2:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80054c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ed      	bne.n	80054ac <HAL_RCC_OscConfig+0x824>
 80054d0:	e037      	b.n	8005542 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80054d2:	f7fc f9fb 	bl	80018cc <HAL_GetTick>
 80054d6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d8:	e00a      	b.n	80054f0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054da:	f7fc f9f7 	bl	80018cc <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e2a0      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f0:	4b72      	ldr	r3, [pc, #456]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ed      	bne.n	80054da <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80054fe:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01a      	beq.n	8005542 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800550c:	4b6b      	ldr	r3, [pc, #428]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800550e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005512:	4a6a      	ldr	r2, [pc, #424]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005518:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800551c:	e00a      	b.n	8005534 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551e:	f7fc f9d5 	bl	80018cc <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f241 3288 	movw	r2, #5000	; 0x1388
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e27e      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005534:	4b61      	ldr	r3, [pc, #388]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800553a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ed      	bne.n	800551e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005542:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005546:	2b01      	cmp	r3, #1
 8005548:	d107      	bne.n	800555a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b5c      	ldr	r3, [pc, #368]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005550:	4a5a      	ldr	r2, [pc, #360]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005552:	f023 0304 	bic.w	r3, r3, #4
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d036      	beq.n	80055d4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800556e:	4b53      	ldr	r3, [pc, #332]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a52      	ldr	r2, [pc, #328]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005578:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800557a:	f7fc f9a7 	bl	80018cc <HAL_GetTick>
 800557e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005582:	f7fc f9a3 	bl	80018cc <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e24e      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005594:	4b49      	ldr	r3, [pc, #292]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x8fa>
 80055a0:	e018      	b.n	80055d4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80055a2:	4b46      	ldr	r3, [pc, #280]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a45      	ldr	r2, [pc, #276]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80055a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055ae:	f7fc f98d 	bl	80018cc <HAL_GetTick>
 80055b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055b6:	f7fc f989 	bl	80018cc <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e234      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055c8:	4b3c      	ldr	r3, [pc, #240]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f0      	bne.n	80055b6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d036      	beq.n	800564e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80055e8:	4b34      	ldr	r3, [pc, #208]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a33      	ldr	r2, [pc, #204]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80055ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055f4:	f7fc f96a 	bl	80018cc <HAL_GetTick>
 80055f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80055fc:	f7fc f966 	bl	80018cc <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e211      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800560e:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x974>
 800561a:	e018      	b.n	800564e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a26      	ldr	r2, [pc, #152]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005626:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005628:	f7fc f950 	bl	80018cc <HAL_GetTick>
 800562c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005630:	f7fc f94c 	bl	80018cc <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e1f7      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d07f      	beq.n	800575a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	2b00      	cmp	r3, #0
 8005660:	d062      	beq.n	8005728 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005662:	4b16      	ldr	r3, [pc, #88]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800566c:	6093      	str	r3, [r2, #8]
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	4910      	ldr	r1, [pc, #64]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800567c:	4313      	orrs	r3, r2
 800567e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005688:	d309      	bcc.n	800569e <HAL_RCC_OscConfig+0xa16>
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f023 021f 	bic.w	r2, r3, #31
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	4909      	ldr	r1, [pc, #36]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 8005698:	4313      	orrs	r3, r2
 800569a:	60cb      	str	r3, [r1, #12]
 800569c:	e02a      	b.n	80056f4 <HAL_RCC_OscConfig+0xa6c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da0c      	bge.n	80056c0 <HAL_RCC_OscConfig+0xa38>
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	015b      	lsls	r3, r3, #5
 80056b4:	4901      	ldr	r1, [pc, #4]	; (80056bc <HAL_RCC_OscConfig+0xa34>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60cb      	str	r3, [r1, #12]
 80056ba:	e01b      	b.n	80056f4 <HAL_RCC_OscConfig+0xa6c>
 80056bc:	46020c00 	.word	0x46020c00
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d30a      	bcc.n	80056e0 <HAL_RCC_OscConfig+0xa58>
 80056ca:	4ba1      	ldr	r3, [pc, #644]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	029b      	lsls	r3, r3, #10
 80056d8:	499d      	ldr	r1, [pc, #628]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	60cb      	str	r3, [r1, #12]
 80056de:	e009      	b.n	80056f4 <HAL_RCC_OscConfig+0xa6c>
 80056e0:	4b9b      	ldr	r3, [pc, #620]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	03db      	lsls	r3, r3, #15
 80056ee:	4998      	ldr	r1, [pc, #608]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80056f4:	4b96      	ldr	r3, [pc, #600]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a95      	ldr	r2, [pc, #596]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80056fa:	f043 0310 	orr.w	r3, r3, #16
 80056fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005700:	f7fc f8e4 	bl	80018cc <HAL_GetTick>
 8005704:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005708:	f7fc f8e0 	bl	80018cc <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e18b      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800571a:	4b8d      	ldr	r3, [pc, #564]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0xa80>
 8005726:	e018      	b.n	800575a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005728:	4b89      	ldr	r3, [pc, #548]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a88      	ldr	r2, [pc, #544]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800572e:	f023 0310 	bic.w	r3, r3, #16
 8005732:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005734:	f7fc f8ca 	bl	80018cc <HAL_GetTick>
 8005738:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800573c:	f7fc f8c6 	bl	80018cc <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e171      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800574e:	4b80      	ldr	r3, [pc, #512]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8166 	beq.w	8005a30 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005764:	2300      	movs	r3, #0
 8005766:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800576a:	4b79      	ldr	r3, [pc, #484]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b0c      	cmp	r3, #12
 8005774:	f000 80f2 	beq.w	800595c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	2b02      	cmp	r3, #2
 800577e:	f040 80c5 	bne.w	800590c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005782:	4b73      	ldr	r3, [pc, #460]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a72      	ldr	r2, [pc, #456]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800578c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800578e:	f7fc f89d 	bl	80018cc <HAL_GetTick>
 8005792:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fc f899 	bl	80018cc <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e144      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057a8:	4b69      	ldr	r3, [pc, #420]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b4:	4b66      	ldr	r3, [pc, #408]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80057b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d111      	bne.n	80057e6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80057c2:	4b63      	ldr	r3, [pc, #396]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c8:	4a61      	ldr	r2, [pc, #388]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80057d2:	4b5f      	ldr	r3, [pc, #380]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80057d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80057e6:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <HAL_RCC_OscConfig+0xccc>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057f2:	d102      	bne.n	80057fa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80057fa:	4b56      	ldr	r3, [pc, #344]	; (8005954 <HAL_RCC_OscConfig+0xccc>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4a55      	ldr	r2, [pc, #340]	; (8005954 <HAL_RCC_OscConfig+0xccc>)
 8005800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005804:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005806:	4b52      	ldr	r3, [pc, #328]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800581a:	3a01      	subs	r2, #1
 800581c:	0212      	lsls	r2, r2, #8
 800581e:	4311      	orrs	r1, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005824:	430a      	orrs	r2, r1
 8005826:	494a      	ldr	r1, [pc, #296]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005828:	4313      	orrs	r3, r2
 800582a:	628b      	str	r3, [r1, #40]	; 0x28
 800582c:	4b48      	ldr	r3, [pc, #288]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800582e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005830:	4b49      	ldr	r3, [pc, #292]	; (8005958 <HAL_RCC_OscConfig+0xcd0>)
 8005832:	4013      	ands	r3, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005838:	3a01      	subs	r2, #1
 800583a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005842:	3a01      	subs	r2, #1
 8005844:	0252      	lsls	r2, r2, #9
 8005846:	b292      	uxth	r2, r2
 8005848:	4311      	orrs	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800584e:	3a01      	subs	r2, #1
 8005850:	0412      	lsls	r2, r2, #16
 8005852:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005856:	4311      	orrs	r1, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800585c:	3a01      	subs	r2, #1
 800585e:	0612      	lsls	r2, r2, #24
 8005860:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005864:	430a      	orrs	r2, r1
 8005866:	493a      	ldr	r1, [pc, #232]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005868:	4313      	orrs	r3, r2
 800586a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800586c:	4b38      	ldr	r3, [pc, #224]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	4a37      	ldr	r2, [pc, #220]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005872:	f023 0310 	bic.w	r3, r3, #16
 8005876:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	4a34      	ldr	r2, [pc, #208]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005882:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	4a32      	ldr	r2, [pc, #200]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005888:	f043 0310 	orr.w	r3, r3, #16
 800588c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800588e:	4b30      	ldr	r3, [pc, #192]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	f023 020c 	bic.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589a:	492d      	ldr	r1, [pc, #180]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800589c:	4313      	orrs	r3, r2
 800589e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80058a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d105      	bne.n	80058b4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80058a8:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <HAL_RCC_OscConfig+0xccc>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a29      	ldr	r2, [pc, #164]	; (8005954 <HAL_RCC_OscConfig+0xccc>)
 80058ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80058b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d107      	bne.n	80058cc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80058bc:	4b24      	ldr	r3, [pc, #144]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80058be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c2:	4a23      	ldr	r2, [pc, #140]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058cc:	4b20      	ldr	r3, [pc, #128]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80058d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 80058de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058e4:	f7fb fff2 	bl	80018cc <HAL_GetTick>
 80058e8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fb ffee 	bl	80018cc <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e099      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0xc64>
 800590a:	e091      	b.n	8005a30 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0f      	ldr	r2, [pc, #60]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005916:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005918:	f7fb ffd8 	bl	80018cc <HAL_GetTick>
 800591c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005920:	f7fb ffd4 	bl	80018cc <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e07f      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	4a03      	ldr	r2, [pc, #12]	; (8005950 <HAL_RCC_OscConfig+0xcc8>)
 8005944:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005948:	f023 0303 	bic.w	r3, r3, #3
 800594c:	6293      	str	r3, [r2, #40]	; 0x28
 800594e:	e06f      	b.n	8005a30 <HAL_RCC_OscConfig+0xda8>
 8005950:	46020c00 	.word	0x46020c00
 8005954:	46020800 	.word	0x46020800
 8005958:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800595c:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005962:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	2b01      	cmp	r3, #1
 800596e:	d039      	beq.n	80059e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d132      	bne.n	80059e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	0a1b      	lsrs	r3, r3, #8
 8005982:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800598c:	429a      	cmp	r2, r3
 800598e:	d129      	bne.n	80059e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d122      	bne.n	80059e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d11a      	bne.n	80059e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	0a5b      	lsrs	r3, r3, #9
 80059b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d111      	bne.n	80059e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059cc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d108      	bne.n	80059e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	0e1b      	lsrs	r3, r3, #24
 80059d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e024      	b.n	8005a32 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059e8:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	08db      	lsrs	r3, r3, #3
 80059ee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d01a      	beq.n	8005a30 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 8005a00:	f023 0310 	bic.w	r3, r3, #16
 8005a04:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a06:	f7fb ff61 	bl	80018cc <HAL_GetTick>
 8005a0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005a0c:	bf00      	nop
 8005a0e:	f7fb ff5d 	bl	80018cc <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d0f9      	beq.n	8005a0e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <HAL_RCC_OscConfig+0xdb4>)
 8005a2a:	f043 0310 	orr.w	r3, r3, #16
 8005a2e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3738      	adds	r7, #56	; 0x38
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	46020c00 	.word	0x46020c00

08005a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e1d9      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a54:	4b9b      	ldr	r3, [pc, #620]	; (8005cc4 <HAL_RCC_ClockConfig+0x284>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d910      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4b98      	ldr	r3, [pc, #608]	; (8005cc4 <HAL_RCC_ClockConfig+0x284>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 020f 	bic.w	r2, r3, #15
 8005a6a:	4996      	ldr	r1, [pc, #600]	; (8005cc4 <HAL_RCC_ClockConfig+0x284>)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b94      	ldr	r3, [pc, #592]	; (8005cc4 <HAL_RCC_ClockConfig+0x284>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e1c1      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d010      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	4b8c      	ldr	r3, [pc, #560]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d908      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005aa0:	4b89      	ldr	r3, [pc, #548]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	4986      	ldr	r1, [pc, #536]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d012      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	4b81      	ldr	r3, [pc, #516]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d909      	bls.n	8005ae4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ad0:	4b7d      	ldr	r3, [pc, #500]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	497a      	ldr	r1, [pc, #488]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d010      	beq.n	8005b12 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	4b74      	ldr	r3, [pc, #464]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d908      	bls.n	8005b12 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005b00:	4b71      	ldr	r3, [pc, #452]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	496e      	ldr	r1, [pc, #440]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d010      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	4b69      	ldr	r3, [pc, #420]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d908      	bls.n	8005b40 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005b2e:	4b66      	ldr	r3, [pc, #408]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 020f 	bic.w	r2, r3, #15
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4963      	ldr	r1, [pc, #396]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80d2 	beq.w	8005cf2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d143      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5a:	4b5b      	ldr	r3, [pc, #364]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d110      	bne.n	8005b8a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005b68:	4b57      	ldr	r3, [pc, #348]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b6e:	4a56      	ldr	r2, [pc, #344]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005b78:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005b86:	2301      	movs	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005b8a:	f7fb fe9f 	bl	80018cc <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005b90:	4b4e      	ldr	r3, [pc, #312]	; (8005ccc <HAL_RCC_ClockConfig+0x28c>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00f      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005b9e:	f7fb fe95 	bl	80018cc <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e12b      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005bb0:	4b46      	ldr	r3, [pc, #280]	; (8005ccc <HAL_RCC_ClockConfig+0x28c>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005bc2:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc8:	4a3f      	ldr	r2, [pc, #252]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005bca:	f023 0304 	bic.w	r3, r3, #4
 8005bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d121      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e112      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d115      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e106      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005c02:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e0fa      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c12:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e0f2      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005c22:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f023 0203 	bic.w	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4926      	ldr	r1, [pc, #152]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005c34:	f7fb fe4a 	bl	80018cc <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d112      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c42:	e00a      	b.n	8005c5a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c44:	f7fb fe42 	bl	80018cc <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e0d6      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b0c      	cmp	r3, #12
 8005c64:	d1ee      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x204>
 8005c66:	e044      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d112      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c70:	e00a      	b.n	8005c88 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c72:	f7fb fe2b 	bl	80018cc <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e0bf      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d1ee      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x232>
 8005c94:	e02d      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d123      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca0:	f7fb fe14 	bl	80018cc <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e0a8      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cb6:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <HAL_RCC_ClockConfig+0x288>)
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ee      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x260>
 8005cc2:	e016      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x2b2>
 8005cc4:	40022000 	.word	0x40022000
 8005cc8:	46020c00 	.word	0x46020c00
 8005ccc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd0:	f7fb fdfc 	bl	80018cc <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e090      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ce6:	4b4a      	ldr	r3, [pc, #296]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d1ee      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	4b43      	ldr	r3, [pc, #268]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d208      	bcs.n	8005d20 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005d0e:	4b40      	ldr	r3, [pc, #256]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f023 020f 	bic.w	r2, r3, #15
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	493d      	ldr	r1, [pc, #244]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d20:	4b3c      	ldr	r3, [pc, #240]	; (8005e14 <HAL_RCC_ClockConfig+0x3d4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d210      	bcs.n	8005d50 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <HAL_RCC_ClockConfig+0x3d4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 020f 	bic.w	r2, r3, #15
 8005d36:	4937      	ldr	r1, [pc, #220]	; (8005e14 <HAL_RCC_ClockConfig+0x3d4>)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3e:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_RCC_ClockConfig+0x3d4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e05b      	b.n	8005e08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d010      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	4b2b      	ldr	r3, [pc, #172]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d208      	bcs.n	8005d7e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d6c:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4925      	ldr	r1, [pc, #148]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d012      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d209      	bcs.n	8005db0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d9c:	4b1c      	ldr	r3, [pc, #112]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	4919      	ldr	r1, [pc, #100]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d208      	bcs.n	8005dde <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	490d      	ldr	r1, [pc, #52]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005dde:	f000 f821 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8005de2:	4602      	mov	r2, r0
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <HAL_RCC_ClockConfig+0x3d0>)
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	490a      	ldr	r1, [pc, #40]	; (8005e18 <HAL_RCC_ClockConfig+0x3d8>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <HAL_RCC_ClockConfig+0x3dc>)
 8005df6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005df8:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <HAL_RCC_ClockConfig+0x3e0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fb fbc7 	bl	8001590 <HAL_InitTick>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	46020c00 	.word	0x46020c00
 8005e14:	40022000 	.word	0x40022000
 8005e18:	080153e8 	.word	0x080153e8
 8005e1c:	20000000 	.word	0x20000000
 8005e20:	20000004 	.word	0x20000004

08005e24 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b08b      	sub	sp, #44	; 0x2c
 8005e28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 030c 	and.w	r3, r3, #12
 8005e3a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e3c:	4b78      	ldr	r3, [pc, #480]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCC_GetSysClockFreq+0x34>
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	d121      	bne.n	8005e96 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d11e      	bne.n	8005e96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005e58:	4b71      	ldr	r3, [pc, #452]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d107      	bne.n	8005e74 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005e64:	4b6e      	ldr	r3, [pc, #440]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e6a:	0b1b      	lsrs	r3, r3, #12
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
 8005e72:	e005      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005e74:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	0f1b      	lsrs	r3, r3, #28
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e80:	4a68      	ldr	r2, [pc, #416]	; (8006024 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d110      	bne.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e94:	e00d      	b.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e96:	4b62      	ldr	r3, [pc, #392]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ea2:	4b61      	ldr	r3, [pc, #388]	; (8006028 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d101      	bne.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005eae:	4b5e      	ldr	r3, [pc, #376]	; (8006028 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eb0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	f040 80ac 	bne.w	8006012 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005eba:	4b59      	ldr	r3, [pc, #356]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ec4:	4b56      	ldr	r3, [pc, #344]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ed2:	4b53      	ldr	r3, [pc, #332]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ede:	4b50      	ldr	r3, [pc, #320]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	08db      	lsrs	r3, r3, #3
 8005ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8086 	beq.w	800600e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d003      	beq.n	8005f10 <HAL_RCC_GetSysClockFreq+0xec>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d022      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x130>
 8005f0e:	e043      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800602c <HAL_RCC_GetSysClockFreq+0x208>
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f32:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f36:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006030 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f52:	e046      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800602c <HAL_RCC_GetSysClockFreq+0x208>
 8005f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f66:	4b2e      	ldr	r3, [pc, #184]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f76:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f7a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006030 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f96:	e024      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fc0:	ed97 6a01 	vldr	s12, [r7, #4]
 8005fc4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006030 <HAL_RCC_GetSysClockFreq+0x20c>
 8005fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fdc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005fe0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe6:	0e1b      	lsrs	r3, r3, #24
 8005fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fec:	3301      	adds	r3, #1
 8005fee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006006:	ee17 3a90 	vmov	r3, s15
 800600a:	623b      	str	r3, [r7, #32]
 800600c:	e001      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006012:	6a3b      	ldr	r3, [r7, #32]
}
 8006014:	4618      	mov	r0, r3
 8006016:	372c      	adds	r7, #44	; 0x2c
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	46020c00 	.word	0x46020c00
 8006024:	08015400 	.word	0x08015400
 8006028:	00f42400 	.word	0x00f42400
 800602c:	4b742400 	.word	0x4b742400
 8006030:	46000000 	.word	0x46000000

08006034 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006038:	f7ff fef4 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <HAL_RCC_GetHCLKFreq+0x28>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	4906      	ldr	r1, [pc, #24]	; (8006060 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006048:	5ccb      	ldrb	r3, [r1, r3]
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	4a05      	ldr	r2, [pc, #20]	; (8006064 <HAL_RCC_GetHCLKFreq+0x30>)
 8006050:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006052:	4b04      	ldr	r3, [pc, #16]	; (8006064 <HAL_RCC_GetHCLKFreq+0x30>)
 8006054:	681b      	ldr	r3, [r3, #0]
}
 8006056:	4618      	mov	r0, r3
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	46020c00 	.word	0x46020c00
 8006060:	080153e8 	.word	0x080153e8
 8006064:	20000000 	.word	0x20000000

08006068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800606c:	f7ff ffe2 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4903      	ldr	r1, [pc, #12]	; (800608c <HAL_RCC_GetPCLK1Freq+0x24>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006084:	4618      	mov	r0, r3
 8006086:	bd80      	pop	{r7, pc}
 8006088:	46020c00 	.word	0x46020c00
 800608c:	080153f8 	.word	0x080153f8

08006090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006094:	f7ff ffce 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8006098:	4602      	mov	r2, r0
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	4903      	ldr	r1, [pc, #12]	; (80060b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060a6:	5ccb      	ldrb	r3, [r1, r3]
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	46020c00 	.word	0x46020c00
 80060b4:	080153f8 	.word	0x080153f8

080060b8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80060bc:	f7ff ffba 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	4903      	ldr	r1, [pc, #12]	; (80060dc <HAL_RCC_GetPCLK3Freq+0x24>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	46020c00 	.word	0x46020c00
 80060dc:	080153f8 	.word	0x080153f8

080060e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	221f      	movs	r2, #31
 80060ee:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <HAL_RCC_GetClockConfig+0x68>)
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f003 0203 	and.w	r2, r3, #3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <HAL_RCC_GetClockConfig+0x68>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f003 020f 	and.w	r2, r3, #15
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <HAL_RCC_GetClockConfig+0x68>)
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <HAL_RCC_GetClockConfig+0x68>)
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <HAL_RCC_GetClockConfig+0x68>)
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800612e:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_RCC_GetClockConfig+0x6c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 020f 	and.w	r2, r3, #15
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	46020c00 	.word	0x46020c00
 800614c:	40022000 	.word	0x40022000

08006150 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006158:	4b3e      	ldr	r3, [pc, #248]	; (8006254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800615a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006166:	f7fe fcd5 	bl	8004b14 <HAL_PWREx_GetVoltageRange>
 800616a:	6178      	str	r0, [r7, #20]
 800616c:	e019      	b.n	80061a2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	4b39      	ldr	r3, [pc, #228]	; (8006254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006174:	4a37      	ldr	r2, [pc, #220]	; (8006254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006176:	f043 0304 	orr.w	r3, r3, #4
 800617a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800617e:	4b35      	ldr	r3, [pc, #212]	; (8006254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800618c:	f7fe fcc2 	bl	8004b14 <HAL_PWREx_GetVoltageRange>
 8006190:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006192:	4b30      	ldr	r3, [pc, #192]	; (8006254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006198:	4a2e      	ldr	r2, [pc, #184]	; (8006254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800619a:	f023 0304 	bic.w	r3, r3, #4
 800619e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061a8:	d003      	beq.n	80061b2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061b0:	d109      	bne.n	80061c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061b8:	d202      	bcs.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80061ba:	2301      	movs	r3, #1
 80061bc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061be:	e033      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061c4:	e030      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061cc:	d208      	bcs.n	80061e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d4:	d102      	bne.n	80061dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80061d6:	2303      	movs	r3, #3
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	e025      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e035      	b.n	800624c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e6:	d90f      	bls.n	8006208 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061f4:	d902      	bls.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	e015      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80061fc:	2301      	movs	r3, #1
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	e012      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	e00f      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620e:	d109      	bne.n	8006224 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006216:	d102      	bne.n	800621e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006218:	2301      	movs	r3, #1
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	e004      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800621e:	2302      	movs	r3, #2
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e001      	b.n	8006228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006224:	2301      	movs	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f023 020f 	bic.w	r2, r3, #15
 8006230:	4909      	ldr	r1, [pc, #36]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006238:	4b07      	ldr	r3, [pc, #28]	; (8006258 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d001      	beq.n	800624a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	46020c00 	.word	0x46020c00
 8006258:	40022000 	.word	0x40022000

0800625c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800625c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006260:	b0ba      	sub	sp, #232	; 0xe8
 8006262:	af00      	add	r7, sp, #0
 8006264:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006268:	2300      	movs	r3, #0
 800626a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800626e:	2300      	movs	r3, #0
 8006270:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f002 0401 	and.w	r4, r2, #1
 8006280:	2500      	movs	r5, #0
 8006282:	ea54 0305 	orrs.w	r3, r4, r5
 8006286:	d00b      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006288:	4bcb      	ldr	r3, [pc, #812]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800628a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800628e:	f023 0103 	bic.w	r1, r3, #3
 8006292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006298:	4ac7      	ldr	r2, [pc, #796]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629a:	430b      	orrs	r3, r1
 800629c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f002 0802 	and.w	r8, r2, #2
 80062ac:	f04f 0900 	mov.w	r9, #0
 80062b0:	ea58 0309 	orrs.w	r3, r8, r9
 80062b4:	d00b      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80062b6:	4bc0      	ldr	r3, [pc, #768]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062bc:	f023 010c 	bic.w	r1, r3, #12
 80062c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	4abc      	ldr	r2, [pc, #752]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f002 0a04 	and.w	sl, r2, #4
 80062da:	f04f 0b00 	mov.w	fp, #0
 80062de:	ea5a 030b 	orrs.w	r3, sl, fp
 80062e2:	d00b      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80062e4:	4bb4      	ldr	r3, [pc, #720]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062ea:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80062ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f4:	4ab0      	ldr	r2, [pc, #704]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f6:	430b      	orrs	r3, r1
 80062f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f002 0308 	and.w	r3, r2, #8
 8006308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630c:	2300      	movs	r3, #0
 800630e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006312:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006316:	460b      	mov	r3, r1
 8006318:	4313      	orrs	r3, r2
 800631a:	d00b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800631c:	4ba6      	ldr	r3, [pc, #664]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800631e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006322:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632c:	4aa2      	ldr	r2, [pc, #648]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800632e:	430b      	orrs	r3, r1
 8006330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f002 0310 	and.w	r3, r2, #16
 8006340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006344:	2300      	movs	r3, #0
 8006346:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800634a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800634e:	460b      	mov	r3, r1
 8006350:	4313      	orrs	r3, r2
 8006352:	d00b      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006354:	4b98      	ldr	r3, [pc, #608]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800635a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800635e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006364:	4a94      	ldr	r2, [pc, #592]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006366:	430b      	orrs	r3, r1
 8006368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800636c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f002 0320 	and.w	r3, r2, #32
 8006378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006382:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d00b      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800638c:	4b8a      	ldr	r3, [pc, #552]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800638e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006392:	f023 0107 	bic.w	r1, r3, #7
 8006396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800639a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800639c:	4a86      	ldr	r2, [pc, #536]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800639e:	430b      	orrs	r3, r1
 80063a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80063b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80063be:	460b      	mov	r3, r1
 80063c0:	4313      	orrs	r3, r2
 80063c2:	d00b      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80063c4:	4b7c      	ldr	r3, [pc, #496]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063ca:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80063ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d4:	4a78      	ldr	r2, [pc, #480]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80063e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d00b      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80063fc:	4b6e      	ldr	r3, [pc, #440]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640c:	4a6a      	ldr	r2, [pc, #424]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800640e:	430b      	orrs	r3, r1
 8006410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800642a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d00b      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006434:	4b60      	ldr	r3, [pc, #384]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800643a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800643e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006444:	4a5c      	ldr	r2, [pc, #368]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006446:	430b      	orrs	r3, r1
 8006448:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800644c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800645c:	2300      	movs	r3, #0
 800645e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006462:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006466:	460b      	mov	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	d00b      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800646c:	4b52      	ldr	r3, [pc, #328]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800646e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006472:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8006476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800647a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647c:	4a4e      	ldr	r2, [pc, #312]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800647e:	430b      	orrs	r3, r1
 8006480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800649a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d00b      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80064a4:	4b44      	ldr	r3, [pc, #272]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064aa:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80064ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b4:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80064c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064cc:	2300      	movs	r3, #0
 80064ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80064d6:	460b      	mov	r3, r1
 80064d8:	4313      	orrs	r3, r2
 80064da:	d00b      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80064e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ec:	4a32      	ldr	r2, [pc, #200]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80064f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800650a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800650e:	460b      	mov	r3, r1
 8006510:	4313      	orrs	r3, r2
 8006512:	d00c      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006514:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800651a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800651e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006526:	4a24      	ldr	r2, [pc, #144]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006528:	430b      	orrs	r3, r1
 800652a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800652e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800653a:	67bb      	str	r3, [r7, #120]	; 0x78
 800653c:	2300      	movs	r3, #0
 800653e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006540:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d04f      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800654a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d02d      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d827      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800655a:	2b60      	cmp	r3, #96	; 0x60
 800655c:	d02e      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800655e:	2b60      	cmp	r3, #96	; 0x60
 8006560:	d823      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d006      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d81f      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800656e:	2b20      	cmp	r3, #32
 8006570:	d011      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006572:	e01a      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006580:	e01d      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006586:	3308      	adds	r3, #8
 8006588:	4618      	mov	r0, r3
 800658a:	f002 fa41 	bl	8008a10 <RCCEx_PLL2_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006594:	e013      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800659a:	332c      	adds	r3, #44	; 0x2c
 800659c:	4618      	mov	r0, r3
 800659e:	f002 facf 	bl	8008b40 <RCCEx_PLL3_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80065a8:	e009      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065b0:	e005      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80065b2:	bf00      	nop
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x362>
 80065b6:	bf00      	nop
 80065b8:	46020c00 	.word	0x46020c00
        break;
 80065bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80065c6:	4bb6      	ldr	r3, [pc, #728]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065cc:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80065d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d8:	4ab1      	ldr	r2, [pc, #708]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065e6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80065f6:	673b      	str	r3, [r7, #112]	; 0x70
 80065f8:	2300      	movs	r3, #0
 80065fa:	677b      	str	r3, [r7, #116]	; 0x74
 80065fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d053      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006612:	d033      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006618:	d82c      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800661a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800661e:	d02f      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006624:	d826      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662a:	d008      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800662c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006630:	d820      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d011      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800663c:	e01a      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800663e:	4b98      	ldr	r3, [pc, #608]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	4a97      	ldr	r2, [pc, #604]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800664a:	e01a      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800664c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006650:	3308      	adds	r3, #8
 8006652:	4618      	mov	r0, r3
 8006654:	f002 f9dc 	bl	8008a10 <RCCEx_PLL2_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800665e:	e010      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006664:	332c      	adds	r3, #44	; 0x2c
 8006666:	4618      	mov	r0, r3
 8006668:	f002 fa6a 	bl	8008b40 <RCCEx_PLL3_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006672:	e006      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800667a:	e002      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10d      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800668a:	4b85      	ldr	r3, [pc, #532]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800668c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006690:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800669c:	4a80      	ldr	r2, [pc, #512]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800669e:	430b      	orrs	r3, r1
 80066a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066aa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80066ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80066ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80066bc:	2300      	movs	r3, #0
 80066be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d046      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80066ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80066d6:	d028      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80066d8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80066dc:	d821      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80066de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e2:	d022      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80066e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e8:	d81b      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80066ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066ee:	d01c      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80066f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066f4:	d815      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80066f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fa:	d008      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80066fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006700:	d80f      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d011      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670a:	d00e      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800670c:	e009      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800670e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006712:	3308      	adds	r3, #8
 8006714:	4618      	mov	r0, r3
 8006716:	f002 f97b 	bl	8008a10 <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006720:	e004      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800672a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800672c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006734:	4b5a      	ldr	r3, [pc, #360]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800673a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800673e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006746:	4a56      	ldr	r2, [pc, #344]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006748:	430b      	orrs	r3, r1
 800674a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800674e:	e003      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006754:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006764:	663b      	str	r3, [r7, #96]	; 0x60
 8006766:	2300      	movs	r3, #0
 8006768:	667b      	str	r3, [r7, #100]	; 0x64
 800676a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d03f      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	2b04      	cmp	r3, #4
 800677e:	d81e      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067c7 	.word	0x080067c7
 800678c:	0800679d 	.word	0x0800679d
 8006790:	080067ab 	.word	0x080067ab
 8006794:	080067c7 	.word	0x080067c7
 8006798:	080067c7 	.word	0x080067c7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800679c:	4b40      	ldr	r3, [pc, #256]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	4a3f      	ldr	r2, [pc, #252]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80067a8:	e00e      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ae:	332c      	adds	r3, #44	; 0x2c
 80067b0:	4618      	mov	r0, r3
 80067b2:	f002 f9c5 	bl	8008b40 <RCCEx_PLL3_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067bc:	e004      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067c4:	e000      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80067c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80067d0:	4b33      	ldr	r3, [pc, #204]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067d6:	f023 0107 	bic.w	r1, r3, #7
 80067da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	4a2f      	ldr	r2, [pc, #188]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80067ea:	e003      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067f0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80067f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006800:	65bb      	str	r3, [r7, #88]	; 0x58
 8006802:	2300      	movs	r3, #0
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006806:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800680a:	460b      	mov	r3, r1
 800680c:	4313      	orrs	r3, r2
 800680e:	d04d      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800681c:	d028      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800681e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006822:	d821      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006824:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006828:	d024      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800682a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800682e:	d81b      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006834:	d00e      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800683a:	d815      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01b      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006844:	d110      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800684c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006850:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006852:	e012      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006858:	332c      	adds	r3, #44	; 0x2c
 800685a:	4618      	mov	r0, r3
 800685c:	f002 f970 	bl	8008b40 <RCCEx_PLL3_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006866:	e008      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006878:	bf00      	nop
    }
    if (ret == HAL_OK)
 800687a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d110      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006882:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006888:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800688c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006894:	4a02      	ldr	r2, [pc, #8]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006896:	430b      	orrs	r3, r1
 8006898:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800689c:	e006      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x650>
 800689e:	bf00      	nop
 80068a0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068a8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80068b8:	653b      	str	r3, [r7, #80]	; 0x50
 80068ba:	2300      	movs	r3, #0
 80068bc:	657b      	str	r3, [r7, #84]	; 0x54
 80068be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f000 80b5 	beq.w	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d0:	4b9d      	ldr	r3, [pc, #628]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d113      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068de:	4b9a      	ldr	r3, [pc, #616]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e4:	4a98      	ldr	r2, [pc, #608]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068e6:	f043 0304 	orr.w	r3, r3, #4
 80068ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80068ee:	4b96      	ldr	r3, [pc, #600]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006906:	4b91      	ldr	r3, [pc, #580]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	4a90      	ldr	r2, [pc, #576]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006912:	f7fa ffdb 	bl	80018cc <HAL_GetTick>
 8006916:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800691a:	e00b      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691c:	f7fa ffd6 	bl	80018cc <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d903      	bls.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006932:	e005      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006934:	4b85      	ldr	r3, [pc, #532]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0ed      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006940:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d165      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006948:	4b7f      	ldr	r3, [pc, #508]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800694a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800694e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d023      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800695e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006962:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696a:	4293      	cmp	r3, r2
 800696c:	d01b      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800696e:	4b76      	ldr	r3, [pc, #472]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800697c:	4b72      	ldr	r3, [pc, #456]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800697e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006982:	4a71      	ldr	r2, [pc, #452]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006988:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800698c:	4b6e      	ldr	r3, [pc, #440]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800698e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006992:	4a6d      	ldr	r2, [pc, #436]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006998:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800699c:	4a6a      	ldr	r2, [pc, #424]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d019      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b2:	f7fa ff8b 	bl	80018cc <HAL_GetTick>
 80069b6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ba:	e00d      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7fa ff86 	bl	80018cc <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c6:	1ad2      	subs	r2, r2, r3
 80069c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d903      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80069d6:	e006      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069d8:	4b5b      	ldr	r3, [pc, #364]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0ea      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80069e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10d      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80069ee:	4b56      	ldr	r3, [pc, #344]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006a00:	4a51      	ldr	r2, [pc, #324]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a08:	e008      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a0e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006a12:	e003      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a14:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a18:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a1c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d107      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a24:	4b48      	ldr	r3, [pc, #288]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a2a:	4a47      	ldr	r2, [pc, #284]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a2c:	f023 0304 	bic.w	r3, r3, #4
 8006a30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a42:	2300      	movs	r3, #0
 8006a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d042      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a5c:	d022      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006a5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a62:	d81b      	bhi.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a68:	d011      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6e:	d815      	bhi.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d019      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a78:	d110      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a7e:	3308      	adds	r3, #8
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 ffc5 	bl	8008a10 <RCCEx_PLL2_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a8c:	e00d      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8e:	4b2e      	ldr	r3, [pc, #184]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	4a2d      	ldr	r2, [pc, #180]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a98:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006a9a:	e006      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006aa2:	e002      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006aa4:	bf00      	nop
 8006aa6:	e000      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006aa8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006aaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10d      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006ab2:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ab8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ac4:	4a20      	ldr	r2, [pc, #128]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006acc:	e003      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ace:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ad2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006aec:	460b      	mov	r3, r1
 8006aee:	4313      	orrs	r3, r2
 8006af0:	d032      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afe:	d00b      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b04:	d804      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0e:	d007      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b16:	e004      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b18:	bf00      	nop
 8006b1a:	e002      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b22:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d112      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006b2a:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b3c:	4a02      	ldr	r2, [pc, #8]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006b44:	e008      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006b46:	bf00      	nop
 8006b48:	46020c00 	.word	0x46020c00
 8006b4c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b54:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b66:	2300      	movs	r3, #0
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4313      	orrs	r3, r2
 8006b72:	d00c      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006b74:	4b98      	ldr	r3, [pc, #608]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b7a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b86:	4a94      	ldr	r2, [pc, #592]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	d019      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bb6:	d105      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bb8:	4b87      	ldr	r3, [pc, #540]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	4a86      	ldr	r2, [pc, #536]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006bc4:	4b84      	ldr	r3, [pc, #528]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bca:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bd6:	4a80      	ldr	r2, [pc, #512]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bec:	2300      	movs	r3, #0
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	d00c      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006bfa:	4b77      	ldr	r3, [pc, #476]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c0c:	4972      	ldr	r1, [pc, #456]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c20:	623b      	str	r3, [r7, #32]
 8006c22:	2300      	movs	r3, #0
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
 8006c26:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d00c      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006c30:	4b69      	ldr	r3, [pc, #420]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c42:	4965      	ldr	r1, [pc, #404]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d00c      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006c66:	4b5c      	ldr	r3, [pc, #368]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c6c:	f023 0218 	bic.w	r2, r3, #24
 8006c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c78:	4957      	ldr	r1, [pc, #348]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	d032      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca8:	d105      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006caa:	4b4b      	ldr	r3, [pc, #300]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	4a4a      	ldr	r2, [pc, #296]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cc2:	d108      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cc8:	3308      	adds	r3, #8
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fea0 	bl	8008a10 <RCCEx_PLL2_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006cd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10d      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006cde:	4b3e      	ldr	r3, [pc, #248]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ce0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf0:	4939      	ldr	r1, [pc, #228]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006cf8:	e003      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cfe:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d03a      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d2a:	d00e      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d30:	d815      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d017      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006d36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d3a:	d110      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d3c:	4b26      	ldr	r3, [pc, #152]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d46:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006d48:	e00e      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d4e:	3308      	adds	r3, #8
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fe5d 	bl	8008a10 <RCCEx_PLL2_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006d5c:	e004      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d64:	e000      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006d66:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d68:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10d      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006d70:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d82:	4915      	ldr	r1, [pc, #84]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d90:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006daa:	460b      	mov	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d00c      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006db6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dc2:	4905      	ldr	r1, [pc, #20]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006dca:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	37e8      	adds	r7, #232	; 0xe8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd8:	46020c00 	.word	0x46020c00

08006ddc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b089      	sub	sp, #36	; 0x24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006de4:	4bad      	ldr	r3, [pc, #692]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006dee:	4bab      	ldr	r3, [pc, #684]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006df8:	4ba8      	ldr	r3, [pc, #672]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	3301      	adds	r3, #1
 8006e04:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006e06:	4ba5      	ldr	r3, [pc, #660]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e12:	4ba2      	ldr	r3, [pc, #648]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8123 	beq.w	800707c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d062      	beq.n	8006f02 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	f200 8081 	bhi.w	8006f46 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d024      	beq.n	8006e94 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d17a      	bne.n	8006f46 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5a:	eddf 6a91 	vldr	s13, [pc, #580]	; 80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	4b8e      	ldr	r3, [pc, #568]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e76:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80070a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e92:	e08f      	b.n	8006fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e94:	4b81      	ldr	r3, [pc, #516]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8006ea0:	4b7e      	ldr	r3, [pc, #504]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	0f1b      	lsrs	r3, r3, #28
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	e006      	b.n	8006eba <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8006eac:	4b7b      	ldr	r3, [pc, #492]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	0f1b      	lsrs	r3, r3, #28
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	4a7b      	ldr	r2, [pc, #492]	; (80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8006ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80070a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f00:	e058      	b.n	8006fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	ee07 3a90 	vmov	s15, r3
 8006f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80070a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f24:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f28:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80070a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f44:	e036      	b.n	8006fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f46:	4b55      	ldr	r3, [pc, #340]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8006f52:	4b52      	ldr	r3, [pc, #328]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	0f1b      	lsrs	r3, r3, #28
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	e006      	b.n	8006f6c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8006f5e:	4b4f      	ldr	r3, [pc, #316]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	0f1b      	lsrs	r3, r3, #28
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	4a4e      	ldr	r2, [pc, #312]	; (80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8006f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f96:	eddf 5a43 	vldr	s11, [pc, #268]	; 80070a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb2:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006fb4:	4b39      	ldr	r3, [pc, #228]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d017      	beq.n	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fc0:	4b36      	ldr	r3, [pc, #216]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc4:	0a5b      	lsrs	r3, r3, #9
 8006fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe6:	ee17 2a90 	vmov	r2, s15
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e002      	b.n	8006ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006ff6:	4b29      	ldr	r3, [pc, #164]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d017      	beq.n	8007032 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007002:	4b26      	ldr	r3, [pc, #152]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	0c1b      	lsrs	r3, r3, #16
 8007008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007018:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800701c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007028:	ee17 2a90 	vmov	r2, s15
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	605a      	str	r2, [r3, #4]
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007038:	4b18      	ldr	r3, [pc, #96]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007044:	4b15      	ldr	r3, [pc, #84]	; (800709c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007048:	0e1b      	lsrs	r3, r3, #24
 800704a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800705a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800705e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800706a:	ee17 2a90 	vmov	r2, s15
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007072:	e00c      	b.n	800708e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	609a      	str	r2, [r3, #8]
}
 800707a:	e008      	b.n	800708e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	609a      	str	r2, [r3, #8]
}
 800708e:	bf00      	nop
 8007090:	3724      	adds	r7, #36	; 0x24
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	46020c00 	.word	0x46020c00
 80070a0:	4b742400 	.word	0x4b742400
 80070a4:	46000000 	.word	0x46000000
 80070a8:	08015400 	.word	0x08015400

080070ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b089      	sub	sp, #36	; 0x24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80070b4:	4bad      	ldr	r3, [pc, #692]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80070be:	4bab      	ldr	r3, [pc, #684]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80070c8:	4ba8      	ldr	r3, [pc, #672]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	3301      	adds	r3, #1
 80070d4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80070d6:	4ba5      	ldr	r3, [pc, #660]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	091b      	lsrs	r3, r3, #4
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80070e2:	4ba2      	ldr	r3, [pc, #648]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	08db      	lsrs	r3, r3, #3
 80070e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8123 	beq.w	800734c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d062      	beq.n	80071d2 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b03      	cmp	r3, #3
 8007110:	f200 8081 	bhi.w	8007216 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d024      	beq.n	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d17a      	bne.n	8007216 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b8e      	ldr	r3, [pc, #568]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007142:	ed97 6a02 	vldr	s12, [r7, #8]
 8007146:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007162:	e08f      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007164:	4b81      	ldr	r3, [pc, #516]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8007170:	4b7e      	ldr	r3, [pc, #504]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	0f1b      	lsrs	r3, r3, #28
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	e006      	b.n	800718a <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800717c:	4b7b      	ldr	r3, [pc, #492]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800717e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	0f1b      	lsrs	r3, r3, #28
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	4a7b      	ldr	r2, [pc, #492]	; (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80071b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80071c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d0:	e058      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071dc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80071e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e4:	4b61      	ldr	r3, [pc, #388]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f8:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80071fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007200:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007208:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800720c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007210:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007214:	e036      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007216:	4b55      	ldr	r3, [pc, #340]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8007222:	4b52      	ldr	r3, [pc, #328]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	0f1b      	lsrs	r3, r3, #28
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	e006      	b.n	800723c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800722e:	4b4f      	ldr	r3, [pc, #316]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	0f1b      	lsrs	r3, r3, #28
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	4a4e      	ldr	r2, [pc, #312]	; (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800723e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a02 	vldr	s12, [r7, #8]
 8007266:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007282:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007284:	4b39      	ldr	r3, [pc, #228]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007290:	4b36      	ldr	r3, [pc, #216]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007294:	0a5b      	lsrs	r3, r3, #9
 8007296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80072a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b6:	ee17 2a90 	vmov	r2, s15
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80072c6:	4b29      	ldr	r3, [pc, #164]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d017      	beq.n	8007302 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072d2:	4b26      	ldr	r3, [pc, #152]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80072e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f8:	ee17 2a90 	vmov	r2, s15
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007308:	4b18      	ldr	r3, [pc, #96]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d017      	beq.n	8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007314:	4b15      	ldr	r3, [pc, #84]	; (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007318:	0e1b      	lsrs	r3, r3, #24
 800731a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800732e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733a:	ee17 2a90 	vmov	r2, s15
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007342:	e00c      	b.n	800735e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]
}
 800734a:	e008      	b.n	800735e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	609a      	str	r2, [r3, #8]
}
 800735e:	bf00      	nop
 8007360:	3724      	adds	r7, #36	; 0x24
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	46020c00 	.word	0x46020c00
 8007370:	4b742400 	.word	0x4b742400
 8007374:	46000000 	.word	0x46000000
 8007378:	08015400 	.word	0x08015400

0800737c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800737c:	b480      	push	{r7}
 800737e:	b089      	sub	sp, #36	; 0x24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007384:	4bad      	ldr	r3, [pc, #692]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800738e:	4bab      	ldr	r3, [pc, #684]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007398:	4ba8      	ldr	r3, [pc, #672]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	0a1b      	lsrs	r3, r3, #8
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	3301      	adds	r3, #1
 80073a4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80073a6:	4ba5      	ldr	r3, [pc, #660]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80073b2:	4ba2      	ldr	r3, [pc, #648]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80073b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b6:	08db      	lsrs	r3, r3, #3
 80073b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8123 	beq.w	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d062      	beq.n	80074a2 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	f200 8081 	bhi.w	80074e6 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d024      	beq.n	8007434 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d17a      	bne.n	80074e6 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	4b8e      	ldr	r3, [pc, #568]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007412:	ed97 6a02 	vldr	s12, [r7, #8]
 8007416:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007426:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742e:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007432:	e08f      	b.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007434:	4b81      	ldr	r3, [pc, #516]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8007440:	4b7e      	ldr	r3, [pc, #504]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	0f1b      	lsrs	r3, r3, #28
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	e006      	b.n	800745a <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800744c:	4b7b      	ldr	r3, [pc, #492]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800744e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007452:	041b      	lsls	r3, r3, #16
 8007454:	0f1b      	lsrs	r3, r3, #28
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	4a7b      	ldr	r2, [pc, #492]	; (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800745c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007480:	ed97 6a02 	vldr	s12, [r7, #8]
 8007484:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007494:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a0:	e058      	b.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ac:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80074b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b4:	4b61      	ldr	r3, [pc, #388]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80074c8:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80074cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e4:	e036      	b.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80074e6:	4b55      	ldr	r3, [pc, #340]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80074f2:	4b52      	ldr	r3, [pc, #328]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	0f1b      	lsrs	r3, r3, #28
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	e006      	b.n	800750c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 80074fe:	4b4f      	ldr	r3, [pc, #316]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	0f1b      	lsrs	r3, r3, #28
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	4a4e      	ldr	r2, [pc, #312]	; (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800750e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a02 	vldr	s12, [r7, #8]
 8007536:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007552:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007554:	4b39      	ldr	r3, [pc, #228]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d017      	beq.n	8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007560:	4b36      	ldr	r3, [pc, #216]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007564:	0a5b      	lsrs	r3, r3, #9
 8007566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007576:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800757a:	edd7 6a07 	vldr	s13, [r7, #28]
 800757e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007586:	ee17 2a90 	vmov	r2, s15
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e002      	b.n	8007596 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007596:	4b29      	ldr	r3, [pc, #164]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d017      	beq.n	80075d2 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075a2:	4b26      	ldr	r3, [pc, #152]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	0c1b      	lsrs	r3, r3, #16
 80075a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80075b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075b8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c8:	ee17 2a90 	vmov	r2, s15
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
 80075d0:	e002      	b.n	80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80075d8:	4b18      	ldr	r3, [pc, #96]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d017      	beq.n	8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075e4:	4b15      	ldr	r3, [pc, #84]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e8:	0e1b      	lsrs	r3, r3, #24
 80075ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80075f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075fa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760a:	ee17 2a90 	vmov	r2, s15
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007612:	e00c      	b.n	800762e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	609a      	str	r2, [r3, #8]
}
 800761a:	e008      	b.n	800762e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	609a      	str	r2, [r3, #8]
}
 800762e:	bf00      	nop
 8007630:	3724      	adds	r7, #36	; 0x24
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	46020c00 	.word	0x46020c00
 8007640:	4b742400 	.word	0x4b742400
 8007644:	46000000 	.word	0x46000000
 8007648:	08015400 	.word	0x08015400

0800764c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af00      	add	r7, sp, #0
 8007652:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800765e:	430b      	orrs	r3, r1
 8007660:	d145      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007662:	4ba7      	ldr	r3, [pc, #668]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800766c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800766e:	4ba4      	ldr	r3, [pc, #656]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d108      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007682:	d104      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
 800768a:	f001 b9b3 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800768e:	4b9c      	ldr	r3, [pc, #624]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800769c:	d114      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a4:	d110      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076a6:	4b96      	ldr	r3, [pc, #600]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b4:	d103      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80076b6:	23fa      	movs	r3, #250	; 0xfa
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076ba:	f001 b99b 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80076be:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076c4:	f001 b996 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80076c8:	4b8d      	ldr	r3, [pc, #564]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d4:	d107      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076dc:	d103      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80076de:	4b89      	ldr	r3, [pc, #548]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
 80076e2:	f001 b987 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ea:	f001 b983 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80076ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80076f6:	430b      	orrs	r3, r1
 80076f8:	d151      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80076fa:	4b81      	ldr	r3, [pc, #516]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007700:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007704:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2b80      	cmp	r3, #128	; 0x80
 800770a:	d035      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d841      	bhi.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	2b60      	cmp	r3, #96	; 0x60
 8007716:	d02a      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	2b60      	cmp	r3, #96	; 0x60
 800771c:	d83b      	bhi.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2b40      	cmp	r3, #64	; 0x40
 8007722:	d009      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	2b40      	cmp	r3, #64	; 0x40
 8007728:	d835      	bhi.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00c      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	2b20      	cmp	r3, #32
 8007734:	d012      	beq.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007736:	e02e      	b.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fb4d 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007746:	f001 b955 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774a:	f107 0318 	add.w	r3, r7, #24
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff fcac 	bl	80070ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007758:	f001 b94c 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775c:	f107 030c 	add.w	r3, r7, #12
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fe0b 	bl	800737c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800776a:	f001 b943 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800776e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007774:	f001 b93e 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007778:	4b61      	ldr	r3, [pc, #388]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007784:	d103      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007786:	4b60      	ldr	r3, [pc, #384]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800778a:	f001 b933 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007792:	f001 b92f 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800779a:	f001 b92b 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800779e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80077a6:	430b      	orrs	r3, r1
 80077a8:	d158      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80077aa:	4b55      	ldr	r3, [pc, #340]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077bc:	d03b      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c4:	d846      	bhi.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077cc:	d02e      	beq.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d4:	d83e      	bhi.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077dc:	d00b      	beq.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e4:	d836      	bhi.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00d      	beq.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f2:	d012      	beq.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80077f4:	e02e      	b.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff faee 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007804:	f001 b8f6 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007808:	f107 0318 	add.w	r3, r7, #24
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff fc4d 	bl	80070ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007816:	f001 b8ed 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800781a:	f107 030c 	add.w	r3, r7, #12
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff fdac 	bl	800737c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007828:	f001 b8e4 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800782c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007832:	f001 b8df 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007836:	4b32      	ldr	r3, [pc, #200]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800783e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007842:	d103      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007844:	4b30      	ldr	r3, [pc, #192]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007848:	f001 b8d4 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007850:	f001 b8d0 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007858:	f001 b8cc 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800785c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007860:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007864:	430b      	orrs	r3, r1
 8007866:	d126      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007868:	4b25      	ldr	r3, [pc, #148]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800786a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800786e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007872:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007874:	4b22      	ldr	r3, [pc, #136]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007880:	d106      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007888:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
 800788c:	f001 b8b2 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007890:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789c:	d107      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a4:	d103      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80078a6:	4b19      	ldr	r3, [pc, #100]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
 80078aa:	f001 b8a3 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
 80078b2:	f001 b89f 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80078b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ba:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80078be:	430b      	orrs	r3, r1
 80078c0:	d16e      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078c8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078d4:	d03d      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078dc:	d85c      	bhi.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e4:	d014      	beq.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ec:	d854      	bhi.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01f      	beq.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078fa:	d012      	beq.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80078fc:	e04c      	b.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80078fe:	bf00      	nop
 8007900:	46020c00 	.word	0x46020c00
 8007904:	0007a120 	.word	0x0007a120
 8007908:	00f42400 	.word	0x00f42400
 800790c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fa61 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800791e:	f001 b869 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007922:	f107 0318 	add.w	r3, r7, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fbc0 	bl	80070ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007930:	f001 b860 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007934:	4ba7      	ldr	r3, [pc, #668]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800793c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007940:	d103      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007942:	4ba5      	ldr	r3, [pc, #660]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007946:	f001 b855 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800794e:	f001 b851 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007952:	4ba0      	ldr	r3, [pc, #640]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b20      	cmp	r3, #32
 800795c:	d118      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800795e:	4b9d      	ldr	r3, [pc, #628]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800796a:	4b9a      	ldr	r3, [pc, #616]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0e1b      	lsrs	r3, r3, #24
 8007970:	f003 030f 	and.w	r3, r3, #15
 8007974:	e006      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007976:	4b97      	ldr	r3, [pc, #604]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	0e1b      	lsrs	r3, r3, #24
 8007980:	f003 030f 	and.w	r3, r3, #15
 8007984:	4a95      	ldr	r2, [pc, #596]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800798c:	f001 b832 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007994:	f001 b82e 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800799c:	f001 b82a 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80079a8:	430b      	orrs	r3, r1
 80079aa:	d17f      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80079ac:	4b89      	ldr	r3, [pc, #548]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80079ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079b6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d165      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80079be:	4b85      	ldr	r3, [pc, #532]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80079c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079c4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80079c8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079d0:	d034      	beq.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079d8:	d853      	bhi.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e0:	d00b      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e8:	d84b      	bhi.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d016      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079f6:	d009      	beq.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80079f8:	e043      	b.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff f9ec 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a08:	f000 bff4 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a0c:	f107 0318 	add.w	r3, r7, #24
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fb4b 	bl	80070ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a1a:	f000 bfeb 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007a1e:	4b6d      	ldr	r3, [pc, #436]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2a:	d103      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007a2c:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007a30:	f000 bfe0 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a38:	f000 bfdc 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a3c:	4b65      	ldr	r3, [pc, #404]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d118      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a48:	4b62      	ldr	r3, [pc, #392]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007a54:	4b5f      	ldr	r3, [pc, #380]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	0e1b      	lsrs	r3, r3, #24
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	e006      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007a60:	4b5c      	ldr	r3, [pc, #368]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a66:	041b      	lsls	r3, r3, #16
 8007a68:	0e1b      	lsrs	r3, r3, #24
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	4a5b      	ldr	r2, [pc, #364]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007a76:	f000 bfbd 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a7e:	f000 bfb9 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a86:	f000 bfb5 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a90:	d108      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff f9a0 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa0:	f000 bfa8 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa8:	f000 bfa4 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab0:	1e51      	subs	r1, r2, #1
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	d136      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007ab6:	4b47      	ldr	r3, [pc, #284]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7fe fae2 	bl	8006090 <HAL_RCC_GetPCLK2Freq>
 8007acc:	6378      	str	r0, [r7, #52]	; 0x34
 8007ace:	f000 bf91 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d104      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ad8:	f7fe f9a4 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8007adc:	6378      	str	r0, [r7, #52]	; 0x34
 8007ade:	f000 bf89 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007ae2:	4b3c      	ldr	r3, [pc, #240]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aee:	d106      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d103      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007af6:	4b3a      	ldr	r3, [pc, #232]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
 8007afa:	f000 bf7b 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007afe:	4b35      	ldr	r3, [pc, #212]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d107      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d104      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34
 8007b18:	f000 bf6c 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b20:	f000 bf68 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b28:	1e91      	subs	r1, r2, #2
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	d136      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007b2e:	4b29      	ldr	r3, [pc, #164]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b34:	f003 030c 	and.w	r3, r3, #12
 8007b38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b40:	f7fe fa92 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8007b44:	6378      	str	r0, [r7, #52]	; 0x34
 8007b46:	f000 bf55 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d104      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b50:	f7fe f968 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8007b54:	6378      	str	r0, [r7, #52]	; 0x34
 8007b56:	f000 bf4d 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007b5a:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b66:	d106      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2b08      	cmp	r3, #8
 8007b6c:	d103      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
 8007b72:	f000 bf3f 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007b76:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d107      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	2b0c      	cmp	r3, #12
 8007b88:	d104      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b90:	f000 bf30 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
 8007b98:	f000 bf2c 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba0:	1f11      	subs	r1, r2, #4
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	d13f      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d104      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bb8:	f7fe fa56 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8007bbc:	6378      	str	r0, [r7, #52]	; 0x34
 8007bbe:	f000 bf19 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d10d      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bc8:	f7fe f92c 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8007bcc:	6378      	str	r0, [r7, #52]	; 0x34
 8007bce:	f000 bf11 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007bd2:	bf00      	nop
 8007bd4:	46020c00 	.word	0x46020c00
 8007bd8:	02dc6c00 	.word	0x02dc6c00
 8007bdc:	08015400 	.word	0x08015400
 8007be0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007be4:	4ba6      	ldr	r3, [pc, #664]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf0:	d106      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d103      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007bf8:	4ba2      	ldr	r3, [pc, #648]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfc:	f000 befa 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007c00:	4b9f      	ldr	r3, [pc, #636]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	2b30      	cmp	r3, #48	; 0x30
 8007c12:	d104      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1a:	f000 beeb 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
 8007c22:	f000 bee7 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2a:	f1a2 0108 	sub.w	r1, r2, #8
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	d136      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007c32:	4b93      	ldr	r3, [pc, #588]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c44:	f7fe fa10 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8007c48:	6378      	str	r0, [r7, #52]	; 0x34
 8007c4a:	f000 bed3 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	d104      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c54:	f7fe f8e6 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8007c58:	6378      	str	r0, [r7, #52]	; 0x34
 8007c5a:	f000 becb 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007c5e:	4b88      	ldr	r3, [pc, #544]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6a:	d106      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	2b80      	cmp	r3, #128	; 0x80
 8007c70:	d103      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007c72:	4b84      	ldr	r3, [pc, #528]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
 8007c76:	f000 bebd 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007c7a:	4b81      	ldr	r3, [pc, #516]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d107      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c8c:	d104      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
 8007c94:	f000 beae 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	f000 beaa 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	f1a2 0110 	sub.w	r1, r2, #16
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	d139      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007cac:	4b74      	ldr	r3, [pc, #464]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cbe:	f7fe f9d3 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8007cc2:	6378      	str	r0, [r7, #52]	; 0x34
 8007cc4:	f000 be96 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cce:	d104      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cd0:	f7fe f8a8 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8007cd4:	6378      	str	r0, [r7, #52]	; 0x34
 8007cd6:	f000 be8d 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007cda:	4b69      	ldr	r3, [pc, #420]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce6:	d107      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cee:	d103      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007cf0:	4b64      	ldr	r3, [pc, #400]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf4:	f000 be7e 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007cf8:	4b61      	ldr	r3, [pc, #388]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d108      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0c:	d104      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
 8007d14:	f000 be6e 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	f000 be6a 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f1a2 0120 	sub.w	r1, r2, #32
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	d158      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007d2c:	4b54      	ldr	r3, [pc, #336]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007d3e:	f7fe f9bb 	bl	80060b8 <HAL_RCC_GetPCLK3Freq>
 8007d42:	6378      	str	r0, [r7, #52]	; 0x34
 8007d44:	f000 be56 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d104      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d4e:	f7fe f869 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8007d52:	6378      	str	r0, [r7, #52]	; 0x34
 8007d54:	f000 be4e 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007d58:	4b49      	ldr	r3, [pc, #292]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d64:	d106      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d103      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007d6c:	4b45      	ldr	r3, [pc, #276]	; (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d70:	f000 be40 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007d74:	4b42      	ldr	r3, [pc, #264]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d107      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d104      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8e:	f000 be31 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007d92:	4b3b      	ldr	r3, [pc, #236]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d11b      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d118      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007da4:	4b36      	ldr	r3, [pc, #216]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d005      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007db0:	4b33      	ldr	r3, [pc, #204]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	0e1b      	lsrs	r3, r3, #24
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	e006      	b.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007dbc:	4b30      	ldr	r3, [pc, #192]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dc2:	041b      	lsls	r3, r3, #16
 8007dc4:	0e1b      	lsrs	r3, r3, #24
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	4a2f      	ldr	r2, [pc, #188]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd2:	f000 be0f 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dda:	f000 be0b 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de2:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007de6:	430b      	orrs	r3, r1
 8007de8:	d172      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007dea:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007df0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007df4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dfc:	d104      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dfe:	f7fe f811 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8007e02:	6378      	str	r0, [r7, #52]	; 0x34
 8007e04:	f000 bdf6 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0e:	d108      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e10:	f107 0318 	add.w	r3, r7, #24
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff f949 	bl	80070ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1e:	f000 bde9 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007e28:	f7fe f904 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8007e2c:	6378      	str	r0, [r7, #52]	; 0x34
 8007e2e:	f000 bde1 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007e38:	d128      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e3a:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	d118      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e46:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007e52:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	0e1b      	lsrs	r3, r3, #24
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	e006      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007e5e:	4b08      	ldr	r3, [pc, #32]	; (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e64:	041b      	lsls	r3, r3, #16
 8007e66:	0e1b      	lsrs	r3, r3, #24
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	4a06      	ldr	r2, [pc, #24]	; (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
 8007e74:	f000 bdbe 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e7c:	f000 bdba 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007e80:	46020c00 	.word	0x46020c00
 8007e84:	00f42400 	.word	0x00f42400
 8007e88:	08015400 	.word	0x08015400
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007e8c:	4baf      	ldr	r3, [pc, #700]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e98:	d107      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ea0:	d103      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8007ea2:	4bab      	ldr	r3, [pc, #684]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea6:	f000 bda5 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007eaa:	4ba8      	ldr	r3, [pc, #672]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb6:	d107      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ebe:	d103      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8007ec0:	4ba3      	ldr	r3, [pc, #652]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec4:	f000 bd96 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ecc:	f000 bd92 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	d158      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007edc:	4b9b      	ldr	r3, [pc, #620]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007ede:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	d84b      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f2d 	.word	0x08007f2d
 8007ef8:	08007f09 	.word	0x08007f09
 8007efc:	08007f1b 	.word	0x08007f1b
 8007f00:	08007f37 	.word	0x08007f37
 8007f04:	08007f41 	.word	0x08007f41
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe ff65 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f16:	f000 bd6d 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fa2c 	bl	800737c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f28:	f000 bd64 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007f2c:	f7fe f882 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8007f30:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f32:	f000 bd5f 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f3c:	f000 bd5a 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f40:	4b82      	ldr	r3, [pc, #520]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d118      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f4c:	4b7f      	ldr	r3, [pc, #508]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8007f58:	4b7c      	ldr	r3, [pc, #496]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	0e1b      	lsrs	r3, r3, #24
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	e006      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007f64:	4b79      	ldr	r3, [pc, #484]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	4a78      	ldr	r2, [pc, #480]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f78:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f7a:	f000 bd3b 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f82:	f000 bd37 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f8a:	f000 bd33 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f92:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007f96:	430b      	orrs	r3, r1
 8007f98:	d167      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007f9a:	4b6c      	ldr	r3, [pc, #432]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fa0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007fa4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fac:	d036      	beq.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fb4:	d855      	bhi.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fbc:	d029      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fc4:	d84d      	bhi.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fcc:	d013      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fd4:	d845      	bhi.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d015      	beq.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe2:	d13e      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fef7 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ff2:	f000 bcff 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff6:	f107 030c 	add.w	r3, r7, #12
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff f9be 	bl	800737c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008004:	f000 bcf6 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008008:	f7fe f814 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 800800c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800800e:	f000 bcf1 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008012:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008018:	f000 bcec 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800801c:	4b4b      	ldr	r3, [pc, #300]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0320 	and.w	r3, r3, #32
 8008024:	2b20      	cmp	r3, #32
 8008026:	d118      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008028:	4b48      	ldr	r3, [pc, #288]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008034:	4b45      	ldr	r3, [pc, #276]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	0e1b      	lsrs	r3, r3, #24
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	e006      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008040:	4b42      	ldr	r3, [pc, #264]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008046:	041b      	lsls	r3, r3, #16
 8008048:	0e1b      	lsrs	r3, r3, #24
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	4a41      	ldr	r2, [pc, #260]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008056:	f000 bccd 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800805e:	f000 bcc9 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008066:	f000 bcc5 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800806a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800806e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008072:	430b      	orrs	r3, r1
 8008074:	d14c      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008076:	4b35      	ldr	r3, [pc, #212]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800807c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008080:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008088:	f7fd ffee 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 800808c:	6378      	str	r0, [r7, #52]	; 0x34
 800808e:	f000 bcb1 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008098:	d104      	bne.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800809a:	f7fd fec3 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 800809e:	6378      	str	r0, [r7, #52]	; 0x34
 80080a0:	f000 bca8 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80080a4:	4b29      	ldr	r3, [pc, #164]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b0:	d107      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b8:	d103      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80080ba:	4b25      	ldr	r3, [pc, #148]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80080bc:	637b      	str	r3, [r7, #52]	; 0x34
 80080be:	f000 bc99 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80080c2:	4b22      	ldr	r3, [pc, #136]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d11c      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080d4:	d118      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080d6:	4b1d      	ldr	r3, [pc, #116]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80080e2:	4b1a      	ldr	r3, [pc, #104]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	0e1b      	lsrs	r3, r3, #24
 80080e8:	f003 030f 	and.w	r3, r3, #15
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80080ee:	4b17      	ldr	r3, [pc, #92]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	0e1b      	lsrs	r3, r3, #24
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	4a15      	ldr	r2, [pc, #84]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80080fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
 8008104:	f000 bc76 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
 800810c:	f000 bc72 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008114:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8008118:	430b      	orrs	r3, r1
 800811a:	d153      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800811c:	4b0b      	ldr	r3, [pc, #44]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800811e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008122:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008126:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800812e:	f7fd ff9b 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8008132:	6378      	str	r0, [r7, #52]	; 0x34
 8008134:	f000 bc5e 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813e:	d10b      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008140:	f7fd fe70 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8008144:	6378      	str	r0, [r7, #52]	; 0x34
 8008146:	f000 bc55 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800814a:	bf00      	nop
 800814c:	46020c00 	.word	0x46020c00
 8008150:	00f42400 	.word	0x00f42400
 8008154:	08015400 	.word	0x08015400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008158:	4ba1      	ldr	r3, [pc, #644]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008164:	d107      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800816c:	d103      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800816e:	4b9d      	ldr	r3, [pc, #628]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008170:	637b      	str	r3, [r7, #52]	; 0x34
 8008172:	f000 bc3f 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008176:	4b9a      	ldr	r3, [pc, #616]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b20      	cmp	r3, #32
 8008180:	d11c      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008188:	d118      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800818a:	4b95      	ldr	r3, [pc, #596]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d005      	beq.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8008196:	4b92      	ldr	r3, [pc, #584]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	0e1b      	lsrs	r3, r3, #24
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	e006      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80081a2:	4b8f      	ldr	r3, [pc, #572]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80081a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	0e1b      	lsrs	r3, r3, #24
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	4a8d      	ldr	r2, [pc, #564]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80081b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
 80081b8:	f000 bc1c 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
 80081c0:	f000 bc18 	b.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80081c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c8:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80081cc:	430b      	orrs	r3, r1
 80081ce:	d151      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80081d0:	4b83      	ldr	r3, [pc, #524]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80081d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	2bc0      	cmp	r3, #192	; 0xc0
 80081e0:	d024      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	2bc0      	cmp	r3, #192	; 0xc0
 80081e6:	d842      	bhi.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2b80      	cmp	r3, #128	; 0x80
 80081ec:	d00d      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	2b80      	cmp	r3, #128	; 0x80
 80081f2:	d83c      	bhi.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	d011      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008200:	e035      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008202:	f7fd ff59 	bl	80060b8 <HAL_RCC_GetPCLK3Freq>
 8008206:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008208:	e3f4      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800820a:	4b75      	ldr	r3, [pc, #468]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008216:	d102      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8008218:	4b72      	ldr	r3, [pc, #456]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800821c:	e3ea      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008222:	e3e7      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008224:	f7fd fdfe 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8008228:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800822a:	e3e3      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800822c:	4b6c      	ldr	r3, [pc, #432]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b20      	cmp	r3, #32
 8008236:	d117      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008238:	4b69      	ldr	r3, [pc, #420]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8008244:	4b66      	ldr	r3, [pc, #408]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	0e1b      	lsrs	r3, r3, #24
 800824a:	f003 030f 	and.w	r3, r3, #15
 800824e:	e006      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8008250:	4b63      	ldr	r3, [pc, #396]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	0e1b      	lsrs	r3, r3, #24
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	4a62      	ldr	r2, [pc, #392]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008266:	e3c5      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800826c:	e3c2      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008272:	e3bf      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008278:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800827c:	430b      	orrs	r3, r1
 800827e:	d147      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008280:	4b57      	ldr	r3, [pc, #348]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008286:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800828a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	2b00      	cmp	r3, #0
 8008290:	d103      	bne.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008292:	f7fd fee9 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8008296:	6378      	str	r0, [r7, #52]	; 0x34
 8008298:	e3ac      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a0:	d103      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80082a2:	f7fd fdbf 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 80082a6:	6378      	str	r0, [r7, #52]	; 0x34
 80082a8:	e3a4      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80082aa:	4b4d      	ldr	r3, [pc, #308]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b6:	d106      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082be:	d102      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80082c0:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
 80082c4:	e396      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80082c6:	4b46      	ldr	r3, [pc, #280]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d11b      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082d8:	d117      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082da:	4b41      	ldr	r3, [pc, #260]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80082e6:	4b3e      	ldr	r3, [pc, #248]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	0e1b      	lsrs	r3, r3, #24
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	e006      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80082f2:	4b3b      	ldr	r3, [pc, #236]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80082f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082f8:	041b      	lsls	r3, r3, #16
 80082fa:	0e1b      	lsrs	r3, r3, #24
 80082fc:	f003 030f 	and.w	r3, r3, #15
 8008300:	4a39      	ldr	r2, [pc, #228]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
 8008308:	e374      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
 800830e:	e371      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008314:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008318:	430b      	orrs	r3, r1
 800831a:	d16a      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800831c:	4b30      	ldr	r3, [pc, #192]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800831e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008326:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	2b00      	cmp	r3, #0
 800832c:	d120      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800832e:	4b2c      	ldr	r3, [pc, #176]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b20      	cmp	r3, #32
 8008338:	d117      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800833a:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8008346:	4b26      	ldr	r3, [pc, #152]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	0e1b      	lsrs	r3, r3, #24
 800834c:	f003 030f 	and.w	r3, r3, #15
 8008350:	e006      	b.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008352:	4b23      	ldr	r3, [pc, #140]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008354:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008358:	041b      	lsls	r3, r3, #16
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008366:	637b      	str	r3, [r7, #52]	; 0x34
 8008368:	e344      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
 800836e:	e341      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008370:	4b1b      	ldr	r3, [pc, #108]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800837e:	d112      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008386:	d10e      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008388:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800838a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800838e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008396:	d102      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8008398:	23fa      	movs	r3, #250	; 0xfa
 800839a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800839c:	e32a      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800839e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083a4:	e326      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80083a6:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b2:	d106      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ba:	d102      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80083be:	637b      	str	r3, [r7, #52]	; 0x34
 80083c0:	e318      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d10d      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d6:	d109      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80083d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
 80083de:	e309      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80083e0:	46020c00 	.word	0x46020c00
 80083e4:	00f42400 	.word	0x00f42400
 80083e8:	08015400 	.word	0x08015400
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
 80083f0:	e300      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80083f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f6:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80083fa:	430b      	orrs	r3, r1
 80083fc:	d164      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80083fe:	4ba2      	ldr	r3, [pc, #648]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008408:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	2b00      	cmp	r3, #0
 800840e:	d120      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008410:	4b9d      	ldr	r3, [pc, #628]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b20      	cmp	r3, #32
 800841a:	d117      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800841c:	4b9a      	ldr	r3, [pc, #616]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8008428:	4b97      	ldr	r3, [pc, #604]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	0e1b      	lsrs	r3, r3, #24
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	e006      	b.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8008434:	4b94      	ldr	r3, [pc, #592]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	0e1b      	lsrs	r3, r3, #24
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	4a92      	ldr	r2, [pc, #584]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008448:	637b      	str	r3, [r7, #52]	; 0x34
 800844a:	e2d3      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
 8008450:	e2d0      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008452:	4b8d      	ldr	r3, [pc, #564]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800845c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008460:	d112      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008468:	d10e      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800846a:	4b87      	ldr	r3, [pc, #540]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800846c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008478:	d102      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800847a:	23fa      	movs	r3, #250	; 0xfa
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800847e:	e2b9      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008480:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008486:	e2b5      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008488:	4b7f      	ldr	r3, [pc, #508]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008494:	d106      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849c:	d102      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800849e:	4b7c      	ldr	r3, [pc, #496]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
 80084a2:	e2a7      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80084a4:	4b78      	ldr	r3, [pc, #480]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d107      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084b8:	d103      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80084ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
 80084c0:	e298      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34
 80084c6:	e295      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80084c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084cc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80084d0:	430b      	orrs	r3, r1
 80084d2:	d147      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80084d4:	4b6c      	ldr	r3, [pc, #432]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084da:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80084de:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d103      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80084e6:	f7fd fdbf 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 80084ea:	6378      	str	r0, [r7, #52]	; 0x34
 80084ec:	e282      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80084ee:	4b66      	ldr	r3, [pc, #408]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80084f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084fc:	d112      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008504:	d10e      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008506:	4b60      	ldr	r3, [pc, #384]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800850c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008514:	d102      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8008516:	23fa      	movs	r3, #250	; 0xfa
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800851a:	e26b      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800851c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008522:	e267      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008524:	4b58      	ldr	r3, [pc, #352]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800852c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008530:	d106      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008538:	d102      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800853a:	4b55      	ldr	r3, [pc, #340]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
 800853e:	e259      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008540:	4b51      	ldr	r3, [pc, #324]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b02      	cmp	r3, #2
 800854c:	d107      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008554:	d103      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8008556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
 800855c:	e24a      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	637b      	str	r3, [r7, #52]	; 0x34
 8008562:	e247      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008568:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800856c:	430b      	orrs	r3, r1
 800856e:	d12d      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008570:	4b45      	ldr	r3, [pc, #276]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008576:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800857a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800857c:	4b42      	ldr	r3, [pc, #264]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008588:	d105      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008590:	4b3f      	ldr	r3, [pc, #252]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008592:	637b      	str	r3, [r7, #52]	; 0x34
 8008594:	e22e      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800859c:	d107      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800859e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fc1a 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
 80085ac:	e222      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b6:	f107 0318 	add.w	r3, r7, #24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fd76 	bl	80070ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
 80085c4:	e216      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
 80085ca:	e213      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80085cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80085d4:	430b      	orrs	r3, r1
 80085d6:	d15d      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80085d8:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80085da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80085e2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085ea:	d028      	beq.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085f2:	d845      	bhi.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085fa:	d013      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008602:	d83d      	bhi.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008610:	d004      	beq.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008612:	e035      	b.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008614:	f7fd fd3c 	bl	8006090 <HAL_RCC_GetPCLK2Freq>
 8008618:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800861a:	e1eb      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800861c:	f7fd fc02 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8008620:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008622:	e1e7      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008624:	4b18      	ldr	r3, [pc, #96]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008630:	d102      	bne.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008632:	4b17      	ldr	r3, [pc, #92]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008636:	e1dd      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800863c:	e1da      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b20      	cmp	r3, #32
 8008648:	d117      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800864a:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	0e1b      	lsrs	r3, r3, #24
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	e006      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	0e1b      	lsrs	r3, r3, #24
 800866c:	f003 030f 	and.w	r3, r3, #15
 8008670:	4a06      	ldr	r2, [pc, #24]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008676:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008678:	e1bc      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800867e:	e1b9      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008684:	e1b6      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008686:	bf00      	nop
 8008688:	46020c00 	.word	0x46020c00
 800868c:	08015400 	.word	0x08015400
 8008690:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008698:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800869c:	430b      	orrs	r3, r1
 800869e:	d156      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80086a0:	4ba5      	ldr	r3, [pc, #660]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80086a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086aa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086b2:	d028      	beq.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086ba:	d845      	bhi.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c2:	d013      	beq.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ca:	d83d      	bhi.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d8:	d004      	beq.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80086da:	e035      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80086dc:	f7fd fcc4 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 80086e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086e2:	e187      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80086e4:	f7fd fb9e 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 80086e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086ea:	e183      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086ec:	4b92      	ldr	r3, [pc, #584]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f8:	d102      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80086fa:	4b90      	ldr	r3, [pc, #576]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086fe:	e179      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008704:	e176      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008706:	4b8c      	ldr	r3, [pc, #560]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b20      	cmp	r3, #32
 8008710:	d117      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008712:	4b89      	ldr	r3, [pc, #548]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800871e:	4b86      	ldr	r3, [pc, #536]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	0e1b      	lsrs	r3, r3, #24
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	e006      	b.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800872a:	4b83      	ldr	r3, [pc, #524]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800872c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008730:	041b      	lsls	r3, r3, #16
 8008732:	0e1b      	lsrs	r3, r3, #24
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	4a81      	ldr	r2, [pc, #516]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800873a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800873e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008740:	e158      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008746:	e155      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800874c:	e152      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800874e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008752:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8008756:	430b      	orrs	r3, r1
 8008758:	d177      	bne.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800875a:	4b77      	ldr	r3, [pc, #476]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800875c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008760:	f003 0318 	and.w	r3, r3, #24
 8008764:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	2b18      	cmp	r3, #24
 800876a:	d86b      	bhi.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	080087d9 	.word	0x080087d9
 8008778:	08008845 	.word	0x08008845
 800877c:	08008845 	.word	0x08008845
 8008780:	08008845 	.word	0x08008845
 8008784:	08008845 	.word	0x08008845
 8008788:	08008845 	.word	0x08008845
 800878c:	08008845 	.word	0x08008845
 8008790:	08008845 	.word	0x08008845
 8008794:	080087e1 	.word	0x080087e1
 8008798:	08008845 	.word	0x08008845
 800879c:	08008845 	.word	0x08008845
 80087a0:	08008845 	.word	0x08008845
 80087a4:	08008845 	.word	0x08008845
 80087a8:	08008845 	.word	0x08008845
 80087ac:	08008845 	.word	0x08008845
 80087b0:	08008845 	.word	0x08008845
 80087b4:	080087e9 	.word	0x080087e9
 80087b8:	08008845 	.word	0x08008845
 80087bc:	08008845 	.word	0x08008845
 80087c0:	08008845 	.word	0x08008845
 80087c4:	08008845 	.word	0x08008845
 80087c8:	08008845 	.word	0x08008845
 80087cc:	08008845 	.word	0x08008845
 80087d0:	08008845 	.word	0x08008845
 80087d4:	08008803 	.word	0x08008803
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80087d8:	f7fd fc6e 	bl	80060b8 <HAL_RCC_GetPCLK3Freq>
 80087dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80087de:	e109      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80087e0:	f7fd fb20 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 80087e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80087e6:	e105      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087e8:	4b53      	ldr	r3, [pc, #332]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f4:	d102      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80087f6:	4b51      	ldr	r3, [pc, #324]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087fa:	e0fb      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008800:	e0f8      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008802:	4b4d      	ldr	r3, [pc, #308]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b20      	cmp	r3, #32
 800880c:	d117      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800880e:	4b4a      	ldr	r3, [pc, #296]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800881a:	4b47      	ldr	r3, [pc, #284]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	0e1b      	lsrs	r3, r3, #24
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	e006      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008826:	4b44      	ldr	r3, [pc, #272]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800882c:	041b      	lsls	r3, r3, #16
 800882e:	0e1b      	lsrs	r3, r3, #24
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	4a42      	ldr	r2, [pc, #264]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800883a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800883c:	e0da      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008842:	e0d7      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008848:	e0d4      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800884a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008852:	430b      	orrs	r3, r1
 8008854:	d155      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008856:	4b38      	ldr	r3, [pc, #224]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800885c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008860:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008868:	d013      	beq.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008870:	d844      	bhi.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008878:	d013      	beq.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008880:	d83c      	bhi.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	2b00      	cmp	r3, #0
 8008886:	d014      	beq.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800888e:	d014      	beq.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008890:	e034      	b.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008892:	f107 0318 	add.w	r3, r7, #24
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fc08 	bl	80070ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088a0:	e0a8      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fa98 	bl	8006ddc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088b0:	e0a0      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80088b2:	f7fd fab7 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 80088b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80088b8:	e09c      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088ba:	4b1f      	ldr	r3, [pc, #124]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d117      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088c6:	4b1c      	ldr	r3, [pc, #112]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 80088d2:	4b19      	ldr	r3, [pc, #100]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	0e1b      	lsrs	r3, r3, #24
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	e006      	b.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80088de:	4b16      	ldr	r3, [pc, #88]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80088e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	0e1b      	lsrs	r3, r3, #24
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	4a14      	ldr	r2, [pc, #80]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80088ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088f4:	e07e      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088fa:	e07b      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008900:	e078      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008906:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800890a:	430b      	orrs	r3, r1
 800890c:	d138      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800890e:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008918:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800891a:	4b07      	ldr	r3, [pc, #28]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800891c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b02      	cmp	r3, #2
 8008926:	d10d      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800892e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008932:	637b      	str	r3, [r7, #52]	; 0x34
 8008934:	e05e      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008936:	bf00      	nop
 8008938:	46020c00 	.word	0x46020c00
 800893c:	00f42400 	.word	0x00f42400
 8008940:	08015400 	.word	0x08015400
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008944:	4b2e      	ldr	r3, [pc, #184]	; (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800894a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800894e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008952:	d112      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800895a:	d10e      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800895c:	4b28      	ldr	r3, [pc, #160]	; (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800895e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800896a:	d102      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800896c:	23fa      	movs	r3, #250	; 0xfa
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008970:	e040      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008972:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008978:	e03c      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
 800897e:	e039      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008988:	430b      	orrs	r3, r1
 800898a:	d131      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800898c:	4b1c      	ldr	r3, [pc, #112]	; (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800898e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008992:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008996:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008998:	4b19      	ldr	r3, [pc, #100]	; (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a4:	d105      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 80089ac:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80089ae:	637b      	str	r3, [r7, #52]	; 0x34
 80089b0:	e020      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80089b2:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089be:	d106      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c6:	d102      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80089ca:	637b      	str	r3, [r7, #52]	; 0x34
 80089cc:	e012      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089da:	d106      	bne.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089e2:	d102      	bne.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80089e4:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80089e6:	637b      	str	r3, [r7, #52]	; 0x34
 80089e8:	e004      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
 80089ee:	e001      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3738      	adds	r7, #56	; 0x38
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	46020c00 	.word	0x46020c00
 8008a04:	02dc6c00 	.word	0x02dc6c00
 8008a08:	016e3600 	.word	0x016e3600
 8008a0c:	00f42400 	.word	0x00f42400

08008a10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008a18:	4b47      	ldr	r3, [pc, #284]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a46      	ldr	r2, [pc, #280]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008a1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a24:	f7f8 ff52 	bl	80018cc <HAL_GetTick>
 8008a28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a2a:	e008      	b.n	8008a3e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a2c:	f7f8 ff4e 	bl	80018cc <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d901      	bls.n	8008a3e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e077      	b.n	8008b2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a3e:	4b3e      	ldr	r3, [pc, #248]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1f0      	bne.n	8008a2c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008a4a:	4b3b      	ldr	r3, [pc, #236]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6811      	ldr	r1, [r2, #0]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6852      	ldr	r2, [r2, #4]
 8008a5e:	3a01      	subs	r2, #1
 8008a60:	0212      	lsls	r2, r2, #8
 8008a62:	430a      	orrs	r2, r1
 8008a64:	4934      	ldr	r1, [pc, #208]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008a6a:	4b33      	ldr	r3, [pc, #204]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a6e:	4b33      	ldr	r3, [pc, #204]	; (8008b3c <RCCEx_PLL2_Config+0x12c>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6892      	ldr	r2, [r2, #8]
 8008a76:	3a01      	subs	r2, #1
 8008a78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68d2      	ldr	r2, [r2, #12]
 8008a80:	3a01      	subs	r2, #1
 8008a82:	0252      	lsls	r2, r2, #9
 8008a84:	b292      	uxth	r2, r2
 8008a86:	4311      	orrs	r1, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6912      	ldr	r2, [r2, #16]
 8008a8c:	3a01      	subs	r2, #1
 8008a8e:	0412      	lsls	r2, r2, #16
 8008a90:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008a94:	4311      	orrs	r1, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6952      	ldr	r2, [r2, #20]
 8008a9a:	3a01      	subs	r2, #1
 8008a9c:	0612      	lsls	r2, r2, #24
 8008a9e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	4924      	ldr	r1, [pc, #144]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008aaa:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	f023 020c 	bic.w	r2, r3, #12
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	4920      	ldr	r1, [pc, #128]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	491c      	ldr	r1, [pc, #112]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008aca:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	4a1a      	ldr	r2, [pc, #104]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008ad0:	f023 0310 	bic.w	r3, r3, #16
 8008ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ad6:	4b18      	ldr	r3, [pc, #96]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ade:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	69d2      	ldr	r2, [r2, #28]
 8008ae6:	00d2      	lsls	r2, r2, #3
 8008ae8:	4913      	ldr	r1, [pc, #76]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008aee:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	4a11      	ldr	r2, [pc, #68]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008af4:	f043 0310 	orr.w	r3, r3, #16
 8008af8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a0e      	ldr	r2, [pc, #56]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008b00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b06:	f7f8 fee1 	bl	80018cc <HAL_GetTick>
 8008b0a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b0c:	e008      	b.n	8008b20 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b0e:	f7f8 fedd 	bl	80018cc <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e006      	b.n	8008b2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b20:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <RCCEx_PLL2_Config+0x128>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0f0      	beq.n	8008b0e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0

}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	46020c00 	.word	0x46020c00
 8008b3c:	80800000 	.word	0x80800000

08008b40 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008b48:	4b47      	ldr	r3, [pc, #284]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a46      	ldr	r2, [pc, #280]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b54:	f7f8 feba 	bl	80018cc <HAL_GetTick>
 8008b58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b5a:	e008      	b.n	8008b6e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b5c:	f7f8 feb6 	bl	80018cc <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d901      	bls.n	8008b6e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e077      	b.n	8008c5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b6e:	4b3e      	ldr	r3, [pc, #248]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f0      	bne.n	8008b5c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008b7a:	4b3b      	ldr	r3, [pc, #236]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b82:	f023 0303 	bic.w	r3, r3, #3
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6811      	ldr	r1, [r2, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6852      	ldr	r2, [r2, #4]
 8008b8e:	3a01      	subs	r2, #1
 8008b90:	0212      	lsls	r2, r2, #8
 8008b92:	430a      	orrs	r2, r1
 8008b94:	4934      	ldr	r1, [pc, #208]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	630b      	str	r3, [r1, #48]	; 0x30
 8008b9a:	4b33      	ldr	r3, [pc, #204]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b9e:	4b33      	ldr	r3, [pc, #204]	; (8008c6c <RCCEx_PLL3_Config+0x12c>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6892      	ldr	r2, [r2, #8]
 8008ba6:	3a01      	subs	r2, #1
 8008ba8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	68d2      	ldr	r2, [r2, #12]
 8008bb0:	3a01      	subs	r2, #1
 8008bb2:	0252      	lsls	r2, r2, #9
 8008bb4:	b292      	uxth	r2, r2
 8008bb6:	4311      	orrs	r1, r2
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6912      	ldr	r2, [r2, #16]
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	0412      	lsls	r2, r2, #16
 8008bc0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008bc4:	4311      	orrs	r1, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6952      	ldr	r2, [r2, #20]
 8008bca:	3a01      	subs	r2, #1
 8008bcc:	0612      	lsls	r2, r2, #24
 8008bce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	4924      	ldr	r1, [pc, #144]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008bda:	4b23      	ldr	r3, [pc, #140]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	f023 020c 	bic.w	r2, r3, #12
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	4920      	ldr	r1, [pc, #128]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008bec:	4b1e      	ldr	r3, [pc, #120]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	491c      	ldr	r1, [pc, #112]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008bfa:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	4a1a      	ldr	r2, [pc, #104]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c00:	f023 0310 	bic.w	r3, r3, #16
 8008c04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	69d2      	ldr	r2, [r2, #28]
 8008c16:	00d2      	lsls	r2, r2, #3
 8008c18:	4913      	ldr	r1, [pc, #76]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	4a11      	ldr	r2, [pc, #68]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c24:	f043 0310 	orr.w	r3, r3, #16
 8008c28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a0e      	ldr	r2, [pc, #56]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c34:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c36:	f7f8 fe49 	bl	80018cc <HAL_GetTick>
 8008c3a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c3c:	e008      	b.n	8008c50 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c3e:	f7f8 fe45 	bl	80018cc <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d901      	bls.n	8008c50 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e006      	b.n	8008c5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <RCCEx_PLL3_Config+0x128>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0f0      	beq.n	8008c3e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	46020c00 	.word	0x46020c00
 8008c6c:	80800000 	.word	0x80800000

08008c70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d071      	beq.n	8008d66 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7f8 fb5c 	bl	8001354 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ca4:	4b32      	ldr	r3, [pc, #200]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	d051      	beq.n	8008d54 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cb0:	4b2f      	ldr	r3, [pc, #188]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008cb2:	22ca      	movs	r2, #202	; 0xca
 8008cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8008cb6:	4b2e      	ldr	r3, [pc, #184]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008cb8:	2253      	movs	r2, #83	; 0x53
 8008cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fa6d 	bl	800919c <RTC_EnterInitMode>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d13f      	bne.n	8008d4c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008ccc:	4b28      	ldr	r3, [pc, #160]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008cd2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cda:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008cdc:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008cde:	699a      	ldr	r2, [r3, #24]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6859      	ldr	r1, [r3, #4]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	4319      	orrs	r1, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	430b      	orrs	r3, r1
 8008cf0:	491f      	ldr	r1, [pc, #124]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	491b      	ldr	r1, [pc, #108]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008d06:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d16:	430b      	orrs	r3, r1
 8008d18:	4915      	ldr	r1, [pc, #84]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa78 	bl	8009214 <RTC_ExitInitMode>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10e      	bne.n	8008d4c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008d2e:	4b10      	ldr	r3, [pc, #64]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a19      	ldr	r1, [r3, #32]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	4319      	orrs	r1, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	430b      	orrs	r3, r1
 8008d46:	490a      	ldr	r1, [pc, #40]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d4c:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <HAL_RTC_Init+0x100>)
 8008d4e:	22ff      	movs	r2, #255	; 0xff
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24
 8008d52:	e001      	b.n	8008d58 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	46007800 	.word	0x46007800

08008d74 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d74:	b590      	push	{r4, r7, lr}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <HAL_RTC_SetTime+0x1a>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e088      	b.n	8008ea0 <HAL_RTC_SetTime+0x12c>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d9e:	4b42      	ldr	r3, [pc, #264]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008da0:	22ca      	movs	r2, #202	; 0xca
 8008da2:	625a      	str	r2, [r3, #36]	; 0x24
 8008da4:	4b40      	ldr	r3, [pc, #256]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008da6:	2253      	movs	r2, #83	; 0x53
 8008da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 f9f6 	bl	800919c <RTC_EnterInitMode>
 8008db0:	4603      	mov	r3, r0
 8008db2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008db4:	7cfb      	ldrb	r3, [r7, #19]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d163      	bne.n	8008e82 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008dba:	4b3b      	ldr	r3, [pc, #236]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc6:	d057      	beq.n	8008e78 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d125      	bne.n	8008e1a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008dce:	4b36      	ldr	r3, [pc, #216]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 fa53 	bl	8009290 <RTC_ByteToBcd2>
 8008dea:	4603      	mov	r3, r0
 8008dec:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fa4c 	bl	8009290 <RTC_ByteToBcd2>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008dfc:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	789b      	ldrb	r3, [r3, #2]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fa44 	bl	8009290 <RTC_ByteToBcd2>
 8008e08:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e0a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	78db      	ldrb	r3, [r3, #3]
 8008e12:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e14:	4313      	orrs	r3, r2
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e017      	b.n	8008e4a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008e1a:	4b23      	ldr	r3, [pc, #140]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d102      	bne.n	8008e2c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e38:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e3e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	78db      	ldrb	r3, [r3, #3]
 8008e44:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008e4a:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008e52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008e56:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008e58:	4b13      	ldr	r3, [pc, #76]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	4a12      	ldr	r2, [pc, #72]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e62:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008e64:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008e66:	699a      	ldr	r2, [r3, #24]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	68d9      	ldr	r1, [r3, #12]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	430b      	orrs	r3, r1
 8008e72:	490d      	ldr	r1, [pc, #52]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f9cb 	bl	8009214 <RTC_ExitInitMode>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e82:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <HAL_RTC_SetTime+0x134>)
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008e88:	7cfb      	ldrb	r3, [r7, #19]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d103      	bne.n	8008e96 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8008e9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd90      	pop	{r4, r7, pc}
 8008ea8:	46007800 	.word	0x46007800

08008eac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8008eb8:	4b34      	ldr	r3, [pc, #208]	; (8008f8c <HAL_RTC_GetTime+0xe0>)
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008ec0:	4b32      	ldr	r3, [pc, #200]	; (8008f8c <HAL_RTC_GetTime+0xe0>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ecc:	d04a      	beq.n	8008f64 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8008ece:	4b2f      	ldr	r3, [pc, #188]	; (8008f8c <HAL_RTC_GetTime+0xe0>)
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8008eda:	4b2c      	ldr	r3, [pc, #176]	; (8008f8c <HAL_RTC_GetTime+0xe0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ee2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008ee6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	0d9b      	lsrs	r3, r3, #22
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d12a      	bne.n	8008f82 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f9cd 	bl	80092d0 <RTC_Bcd2ToByte>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	785b      	ldrb	r3, [r3, #1]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f9c4 	bl	80092d0 <RTC_Bcd2ToByte>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	789b      	ldrb	r3, [r3, #2]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f9bb 	bl	80092d0 <RTC_Bcd2ToByte>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	709a      	strb	r2, [r3, #2]
 8008f62:	e00e      	b.n	8008f82 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2200      	movs	r2, #0
 8008f68:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	46007800 	.word	0x46007800

08008f90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d101      	bne.n	8008faa <HAL_RTC_SetDate+0x1a>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e071      	b.n	800908e <HAL_RTC_SetDate+0xfe>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10e      	bne.n	8008fde <HAL_RTC_SetDate+0x4e>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	f003 0310 	and.w	r3, r3, #16
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	785b      	ldrb	r3, [r3, #1]
 8008fd0:	f023 0310 	bic.w	r3, r3, #16
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	330a      	adds	r3, #10
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d11c      	bne.n	800901e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	78db      	ldrb	r3, [r3, #3]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f951 	bl	8009290 <RTC_ByteToBcd2>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f94a 	bl	8009290 <RTC_ByteToBcd2>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009000:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	789b      	ldrb	r3, [r3, #2]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f942 	bl	8009290 <RTC_ByteToBcd2>
 800900c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800900e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009018:	4313      	orrs	r3, r2
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	e00e      	b.n	800903c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	78db      	ldrb	r3, [r3, #3]
 8009022:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	785b      	ldrb	r3, [r3, #1]
 8009028:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800902a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009030:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009038:	4313      	orrs	r3, r2
 800903a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800903c:	4b16      	ldr	r3, [pc, #88]	; (8009098 <HAL_RTC_SetDate+0x108>)
 800903e:	22ca      	movs	r2, #202	; 0xca
 8009040:	625a      	str	r2, [r3, #36]	; 0x24
 8009042:	4b15      	ldr	r3, [pc, #84]	; (8009098 <HAL_RTC_SetDate+0x108>)
 8009044:	2253      	movs	r2, #83	; 0x53
 8009046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f8a7 	bl	800919c <RTC_EnterInitMode>
 800904e:	4603      	mov	r3, r0
 8009050:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009052:	7cfb      	ldrb	r3, [r7, #19]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009058:	4a0f      	ldr	r2, [pc, #60]	; (8009098 <HAL_RTC_SetDate+0x108>)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009060:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009064:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 f8d4 	bl	8009214 <RTC_ExitInitMode>
 800906c:	4603      	mov	r3, r0
 800906e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009070:	4b09      	ldr	r3, [pc, #36]	; (8009098 <HAL_RTC_SetDate+0x108>)
 8009072:	22ff      	movs	r2, #255	; 0xff
 8009074:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009076:	7cfb      	ldrb	r3, [r7, #19]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d103      	bne.n	8009084 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800908c:	7cfb      	ldrb	r3, [r7, #19]
}
 800908e:	4618      	mov	r0, r3
 8009090:	371c      	adds	r7, #28
 8009092:	46bd      	mov	sp, r7
 8009094:	bd90      	pop	{r4, r7, pc}
 8009096:	bf00      	nop
 8009098:	46007800 	.word	0x46007800

0800909c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80090a8:	4b22      	ldr	r3, [pc, #136]	; (8009134 <HAL_RTC_GetDate+0x98>)
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	0c1b      	lsrs	r3, r3, #16
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	0b5b      	lsrs	r3, r3, #13
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d11a      	bne.n	800912a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	78db      	ldrb	r3, [r3, #3]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 f8e9 	bl	80092d0 <RTC_Bcd2ToByte>
 80090fe:	4603      	mov	r3, r0
 8009100:	461a      	mov	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f8e0 	bl	80092d0 <RTC_Bcd2ToByte>
 8009110:	4603      	mov	r3, r0
 8009112:	461a      	mov	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	789b      	ldrb	r3, [r3, #2]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 f8d7 	bl	80092d0 <RTC_Bcd2ToByte>
 8009122:	4603      	mov	r3, r0
 8009124:	461a      	mov	r2, r3
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	46007800 	.word	0x46007800

08009138 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009140:	4b15      	ldr	r3, [pc, #84]	; (8009198 <HAL_RTC_WaitForSynchro+0x60>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	4a14      	ldr	r2, [pc, #80]	; (8009198 <HAL_RTC_WaitForSynchro+0x60>)
 8009146:	f023 0320 	bic.w	r3, r3, #32
 800914a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800914c:	f7f8 fbbe 	bl	80018cc <HAL_GetTick>
 8009150:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009152:	e013      	b.n	800917c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009154:	f7f8 fbba 	bl	80018cc <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009162:	d90b      	bls.n	800917c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <HAL_RTC_WaitForSynchro+0x60>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10c      	bne.n	800918a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2203      	movs	r2, #3
 8009174:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e008      	b.n	800918e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800917c:	4b06      	ldr	r3, [pc, #24]	; (8009198 <HAL_RTC_WaitForSynchro+0x60>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f003 0320 	and.w	r3, r3, #32
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0e5      	beq.n	8009154 <HAL_RTC_WaitForSynchro+0x1c>
 8009188:	e000      	b.n	800918c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800918a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	46007800 	.word	0x46007800

0800919c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80091a8:	4b19      	ldr	r3, [pc, #100]	; (8009210 <RTC_EnterInitMode+0x74>)
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d128      	bne.n	8009206 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80091b4:	4b16      	ldr	r3, [pc, #88]	; (8009210 <RTC_EnterInitMode+0x74>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4a15      	ldr	r2, [pc, #84]	; (8009210 <RTC_EnterInitMode+0x74>)
 80091ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091be:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80091c0:	f7f8 fb84 	bl	80018cc <HAL_GetTick>
 80091c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80091c6:	e013      	b.n	80091f0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80091c8:	f7f8 fb80 	bl	80018cc <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091d6:	d90b      	bls.n	80091f0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80091d8:	4b0d      	ldr	r3, [pc, #52]	; (8009210 <RTC_EnterInitMode+0x74>)
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10f      	bne.n	8009204 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2203      	movs	r2, #3
 80091ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <RTC_EnterInitMode+0x74>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <RTC_EnterInitMode+0x6a>
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d1e2      	bne.n	80091c8 <RTC_EnterInitMode+0x2c>
 8009202:	e000      	b.n	8009206 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8009204:	bf00      	nop
        }
      }
    }
  }

  return status;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	46007800 	.word	0x46007800

08009214 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009220:	4b1a      	ldr	r3, [pc, #104]	; (800928c <RTC_ExitInitMode+0x78>)
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	4a19      	ldr	r2, [pc, #100]	; (800928c <RTC_ExitInitMode+0x78>)
 8009226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800922a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800922c:	4b17      	ldr	r3, [pc, #92]	; (800928c <RTC_ExitInitMode+0x78>)
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10c      	bne.n	8009252 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff ff7d 	bl	8009138 <HAL_RTC_WaitForSynchro>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01e      	beq.n	8009282 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2203      	movs	r2, #3
 8009248:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	73fb      	strb	r3, [r7, #15]
 8009250:	e017      	b.n	8009282 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009252:	4b0e      	ldr	r3, [pc, #56]	; (800928c <RTC_ExitInitMode+0x78>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	4a0d      	ldr	r2, [pc, #52]	; (800928c <RTC_ExitInitMode+0x78>)
 8009258:	f023 0320 	bic.w	r3, r3, #32
 800925c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff ff6a 	bl	8009138 <HAL_RTC_WaitForSynchro>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d005      	beq.n	8009276 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2203      	movs	r2, #3
 800926e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009276:	4b05      	ldr	r3, [pc, #20]	; (800928c <RTC_ExitInitMode+0x78>)
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	4a04      	ldr	r2, [pc, #16]	; (800928c <RTC_ExitInitMode+0x78>)
 800927c:	f043 0320 	orr.w	r3, r3, #32
 8009280:	6193      	str	r3, [r2, #24]
  }
  return status;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	46007800 	.word	0x46007800

08009290 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80092a2:	e005      	b.n	80092b0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80092aa:	7afb      	ldrb	r3, [r7, #11]
 80092ac:	3b0a      	subs	r3, #10
 80092ae:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	2b09      	cmp	r3, #9
 80092b4:	d8f6      	bhi.n	80092a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	7afb      	ldrb	r3, [r7, #11]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	b2db      	uxtb	r3, r3
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	4413      	add	r3, r2
 80092fa:	b2db      	uxtb	r3, r3
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009320:	2302      	movs	r3, #2
 8009322:	e063      	b.n	80093ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009334:	4b2f      	ldr	r3, [pc, #188]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009336:	22ca      	movs	r2, #202	; 0xca
 8009338:	625a      	str	r2, [r3, #36]	; 0x24
 800933a:	4b2e      	ldr	r3, [pc, #184]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800933c:	2253      	movs	r2, #83	; 0x53
 800933e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009340:	4b2c      	ldr	r3, [pc, #176]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	4a2b      	ldr	r2, [pc, #172]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800934a:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800934c:	4b29      	ldr	r3, [pc, #164]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800934e:	2204      	movs	r2, #4
 8009350:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009352:	4b28      	ldr	r3, [pc, #160]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935a:	2b00      	cmp	r3, #0
 800935c:	d126      	bne.n	80093ac <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 800935e:	f7f8 fab5 	bl	80018cc <HAL_GetTick>
 8009362:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009364:	e01a      	b.n	800939c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009366:	f7f8 fab1 	bl	80018cc <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009374:	d912      	bls.n	800939c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009376:	4b1f      	ldr	r3, [pc, #124]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	d113      	bne.n	80093aa <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009382:	4b1c      	ldr	r3, [pc, #112]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8009384:	22ff      	movs	r2, #255	; 0xff
 8009386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2203      	movs	r2, #3
 800938c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e027      	b.n	80093ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800939c:	4b15      	ldr	r3, [pc, #84]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0304 	and.w	r3, r3, #4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0de      	beq.n	8009366 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 80093a8:	e000      	b.n	80093ac <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 80093aa:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	041a      	lsls	r2, r3, #16
 80093b0:	4910      	ldr	r1, [pc, #64]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80093b8:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	f023 0207 	bic.w	r2, r3, #7
 80093c0:	490c      	ldr	r1, [pc, #48]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093ce:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80093d2:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d4:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80093d6:	22ff      	movs	r2, #255	; 0xff
 80093d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	46007800 	.word	0x46007800

080093f8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800940a:	2302      	movs	r3, #2
 800940c:	e046      	b.n	800949c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2202      	movs	r2, #2
 800941a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800941e:	4b21      	ldr	r3, [pc, #132]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009420:	22ca      	movs	r2, #202	; 0xca
 8009422:	625a      	str	r2, [r3, #36]	; 0x24
 8009424:	4b1f      	ldr	r3, [pc, #124]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009426:	2253      	movs	r2, #83	; 0x53
 8009428:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800942a:	4b1e      	ldr	r3, [pc, #120]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	4a1d      	ldr	r2, [pc, #116]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009430:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8009434:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 8009436:	f7f8 fa49 	bl	80018cc <HAL_GetTick>
 800943a:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800943c:	e01a      	b.n	8009474 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800943e:	f7f8 fa45 	bl	80018cc <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800944c:	d912      	bls.n	8009474 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b00      	cmp	r3, #0
 8009458:	d113      	bne.n	8009482 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800945a:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2203      	movs	r2, #3
 8009464:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e013      	b.n	800949c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009474:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0de      	beq.n	800943e <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
 8009480:	e000      	b.n	8009484 <HAL_RTCEx_DeactivateWakeUpTimer+0x8c>
      }
      else
      {
        break;
 8009482:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xac>)
 8009486:	22ff      	movs	r2, #255	; 0xff
 8009488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	46007800 	.word	0x46007800

080094a8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80094b0:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80094b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80094bc:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80094be:	2204      	movs	r2, #4
 80094c0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7f7 fe80 	bl	80011c8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	46007800 	.word	0x46007800

080094dc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	4910      	ldr	r1, [pc, #64]	; (8009530 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	431a      	orrs	r2, r3
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	490c      	ldr	r1, [pc, #48]	; (8009534 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009504:	4313      	orrs	r3, r2
 8009506:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	6919      	ldr	r1, [r3, #16]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	041b      	lsls	r3, r3, #16
 800951a:	430b      	orrs	r3, r1
 800951c:	4905      	ldr	r1, [pc, #20]	; (8009534 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800951e:	4313      	orrs	r3, r2
 8009520:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	46007800 	.word	0x46007800
 8009534:	46007c00 	.word	0x46007c00

08009538 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e0fb      	b.n	8009742 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a7f      	ldr	r2, [pc, #508]	; (800974c <HAL_SPI_Init+0x214>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_SPI_Init+0x26>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a7d      	ldr	r2, [pc, #500]	; (8009750 <HAL_SPI_Init+0x218>)
 800955a:	4293      	cmp	r3, r2
 800955c:	e000      	b.n	8009560 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800955e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a78      	ldr	r2, [pc, #480]	; (800974c <HAL_SPI_Init+0x214>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d004      	beq.n	800957a <HAL_SPI_Init+0x42>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a76      	ldr	r2, [pc, #472]	; (8009750 <HAL_SPI_Init+0x218>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d105      	bne.n	8009586 <HAL_SPI_Init+0x4e>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	2b0f      	cmp	r3, #15
 8009580:	d901      	bls.n	8009586 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e0dd      	b.n	8009742 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fbd8 	bl	8009d3c <SPI_GetPacketSize>
 800958c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a6e      	ldr	r2, [pc, #440]	; (800974c <HAL_SPI_Init+0x214>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d004      	beq.n	80095a2 <HAL_SPI_Init+0x6a>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a6c      	ldr	r2, [pc, #432]	; (8009750 <HAL_SPI_Init+0x218>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d102      	bne.n	80095a8 <HAL_SPI_Init+0x70>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d816      	bhi.n	80095d6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095ac:	4a69      	ldr	r2, [pc, #420]	; (8009754 <HAL_SPI_Init+0x21c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00e      	beq.n	80095d0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a68      	ldr	r2, [pc, #416]	; (8009758 <HAL_SPI_Init+0x220>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d009      	beq.n	80095d0 <HAL_SPI_Init+0x98>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a66      	ldr	r2, [pc, #408]	; (800975c <HAL_SPI_Init+0x224>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d004      	beq.n	80095d0 <HAL_SPI_Init+0x98>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a65      	ldr	r2, [pc, #404]	; (8009760 <HAL_SPI_Init+0x228>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d104      	bne.n	80095da <HAL_SPI_Init+0xa2>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d901      	bls.n	80095da <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e0b3      	b.n	8009742 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d106      	bne.n	80095f4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7f7 fefc 	bl	80013ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 0201 	bic.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009616:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009620:	d119      	bne.n	8009656 <HAL_SPI_Init+0x11e>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800962a:	d103      	bne.n	8009634 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009630:	2b00      	cmp	r3, #0
 8009632:	d008      	beq.n	8009646 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10c      	bne.n	8009656 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009644:	d107      	bne.n	8009656 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009654:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00f      	beq.n	8009682 <HAL_SPI_Init+0x14a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b06      	cmp	r3, #6
 8009668:	d90b      	bls.n	8009682 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e007      	b.n	8009692 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009690:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	69da      	ldr	r2, [r3, #28]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	431a      	orrs	r2, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	431a      	orrs	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a4:	ea42 0103 	orr.w	r1, r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	431a      	orrs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	431a      	orrs	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	431a      	orrs	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096fe:	ea42 0103 	orr.w	r1, r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	430a      	orrs	r2, r1
 800972e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	46002000 	.word	0x46002000
 8009750:	56002000 	.word	0x56002000
 8009754:	40013000 	.word	0x40013000
 8009758:	50013000 	.word	0x50013000
 800975c:	40003800 	.word	0x40003800
 8009760:	50003800 	.word	0x50003800

08009764 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08a      	sub	sp, #40	; 0x28
 8009768:	af02      	add	r7, sp, #8
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3320      	adds	r3, #32
 800977a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_SPI_Transmit+0x2a>
 800978a:	2302      	movs	r3, #2
 800978c:	e203      	b.n	8009b96 <HAL_SPI_Transmit+0x432>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009796:	f7f8 f899 	bl	80018cc <HAL_GetTick>
 800979a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d007      	beq.n	80097b8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80097a8:	2302      	movs	r3, #2
 80097aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80097b4:	7efb      	ldrb	r3, [r7, #27]
 80097b6:	e1ee      	b.n	8009b96 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <HAL_SPI_Transmit+0x60>
 80097be:	88fb      	ldrh	r3, [r7, #6]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d107      	bne.n	80097d4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80097d0:	7efb      	ldrb	r3, [r7, #27]
 80097d2:	e1e0      	b.n	8009b96 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2203      	movs	r2, #3
 80097d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	88fa      	ldrh	r2, [r7, #6]
 80097ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	88fa      	ldrh	r2, [r7, #6]
 80097f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009824:	d108      	bne.n	8009838 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	e009      	b.n	800984c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800984a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	0c1b      	lsrs	r3, r3, #16
 8009854:	041b      	lsls	r3, r3, #16
 8009856:	88f9      	ldrh	r1, [r7, #6]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	6812      	ldr	r2, [r2, #0]
 800985c:	430b      	orrs	r3, r1
 800985e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0201 	orr.w	r2, r2, #1
 800986e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10c      	bne.n	8009898 <HAL_SPI_Transmit+0x134>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009886:	d107      	bne.n	8009898 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009896:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b0f      	cmp	r3, #15
 800989e:	d95b      	bls.n	8009958 <HAL_SPI_Transmit+0x1f4>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a8f      	ldr	r2, [pc, #572]	; (8009ae4 <HAL_SPI_Transmit+0x380>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d04f      	beq.n	800994a <HAL_SPI_Transmit+0x1e6>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a8e      	ldr	r2, [pc, #568]	; (8009ae8 <HAL_SPI_Transmit+0x384>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d04a      	beq.n	800994a <HAL_SPI_Transmit+0x1e6>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a8c      	ldr	r2, [pc, #560]	; (8009aec <HAL_SPI_Transmit+0x388>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d045      	beq.n	800994a <HAL_SPI_Transmit+0x1e6>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a8b      	ldr	r2, [pc, #556]	; (8009af0 <HAL_SPI_Transmit+0x38c>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d147      	bne.n	8009958 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80098c8:	e03f      	b.n	800994a <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d114      	bne.n	8009902 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6812      	ldr	r2, [r2, #0]
 80098e2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e8:	1d1a      	adds	r2, r3, #4
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009900:	e023      	b.n	800994a <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009902:	f7f7 ffe3 	bl	80018cc <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d803      	bhi.n	800991a <HAL_SPI_Transmit+0x1b6>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009918:	d102      	bne.n	8009920 <HAL_SPI_Transmit+0x1bc>
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d114      	bne.n	800994a <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f93d 	bl	8009ba0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e125      	b.n	8009b96 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1b9      	bne.n	80098ca <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009956:	e0f8      	b.n	8009b4a <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	2b07      	cmp	r3, #7
 800995e:	f240 80ed 	bls.w	8009b3c <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009962:	e05d      	b.n	8009a20 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b02      	cmp	r3, #2
 8009970:	d132      	bne.n	80099d8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b01      	cmp	r3, #1
 800997c:	d918      	bls.n	80099b0 <HAL_SPI_Transmit+0x24c>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d014      	beq.n	80099b0 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009996:	1d1a      	adds	r2, r3, #4
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	3b02      	subs	r3, #2
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80099ae:	e037      	b.n	8009a20 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b4:	881a      	ldrh	r2, [r3, #0]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099be:	1c9a      	adds	r2, r3, #2
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80099d6:	e023      	b.n	8009a20 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099d8:	f7f7 ff78 	bl	80018cc <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d803      	bhi.n	80099f0 <HAL_SPI_Transmit+0x28c>
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d102      	bne.n	80099f6 <HAL_SPI_Transmit+0x292>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d114      	bne.n	8009a20 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f8d2 	bl	8009ba0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e0ba      	b.n	8009b96 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d19b      	bne.n	8009964 <HAL_SPI_Transmit+0x200>
 8009a2c:	e08d      	b.n	8009b4a <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	f003 0302 	and.w	r3, r3, #2
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d15b      	bne.n	8009af4 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d918      	bls.n	8009a7a <HAL_SPI_Transmit+0x316>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	d914      	bls.n	8009a7a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6812      	ldr	r2, [r2, #0]
 8009a5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a60:	1d1a      	adds	r2, r3, #4
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	3b04      	subs	r3, #4
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009a78:	e060      	b.n	8009b3c <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d917      	bls.n	8009ab6 <HAL_SPI_Transmit+0x352>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d013      	beq.n	8009ab6 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a92:	881a      	ldrh	r2, [r3, #0]
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a9c:	1c9a      	adds	r2, r3, #2
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b02      	subs	r3, #2
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ab4:	e042      	b.n	8009b3c <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3320      	adds	r3, #32
 8009ac0:	7812      	ldrb	r2, [r2, #0]
 8009ac2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ae0:	e02c      	b.n	8009b3c <HAL_SPI_Transmit+0x3d8>
 8009ae2:	bf00      	nop
 8009ae4:	40013000 	.word	0x40013000
 8009ae8:	50013000 	.word	0x50013000
 8009aec:	40003800 	.word	0x40003800
 8009af0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009af4:	f7f7 feea 	bl	80018cc <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d803      	bhi.n	8009b0c <HAL_SPI_Transmit+0x3a8>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0a:	d102      	bne.n	8009b12 <HAL_SPI_Transmit+0x3ae>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d114      	bne.n	8009b3c <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f844 	bl	8009ba0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e02c      	b.n	8009b96 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f47f af72 	bne.w	8009a2e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2200      	movs	r2, #0
 8009b52:	2108      	movs	r1, #8
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 f8c3 	bl	8009ce0 <SPI_WaitOnFlagUntilTimeout>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b66:	f043 0220 	orr.w	r2, r3, #32
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 f815 	bl	8009ba0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e000      	b.n	8009b96 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8009b94:	7efb      	ldrb	r3, [r7, #27]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3720      	adds	r7, #32
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop

08009ba0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	699a      	ldr	r2, [r3, #24]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f042 0208 	orr.w	r2, r2, #8
 8009bbe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699a      	ldr	r2, [r3, #24]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f042 0210 	orr.w	r2, r2, #16
 8009bce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0201 	bic.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6812      	ldr	r2, [r2, #0]
 8009bea:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009bee:	f023 0303 	bic.w	r3, r3, #3
 8009bf2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689a      	ldr	r2, [r3, #8]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009c02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b04      	cmp	r3, #4
 8009c0e:	d014      	beq.n	8009c3a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f003 0320 	and.w	r3, r3, #32
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00f      	beq.n	8009c3a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f042 0220 	orr.w	r2, r2, #32
 8009c38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d014      	beq.n	8009c70 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00f      	beq.n	8009c70 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c56:	f043 0204 	orr.w	r2, r3, #4
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00f      	beq.n	8009c9a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c80:	f043 0201 	orr.w	r2, r3, #1
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	699a      	ldr	r2, [r3, #24]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00f      	beq.n	8009cc4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009caa:	f043 0208 	orr.w	r2, r3, #8
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699a      	ldr	r2, [r3, #24]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cc2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009cd4:	bf00      	nop
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	4613      	mov	r3, r2
 8009cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009cf0:	e010      	b.n	8009d14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cf2:	f7f7 fdeb 	bl	80018cc <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d803      	bhi.n	8009d0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d102      	bne.n	8009d10 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e00f      	b.n	8009d34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	695a      	ldr	r2, [r3, #20]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	bf0c      	ite	eq
 8009d24:	2301      	moveq	r3, #1
 8009d26:	2300      	movne	r3, #0
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d0df      	beq.n	8009cf2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d48:	095b      	lsrs	r3, r3, #5
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	3301      	adds	r3, #1
 8009d54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	3307      	adds	r3, #7
 8009d5a:	08db      	lsrs	r3, r3, #3
 8009d5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d12e      	bne.n	8009de6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d101      	bne.n	8009d96 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e028      	b.n	8009de8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0201 	bic.w	r2, r2, #1
 8009db4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009dc2:	ea42 0103 	orr.w	r1, r2, r3
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	689a      	ldr	r2, [r3, #8]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e000      	b.n	8009de8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
  }
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e049      	b.n	8009e9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d106      	bne.n	8009e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f841 	bl	8009ea2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f000 fa88 	bl	800a348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
	...

08009eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d001      	beq.n	8009ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e072      	b.n	8009fb6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f042 0201 	orr.w	r2, r2, #1
 8009ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a35      	ldr	r2, [pc, #212]	; (8009fc4 <HAL_TIM_Base_Start_IT+0x10c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d040      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a34      	ldr	r2, [pc, #208]	; (8009fc8 <HAL_TIM_Base_Start_IT+0x110>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d03b      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f04:	d036      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f0e:	d031      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a2d      	ldr	r2, [pc, #180]	; (8009fcc <HAL_TIM_Base_Start_IT+0x114>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d02c      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a2c      	ldr	r2, [pc, #176]	; (8009fd0 <HAL_TIM_Base_Start_IT+0x118>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d027      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a2a      	ldr	r2, [pc, #168]	; (8009fd4 <HAL_TIM_Base_Start_IT+0x11c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d022      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a29      	ldr	r2, [pc, #164]	; (8009fd8 <HAL_TIM_Base_Start_IT+0x120>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d01d      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a27      	ldr	r2, [pc, #156]	; (8009fdc <HAL_TIM_Base_Start_IT+0x124>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d018      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a26      	ldr	r2, [pc, #152]	; (8009fe0 <HAL_TIM_Base_Start_IT+0x128>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d013      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a24      	ldr	r2, [pc, #144]	; (8009fe4 <HAL_TIM_Base_Start_IT+0x12c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d00e      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a23      	ldr	r2, [pc, #140]	; (8009fe8 <HAL_TIM_Base_Start_IT+0x130>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d009      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a21      	ldr	r2, [pc, #132]	; (8009fec <HAL_TIM_Base_Start_IT+0x134>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d004      	beq.n	8009f74 <HAL_TIM_Base_Start_IT+0xbc>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a20      	ldr	r2, [pc, #128]	; (8009ff0 <HAL_TIM_Base_Start_IT+0x138>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d115      	bne.n	8009fa0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	4b1e      	ldr	r3, [pc, #120]	; (8009ff4 <HAL_TIM_Base_Start_IT+0x13c>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b06      	cmp	r3, #6
 8009f84:	d015      	beq.n	8009fb2 <HAL_TIM_Base_Start_IT+0xfa>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8c:	d011      	beq.n	8009fb2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0201 	orr.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f9e:	e008      	b.n	8009fb2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f042 0201 	orr.w	r2, r2, #1
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	e000      	b.n	8009fb4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	40012c00 	.word	0x40012c00
 8009fc8:	50012c00 	.word	0x50012c00
 8009fcc:	40000400 	.word	0x40000400
 8009fd0:	50000400 	.word	0x50000400
 8009fd4:	40000800 	.word	0x40000800
 8009fd8:	50000800 	.word	0x50000800
 8009fdc:	40000c00 	.word	0x40000c00
 8009fe0:	50000c00 	.word	0x50000c00
 8009fe4:	40013400 	.word	0x40013400
 8009fe8:	50013400 	.word	0x50013400
 8009fec:	40014000 	.word	0x40014000
 8009ff0:	50014000 	.word	0x50014000
 8009ff4:	00010007 	.word	0x00010007

08009ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d122      	bne.n	800a054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d11b      	bne.n	800a054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f06f 0202 	mvn.w	r2, #2
 800a024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f965 	bl	800a30a <HAL_TIM_IC_CaptureCallback>
 800a040:	e005      	b.n	800a04e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f957 	bl	800a2f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f968 	bl	800a31e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d122      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d11b      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f06f 0204 	mvn.w	r2, #4
 800a078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2202      	movs	r2, #2
 800a07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f93b 	bl	800a30a <HAL_TIM_IC_CaptureCallback>
 800a094:	e005      	b.n	800a0a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f92d 	bl	800a2f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f93e 	bl	800a31e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0308 	and.w	r3, r3, #8
 800a0b2:	2b08      	cmp	r3, #8
 800a0b4:	d122      	bne.n	800a0fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f003 0308 	and.w	r3, r3, #8
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d11b      	bne.n	800a0fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f06f 0208 	mvn.w	r2, #8
 800a0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2204      	movs	r2, #4
 800a0d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f911 	bl	800a30a <HAL_TIM_IC_CaptureCallback>
 800a0e8:	e005      	b.n	800a0f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f903 	bl	800a2f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f914 	bl	800a31e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0310 	and.w	r3, r3, #16
 800a106:	2b10      	cmp	r3, #16
 800a108:	d122      	bne.n	800a150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f003 0310 	and.w	r3, r3, #16
 800a114:	2b10      	cmp	r3, #16
 800a116:	d11b      	bne.n	800a150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f06f 0210 	mvn.w	r2, #16
 800a120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2208      	movs	r2, #8
 800a126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f8e7 	bl	800a30a <HAL_TIM_IC_CaptureCallback>
 800a13c:	e005      	b.n	800a14a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f8d9 	bl	800a2f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f8ea 	bl	800a31e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d10e      	bne.n	800a17c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d107      	bne.n	800a17c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f06f 0201 	mvn.w	r2, #1
 800a174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7f7 f832 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a186:	2b80      	cmp	r3, #128	; 0x80
 800a188:	d10e      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a194:	2b80      	cmp	r3, #128	; 0x80
 800a196:	d107      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f9d4 	bl	800a550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b6:	d10e      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c2:	2b80      	cmp	r3, #128	; 0x80
 800a1c4:	d107      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f9c7 	bl	800a564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e0:	2b40      	cmp	r3, #64	; 0x40
 800a1e2:	d10e      	bne.n	800a202 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d107      	bne.n	800a202 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f898 	bl	800a332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d10e      	bne.n	800a22e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	2b20      	cmp	r3, #32
 800a21c:	d107      	bne.n	800a22e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f06f 0220 	mvn.w	r2, #32
 800a226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f987 	bl	800a53c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a23c:	d10f      	bne.n	800a25e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a24c:	d107      	bne.n	800a25e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f98d 	bl	800a578 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a26c:	d10f      	bne.n	800a28e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a27c:	d107      	bne.n	800a28e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f97f 	bl	800a58c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a29c:	d10f      	bne.n	800a2be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2ac:	d107      	bne.n	800a2be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a2b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f971 	bl	800a5a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2cc:	d10f      	bne.n	800a2ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2dc:	d107      	bne.n	800a2ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a2e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f963 	bl	800a5b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2fe:	bf00      	nop
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a312:	bf00      	nop
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a68      	ldr	r2, [pc, #416]	; (800a4fc <TIM_Base_SetConfig+0x1b4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d02b      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a67      	ldr	r2, [pc, #412]	; (800a500 <TIM_Base_SetConfig+0x1b8>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d027      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a36e:	d023      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a376:	d01f      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a62      	ldr	r2, [pc, #392]	; (800a504 <TIM_Base_SetConfig+0x1bc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d01b      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a61      	ldr	r2, [pc, #388]	; (800a508 <TIM_Base_SetConfig+0x1c0>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d017      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a60      	ldr	r2, [pc, #384]	; (800a50c <TIM_Base_SetConfig+0x1c4>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d013      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a5f      	ldr	r2, [pc, #380]	; (800a510 <TIM_Base_SetConfig+0x1c8>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d00f      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a5e      	ldr	r2, [pc, #376]	; (800a514 <TIM_Base_SetConfig+0x1cc>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00b      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a5d      	ldr	r2, [pc, #372]	; (800a518 <TIM_Base_SetConfig+0x1d0>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d007      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a5c      	ldr	r2, [pc, #368]	; (800a51c <TIM_Base_SetConfig+0x1d4>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d003      	beq.n	800a3b8 <TIM_Base_SetConfig+0x70>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a5b      	ldr	r2, [pc, #364]	; (800a520 <TIM_Base_SetConfig+0x1d8>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d108      	bne.n	800a3ca <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a4b      	ldr	r2, [pc, #300]	; (800a4fc <TIM_Base_SetConfig+0x1b4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d043      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a4a      	ldr	r2, [pc, #296]	; (800a500 <TIM_Base_SetConfig+0x1b8>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d03f      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e0:	d03b      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3e8:	d037      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a45      	ldr	r2, [pc, #276]	; (800a504 <TIM_Base_SetConfig+0x1bc>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d033      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a44      	ldr	r2, [pc, #272]	; (800a508 <TIM_Base_SetConfig+0x1c0>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d02f      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a43      	ldr	r2, [pc, #268]	; (800a50c <TIM_Base_SetConfig+0x1c4>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d02b      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a42      	ldr	r2, [pc, #264]	; (800a510 <TIM_Base_SetConfig+0x1c8>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d027      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a41      	ldr	r2, [pc, #260]	; (800a514 <TIM_Base_SetConfig+0x1cc>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d023      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a40      	ldr	r2, [pc, #256]	; (800a518 <TIM_Base_SetConfig+0x1d0>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d01f      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a3f      	ldr	r2, [pc, #252]	; (800a51c <TIM_Base_SetConfig+0x1d4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d01b      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a3e      	ldr	r2, [pc, #248]	; (800a520 <TIM_Base_SetConfig+0x1d8>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d017      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a3d      	ldr	r2, [pc, #244]	; (800a524 <TIM_Base_SetConfig+0x1dc>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d013      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a3c      	ldr	r2, [pc, #240]	; (800a528 <TIM_Base_SetConfig+0x1e0>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00f      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a3b      	ldr	r2, [pc, #236]	; (800a52c <TIM_Base_SetConfig+0x1e4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00b      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a3a      	ldr	r2, [pc, #232]	; (800a530 <TIM_Base_SetConfig+0x1e8>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d007      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a39      	ldr	r2, [pc, #228]	; (800a534 <TIM_Base_SetConfig+0x1ec>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d003      	beq.n	800a45a <TIM_Base_SetConfig+0x112>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a38      	ldr	r2, [pc, #224]	; (800a538 <TIM_Base_SetConfig+0x1f0>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d108      	bne.n	800a46c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a1a      	ldr	r2, [pc, #104]	; (800a4fc <TIM_Base_SetConfig+0x1b4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d023      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a19      	ldr	r2, [pc, #100]	; (800a500 <TIM_Base_SetConfig+0x1b8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d01f      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a1e      	ldr	r2, [pc, #120]	; (800a51c <TIM_Base_SetConfig+0x1d4>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d01b      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a1d      	ldr	r2, [pc, #116]	; (800a520 <TIM_Base_SetConfig+0x1d8>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d017      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a1c      	ldr	r2, [pc, #112]	; (800a524 <TIM_Base_SetConfig+0x1dc>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d013      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	; (800a528 <TIM_Base_SetConfig+0x1e0>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00f      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a1a      	ldr	r2, [pc, #104]	; (800a52c <TIM_Base_SetConfig+0x1e4>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00b      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a19      	ldr	r2, [pc, #100]	; (800a530 <TIM_Base_SetConfig+0x1e8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a18      	ldr	r2, [pc, #96]	; (800a534 <TIM_Base_SetConfig+0x1ec>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_Base_SetConfig+0x198>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a17      	ldr	r2, [pc, #92]	; (800a538 <TIM_Base_SetConfig+0x1f0>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d103      	bne.n	800a4e8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	691a      	ldr	r2, [r3, #16]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	615a      	str	r2, [r3, #20]
}
 800a4ee:	bf00      	nop
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40012c00 	.word	0x40012c00
 800a500:	50012c00 	.word	0x50012c00
 800a504:	40000400 	.word	0x40000400
 800a508:	50000400 	.word	0x50000400
 800a50c:	40000800 	.word	0x40000800
 800a510:	50000800 	.word	0x50000800
 800a514:	40000c00 	.word	0x40000c00
 800a518:	50000c00 	.word	0x50000c00
 800a51c:	40013400 	.word	0x40013400
 800a520:	50013400 	.word	0x50013400
 800a524:	40014000 	.word	0x40014000
 800a528:	50014000 	.word	0x50014000
 800a52c:	40014400 	.word	0x40014400
 800a530:	50014400 	.word	0x50014400
 800a534:	40014800 	.word	0x40014800
 800a538:	50014800 	.word	0x50014800

0800a53c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e042      	b.n	800a660 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d106      	bne.n	800a5f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7f6 ff67 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2224      	movs	r2, #36	; 0x24
 800a5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0201 	bic.w	r2, r2, #1
 800a608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f8ca 	bl	800a7a4 <UART_SetConfig>
 800a610:	4603      	mov	r3, r0
 800a612:	2b01      	cmp	r3, #1
 800a614:	d101      	bne.n	800a61a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e022      	b.n	800a660 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fa60 	bl	800aae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689a      	ldr	r2, [r3, #8]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f042 0201 	orr.w	r2, r2, #1
 800a656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fae7 	bl	800ac2c <UART_CheckIdleState>
 800a65e:	4603      	mov	r3, r0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08a      	sub	sp, #40	; 0x28
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	4613      	mov	r3, r2
 800a676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67e:	2b20      	cmp	r3, #32
 800a680:	f040 808b 	bne.w	800a79a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <HAL_UART_Transmit+0x28>
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e083      	b.n	800a79c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69e:	2b80      	cmp	r3, #128	; 0x80
 800a6a0:	d107      	bne.n	800a6b2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6b0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2221      	movs	r2, #33	; 0x21
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6c2:	f7f7 f903 	bl	80018cc <HAL_GetTick>
 800a6c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	88fa      	ldrh	r2, [r7, #6]
 800a6cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	88fa      	ldrh	r2, [r7, #6]
 800a6d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e0:	d108      	bne.n	800a6f4 <HAL_UART_Transmit+0x8c>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d104      	bne.n	800a6f4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	e003      	b.n	800a6fc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a6fc:	e030      	b.n	800a760 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2200      	movs	r2, #0
 800a706:	2180      	movs	r1, #128	; 0x80
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 fb39 	bl	800ad80 <UART_WaitOnFlagUntilTimeout>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d005      	beq.n	800a720 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2220      	movs	r2, #32
 800a718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e03d      	b.n	800a79c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10b      	bne.n	800a73e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a734:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	3302      	adds	r3, #2
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e007      	b.n	800a74e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	781a      	ldrb	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	3301      	adds	r3, #1
 800a74c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a754:	b29b      	uxth	r3, r3
 800a756:	3b01      	subs	r3, #1
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a766:	b29b      	uxth	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1c8      	bne.n	800a6fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2200      	movs	r2, #0
 800a774:	2140      	movs	r1, #64	; 0x40
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 fb02 	bl	800ad80 <UART_WaitOnFlagUntilTimeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2220      	movs	r2, #32
 800a786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e006      	b.n	800a79c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2220      	movs	r2, #32
 800a792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	e000      	b.n	800a79c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a79a:	2302      	movs	r3, #2
  }
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7a8:	b094      	sub	sp, #80	; 0x50
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	4b7e      	ldr	r3, [pc, #504]	; (800a9b4 <UART_SetConfig+0x210>)
 800a7ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7be:	689a      	ldr	r2, [r3, #8]
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4977      	ldr	r1, [pc, #476]	; (800a9b8 <UART_SetConfig+0x214>)
 800a7dc:	4019      	ands	r1, r3
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f4:	68d9      	ldr	r1, [r3, #12]
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	ea40 0301 	orr.w	r3, r0, r1
 800a7fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4b6a      	ldr	r3, [pc, #424]	; (800a9b4 <UART_SetConfig+0x210>)
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d009      	beq.n	800a824 <UART_SetConfig+0x80>
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	4b69      	ldr	r3, [pc, #420]	; (800a9bc <UART_SetConfig+0x218>)
 800a816:	429a      	cmp	r2, r3
 800a818:	d004      	beq.n	800a824 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81c:	6a1a      	ldr	r2, [r3, #32]
 800a81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a820:	4313      	orrs	r3, r2
 800a822:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a82e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a838:	430b      	orrs	r3, r1
 800a83a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	f023 000f 	bic.w	r0, r3, #15
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	ea40 0301 	orr.w	r3, r0, r1
 800a852:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	4b59      	ldr	r3, [pc, #356]	; (800a9c0 <UART_SetConfig+0x21c>)
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d102      	bne.n	800a864 <UART_SetConfig+0xc0>
 800a85e:	2301      	movs	r3, #1
 800a860:	64bb      	str	r3, [r7, #72]	; 0x48
 800a862:	e029      	b.n	800a8b8 <UART_SetConfig+0x114>
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	4b56      	ldr	r3, [pc, #344]	; (800a9c4 <UART_SetConfig+0x220>)
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d102      	bne.n	800a874 <UART_SetConfig+0xd0>
 800a86e:	2302      	movs	r3, #2
 800a870:	64bb      	str	r3, [r7, #72]	; 0x48
 800a872:	e021      	b.n	800a8b8 <UART_SetConfig+0x114>
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	4b53      	ldr	r3, [pc, #332]	; (800a9c8 <UART_SetConfig+0x224>)
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d102      	bne.n	800a884 <UART_SetConfig+0xe0>
 800a87e:	2304      	movs	r3, #4
 800a880:	64bb      	str	r3, [r7, #72]	; 0x48
 800a882:	e019      	b.n	800a8b8 <UART_SetConfig+0x114>
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	4b50      	ldr	r3, [pc, #320]	; (800a9cc <UART_SetConfig+0x228>)
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d102      	bne.n	800a894 <UART_SetConfig+0xf0>
 800a88e:	2308      	movs	r3, #8
 800a890:	64bb      	str	r3, [r7, #72]	; 0x48
 800a892:	e011      	b.n	800a8b8 <UART_SetConfig+0x114>
 800a894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	4b4d      	ldr	r3, [pc, #308]	; (800a9d0 <UART_SetConfig+0x22c>)
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d102      	bne.n	800a8a4 <UART_SetConfig+0x100>
 800a89e:	2310      	movs	r3, #16
 800a8a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8a2:	e009      	b.n	800a8b8 <UART_SetConfig+0x114>
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4b42      	ldr	r3, [pc, #264]	; (800a9b4 <UART_SetConfig+0x210>)
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d102      	bne.n	800a8b4 <UART_SetConfig+0x110>
 800a8ae:	2320      	movs	r3, #32
 800a8b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8b2:	e001      	b.n	800a8b8 <UART_SetConfig+0x114>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	4b3d      	ldr	r3, [pc, #244]	; (800a9b4 <UART_SetConfig+0x210>)
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d005      	beq.n	800a8ce <UART_SetConfig+0x12a>
 800a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4b3d      	ldr	r3, [pc, #244]	; (800a9bc <UART_SetConfig+0x218>)
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	f040 8085 	bne.w	800a9d8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	623b      	str	r3, [r7, #32]
 800a8d4:	627a      	str	r2, [r7, #36]	; 0x24
 800a8d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a8da:	f7fc feb7 	bl	800764c <HAL_RCCEx_GetPeriphCLKFreq>
 800a8de:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 80e8 	beq.w	800aab8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	4a39      	ldr	r2, [pc, #228]	; (800a9d4 <UART_SetConfig+0x230>)
 800a8ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8fa:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	4613      	mov	r3, r2
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	4413      	add	r3, r2
 800a906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a908:	429a      	cmp	r2, r3
 800a90a:	d305      	bcc.n	800a918 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a914:	429a      	cmp	r2, r3
 800a916:	d903      	bls.n	800a920 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a91e:	e048      	b.n	800a9b2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a922:	2200      	movs	r2, #0
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	61fa      	str	r2, [r7, #28]
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <UART_SetConfig+0x230>)
 800a92e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a932:	b29b      	uxth	r3, r3
 800a934:	2200      	movs	r2, #0
 800a936:	613b      	str	r3, [r7, #16]
 800a938:	617a      	str	r2, [r7, #20]
 800a93a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a93e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a942:	f7f5 fdc7 	bl	80004d4 <__aeabi_uldivmod>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4610      	mov	r0, r2
 800a94c:	4619      	mov	r1, r3
 800a94e:	f04f 0200 	mov.w	r2, #0
 800a952:	f04f 0300 	mov.w	r3, #0
 800a956:	020b      	lsls	r3, r1, #8
 800a958:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a95c:	0202      	lsls	r2, r0, #8
 800a95e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a960:	6849      	ldr	r1, [r1, #4]
 800a962:	0849      	lsrs	r1, r1, #1
 800a964:	2000      	movs	r0, #0
 800a966:	460c      	mov	r4, r1
 800a968:	4605      	mov	r5, r0
 800a96a:	eb12 0804 	adds.w	r8, r2, r4
 800a96e:	eb43 0905 	adc.w	r9, r3, r5
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	60bb      	str	r3, [r7, #8]
 800a97a:	60fa      	str	r2, [r7, #12]
 800a97c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a980:	4640      	mov	r0, r8
 800a982:	4649      	mov	r1, r9
 800a984:	f7f5 fda6 	bl	80004d4 <__aeabi_uldivmod>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4613      	mov	r3, r2
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a996:	d308      	bcc.n	800a9aa <UART_SetConfig+0x206>
 800a998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a99a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a99e:	d204      	bcs.n	800a9aa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9a6:	60da      	str	r2, [r3, #12]
 800a9a8:	e003      	b.n	800a9b2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a9b0:	e082      	b.n	800aab8 <UART_SetConfig+0x314>
 800a9b2:	e081      	b.n	800aab8 <UART_SetConfig+0x314>
 800a9b4:	46002400 	.word	0x46002400
 800a9b8:	cfff69f3 	.word	0xcfff69f3
 800a9bc:	56002400 	.word	0x56002400
 800a9c0:	40013800 	.word	0x40013800
 800a9c4:	40004400 	.word	0x40004400
 800a9c8:	40004800 	.word	0x40004800
 800a9cc:	40004c00 	.word	0x40004c00
 800a9d0:	40005000 	.word	0x40005000
 800a9d4:	080154c0 	.word	0x080154c0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e0:	d13c      	bne.n	800aa5c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	607a      	str	r2, [r7, #4]
 800a9ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9ee:	f7fc fe2d 	bl	800764c <HAL_RCCEx_GetPeriphCLKFreq>
 800a9f2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d05e      	beq.n	800aab8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	4a39      	ldr	r2, [pc, #228]	; (800aae4 <UART_SetConfig+0x340>)
 800aa00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa04:	461a      	mov	r2, r3
 800aa06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa08:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa0c:	005a      	lsls	r2, r3, #1
 800aa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	085b      	lsrs	r3, r3, #1
 800aa14:	441a      	add	r2, r3
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa22:	2b0f      	cmp	r3, #15
 800aa24:	d916      	bls.n	800aa54 <UART_SetConfig+0x2b0>
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2c:	d212      	bcs.n	800aa54 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	f023 030f 	bic.w	r3, r3, #15
 800aa36:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3a:	085b      	lsrs	r3, r3, #1
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa46:	4313      	orrs	r3, r2
 800aa48:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800aa50:	60da      	str	r2, [r3, #12]
 800aa52:	e031      	b.n	800aab8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aa5a:	e02d      	b.n	800aab8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa5e:	2200      	movs	r2, #0
 800aa60:	469a      	mov	sl, r3
 800aa62:	4693      	mov	fp, r2
 800aa64:	4650      	mov	r0, sl
 800aa66:	4659      	mov	r1, fp
 800aa68:	f7fc fdf0 	bl	800764c <HAL_RCCEx_GetPeriphCLKFreq>
 800aa6c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800aa6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d021      	beq.n	800aab8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	4a1a      	ldr	r2, [pc, #104]	; (800aae4 <UART_SetConfig+0x340>)
 800aa7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa82:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	085b      	lsrs	r3, r3, #1
 800aa8c:	441a      	add	r2, r3
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9a:	2b0f      	cmp	r3, #15
 800aa9c:	d909      	bls.n	800aab2 <UART_SetConfig+0x30e>
 800aa9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaa4:	d205      	bcs.n	800aab2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	60da      	str	r2, [r3, #12]
 800aab0:	e002      	b.n	800aab8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	2201      	movs	r2, #1
 800aabc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	2201      	movs	r2, #1
 800aac4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	2200      	movs	r2, #0
 800aacc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad0:	2200      	movs	r2, #0
 800aad2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800aad4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3750      	adds	r7, #80	; 0x50
 800aadc:	46bd      	mov	sp, r7
 800aade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aae2:	bf00      	nop
 800aae4:	080154c0 	.word	0x080154c0

0800aae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00a      	beq.n	800ab34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	f003 0308 	and.w	r3, r3, #8
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00a      	beq.n	800ab78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00a      	beq.n	800ab9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01a      	beq.n	800abfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abe6:	d10a      	bne.n	800abfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00a      	beq.n	800ac20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	605a      	str	r2, [r3, #4]
  }
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b098      	sub	sp, #96	; 0x60
 800ac30:	af02      	add	r7, sp, #8
 800ac32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac3c:	f7f6 fe46 	bl	80018cc <HAL_GetTick>
 800ac40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d12f      	bne.n	800acb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f88e 	bl	800ad80 <UART_WaitOnFlagUntilTimeout>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d022      	beq.n	800acb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac7e:	653b      	str	r3, [r7, #80]	; 0x50
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac88:	647b      	str	r3, [r7, #68]	; 0x44
 800ac8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e6      	bne.n	800ac6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e063      	b.n	800ad78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0304 	and.w	r3, r3, #4
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d149      	bne.n	800ad52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acc6:	2200      	movs	r2, #0
 800acc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f857 	bl	800ad80 <UART_WaitOnFlagUntilTimeout>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d03c      	beq.n	800ad52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	623b      	str	r3, [r7, #32]
   return(result);
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf6:	633b      	str	r3, [r7, #48]	; 0x30
 800acf8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e6      	bne.n	800acd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3308      	adds	r3, #8
 800ad10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	e853 3f00 	ldrex	r3, [r3]
 800ad18:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
 800ad20:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3308      	adds	r3, #8
 800ad28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad2a:	61fa      	str	r2, [r7, #28]
 800ad2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	69b9      	ldr	r1, [r7, #24]
 800ad30:	69fa      	ldr	r2, [r7, #28]
 800ad32:	e841 2300 	strex	r3, r2, [r1]
 800ad36:	617b      	str	r3, [r7, #20]
   return(result);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e5      	bne.n	800ad0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e012      	b.n	800ad78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3758      	adds	r7, #88	; 0x58
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	603b      	str	r3, [r7, #0]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad90:	e049      	b.n	800ae26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad98:	d045      	beq.n	800ae26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad9a:	f7f6 fd97 	bl	80018cc <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	69ba      	ldr	r2, [r7, #24]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d302      	bcc.n	800adb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d101      	bne.n	800adb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e048      	b.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d031      	beq.n	800ae26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	f003 0308 	and.w	r3, r3, #8
 800adcc:	2b08      	cmp	r3, #8
 800adce:	d110      	bne.n	800adf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2208      	movs	r2, #8
 800add6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f838 	bl	800ae4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2208      	movs	r2, #8
 800ade2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e029      	b.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	69db      	ldr	r3, [r3, #28]
 800adf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae00:	d111      	bne.n	800ae26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f81e 	bl	800ae4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2220      	movs	r2, #32
 800ae16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e00f      	b.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	69da      	ldr	r2, [r3, #28]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4013      	ands	r3, r2
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	bf0c      	ite	eq
 800ae36:	2301      	moveq	r3, #1
 800ae38:	2300      	movne	r3, #0
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d0a6      	beq.n	800ad92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b095      	sub	sp, #84	; 0x54
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	461a      	mov	r2, r3
 800ae72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae74:	643b      	str	r3, [r7, #64]	; 0x40
 800ae76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae7c:	e841 2300 	strex	r3, r2, [r1]
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e6      	bne.n	800ae56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae90:	6a3b      	ldr	r3, [r7, #32]
 800ae92:	e853 3f00 	ldrex	r3, [r3]
 800ae96:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae9e:	f023 0301 	bic.w	r3, r3, #1
 800aea2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3308      	adds	r3, #8
 800aeaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aeae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeb4:	e841 2300 	strex	r3, r2, [r1]
 800aeb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1e3      	bne.n	800ae88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d118      	bne.n	800aefa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	e853 3f00 	ldrex	r3, [r3]
 800aed4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f023 0310 	bic.w	r3, r3, #16
 800aedc:	647b      	str	r3, [r7, #68]	; 0x44
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeea:	6979      	ldr	r1, [r7, #20]
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	e841 2300 	strex	r3, r2, [r1]
 800aef2:	613b      	str	r3, [r7, #16]
   return(result);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1e6      	bne.n	800aec8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800af0e:	bf00      	nop
 800af10:	3754      	adds	r7, #84	; 0x54
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b085      	sub	sp, #20
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d101      	bne.n	800af30 <HAL_UARTEx_DisableFifoMode+0x16>
 800af2c:	2302      	movs	r3, #2
 800af2e:	e027      	b.n	800af80 <HAL_UARTEx_DisableFifoMode+0x66>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2224      	movs	r2, #36	; 0x24
 800af3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f022 0201 	bic.w	r2, r2, #1
 800af56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2220      	movs	r2, #32
 800af72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e02d      	b.n	800b000 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2224      	movs	r2, #36	; 0x24
 800afb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0201 	bic.w	r2, r2, #1
 800afca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f84f 	bl	800b084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d101      	bne.n	800b020 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b01c:	2302      	movs	r3, #2
 800b01e:	e02d      	b.n	800b07c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2224      	movs	r2, #36	; 0x24
 800b02c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 0201 	bic.w	r2, r2, #1
 800b046:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	430a      	orrs	r2, r1
 800b05a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f811 	bl	800b084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2220      	movs	r2, #32
 800b06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b090:	2b00      	cmp	r3, #0
 800b092:	d108      	bne.n	800b0a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0a4:	e031      	b.n	800b10a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0a6:	2308      	movs	r3, #8
 800b0a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0aa:	2308      	movs	r3, #8
 800b0ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	0e5b      	lsrs	r3, r3, #25
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	f003 0307 	and.w	r3, r3, #7
 800b0bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	0f5b      	lsrs	r3, r3, #29
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	f003 0307 	and.w	r3, r3, #7
 800b0cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	7b3a      	ldrb	r2, [r7, #12]
 800b0d2:	4911      	ldr	r1, [pc, #68]	; (800b118 <UARTEx_SetNbDataToProcess+0x94>)
 800b0d4:	5c8a      	ldrb	r2, [r1, r2]
 800b0d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0da:	7b3a      	ldrb	r2, [r7, #12]
 800b0dc:	490f      	ldr	r1, [pc, #60]	; (800b11c <UARTEx_SetNbDataToProcess+0x98>)
 800b0de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	7b7a      	ldrb	r2, [r7, #13]
 800b0f0:	4909      	ldr	r1, [pc, #36]	; (800b118 <UARTEx_SetNbDataToProcess+0x94>)
 800b0f2:	5c8a      	ldrb	r2, [r1, r2]
 800b0f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0f8:	7b7a      	ldrb	r2, [r7, #13]
 800b0fa:	4908      	ldr	r1, [pc, #32]	; (800b11c <UARTEx_SetNbDataToProcess+0x98>)
 800b0fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800b102:	b29a      	uxth	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b10a:	bf00      	nop
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	080154d8 	.word	0x080154d8
 800b11c:	080154e0 	.word	0x080154e0

0800b120 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b096      	sub	sp, #88	; 0x58
 800b124:	af02      	add	r7, sp, #8
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b12e:	2234      	movs	r2, #52	; 0x34
 800b130:	2100      	movs	r1, #0
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f009 fad0 	bl	80146d8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	f023 0303 	bic.w	r3, r3, #3
 800b13e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	f1a3 0208 	sub.w	r2, r3, #8
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2202      	movs	r2, #2
 800b16c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	4413      	add	r3, r2
 800b178:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3b04      	subs	r3, #4
 800b17e:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 800b188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b18a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b18c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	3b04      	subs	r3, #4
 800b192:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a4:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1aa:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1bc:	4a5d      	ldr	r2, [pc, #372]	; (800b334 <_tx_byte_pool_create+0x214>)
 800b1be:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ca:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b1ce:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1d0:	b672      	cpsid	i
#endif
    return(int_posture);
 800b1d2:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b1d4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	4a57      	ldr	r2, [pc, #348]	; (800b338 <_tx_byte_pool_create+0x218>)
 800b1da:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b1dc:	4b57      	ldr	r3, [pc, #348]	; (800b33c <_tx_byte_pool_create+0x21c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d109      	bne.n	800b1f8 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b1e4:	4a56      	ldr	r2, [pc, #344]	; (800b340 <_tx_byte_pool_create+0x220>)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	631a      	str	r2, [r3, #48]	; 0x30
 800b1f6:	e011      	b.n	800b21c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b1f8:	4b51      	ldr	r3, [pc, #324]	; (800b340 <_tx_byte_pool_create+0x220>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b202:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b214:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b21a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b21c:	4b47      	ldr	r3, [pc, #284]	; (800b33c <_tx_byte_pool_create+0x21c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3301      	adds	r3, #1
 800b222:	4a46      	ldr	r2, [pc, #280]	; (800b33c <_tx_byte_pool_create+0x21c>)
 800b224:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800b226:	2300      	movs	r3, #0
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	68f9      	ldr	r1, [r7, #12]
 800b230:	2008      	movs	r0, #8
 800b232:	f002 fd6d 	bl	800dd10 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800b236:	4b43      	ldr	r3, [pc, #268]	; (800b344 <_tx_byte_pool_create+0x224>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d06c      	beq.n	800b31c <_tx_byte_pool_create+0x1fc>
 800b242:	4b41      	ldr	r3, [pc, #260]	; (800b348 <_tx_byte_pool_create+0x228>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0304 	and.w	r3, r3, #4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d066      	beq.n	800b31c <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b24e:	f3ef 8305 	mrs	r3, IPSR
 800b252:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	4b3d      	ldr	r3, [pc, #244]	; (800b34c <_tx_byte_pool_create+0x22c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b25e:	4b3c      	ldr	r3, [pc, #240]	; (800b350 <_tx_byte_pool_create+0x230>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	64bb      	str	r3, [r7, #72]	; 0x48
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10b      	bne.n	800b282 <_tx_byte_pool_create+0x162>
 800b26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b274:	041a      	lsls	r2, r3, #16
 800b276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b278:	4313      	orrs	r3, r2
 800b27a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b27e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b280:	e00e      	b.n	800b2a0 <_tx_byte_pool_create+0x180>
 800b282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b284:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b288:	d205      	bcs.n	800b296 <_tx_byte_pool_create+0x176>
 800b28a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b28c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	64bb      	str	r3, [r7, #72]	; 0x48
 800b294:	e004      	b.n	800b2a0 <_tx_byte_pool_create+0x180>
 800b296:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b29a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b29c:	2300      	movs	r3, #0
 800b29e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2aa:	605a      	str	r2, [r3, #4]
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	2215      	movs	r2, #21
 800b2b0:	609a      	str	r2, [r3, #8]
 800b2b2:	4b28      	ldr	r3, [pc, #160]	; (800b354 <_tx_byte_pool_create+0x234>)
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b8:	60da      	str	r2, [r3, #12]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	611a      	str	r2, [r3, #16]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	615a      	str	r2, [r3, #20]
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	619a      	str	r2, [r3, #24]
 800b2cc:	f107 0214 	add.w	r2, r7, #20
 800b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d2:	61da      	str	r2, [r3, #28]
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	3320      	adds	r3, #32
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2da:	4b1f      	ldr	r3, [pc, #124]	; (800b358 <_tx_byte_pool_create+0x238>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d314      	bcc.n	800b30e <_tx_byte_pool_create+0x1ee>
 800b2e4:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <_tx_byte_pool_create+0x23c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2ea:	4a16      	ldr	r2, [pc, #88]	; (800b344 <_tx_byte_pool_create+0x224>)
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <_tx_byte_pool_create+0x240>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2f6:	621a      	str	r2, [r3, #32]
 800b2f8:	4b1a      	ldr	r3, [pc, #104]	; (800b364 <_tx_byte_pool_create+0x244>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00d      	beq.n	800b31c <_tx_byte_pool_create+0x1fc>
 800b300:	4b18      	ldr	r3, [pc, #96]	; (800b364 <_tx_byte_pool_create+0x244>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a16      	ldr	r2, [pc, #88]	; (800b360 <_tx_byte_pool_create+0x240>)
 800b306:	6812      	ldr	r2, [r2, #0]
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	e006      	b.n	800b31c <_tx_byte_pool_create+0x1fc>
 800b30e:	4a0d      	ldr	r2, [pc, #52]	; (800b344 <_tx_byte_pool_create+0x224>)
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	6013      	str	r3, [r2, #0]
 800b314:	4b12      	ldr	r3, [pc, #72]	; (800b360 <_tx_byte_pool_create+0x240>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b31a:	621a      	str	r2, [r3, #32]
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	f383 8810 	msr	PRIMASK, r3
}
 800b326:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3750      	adds	r7, #80	; 0x50
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	ffffeeee 	.word	0xffffeeee
 800b338:	42595445 	.word	0x42595445
 800b33c:	20001674 	.word	0x20001674
 800b340:	20001670 	.word	0x20001670
 800b344:	20001c9c 	.word	0x20001c9c
 800b348:	20001ca0 	.word	0x20001ca0
 800b34c:	2000000c 	.word	0x2000000c
 800b350:	20001680 	.word	0x20001680
 800b354:	e0001004 	.word	0xe0001004
 800b358:	20001c98 	.word	0x20001c98
 800b35c:	20001c94 	.word	0x20001c94
 800b360:	20001c88 	.word	0x20001c88
 800b364:	20001ca4 	.word	0x20001ca4

0800b368 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 800b36c:	f002 fcaa 	bl	800dcc4 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b370:	f001 fbe6 	bl	800cb40 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b374:	f002 fa92 	bl	800d89c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b378:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <_tx_initialize_high_level+0x5c>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <_tx_initialize_high_level+0x60>)
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b384:	4b11      	ldr	r3, [pc, #68]	; (800b3cc <_tx_initialize_high_level+0x64>)
 800b386:	2200      	movs	r2, #0
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	4b11      	ldr	r3, [pc, #68]	; (800b3d0 <_tx_initialize_high_level+0x68>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b390:	4b10      	ldr	r3, [pc, #64]	; (800b3d4 <_tx_initialize_high_level+0x6c>)
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <_tx_initialize_high_level+0x70>)
 800b398:	2200      	movs	r2, #0
 800b39a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b39c:	4b0f      	ldr	r3, [pc, #60]	; (800b3dc <_tx_initialize_high_level+0x74>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	4b0f      	ldr	r3, [pc, #60]	; (800b3e0 <_tx_initialize_high_level+0x78>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b3a8:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <_tx_initialize_high_level+0x7c>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	4b0e      	ldr	r3, [pc, #56]	; (800b3e8 <_tx_initialize_high_level+0x80>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b3b4:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <_tx_initialize_high_level+0x84>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <_tx_initialize_high_level+0x88>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	601a      	str	r2, [r3, #0]
#endif
}
 800b3c0:	bf00      	nop
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20001648 	.word	0x20001648
 800b3c8:	2000164c 	.word	0x2000164c
 800b3cc:	20001650 	.word	0x20001650
 800b3d0:	20001654 	.word	0x20001654
 800b3d4:	20001658 	.word	0x20001658
 800b3d8:	2000165c 	.word	0x2000165c
 800b3dc:	20001668 	.word	0x20001668
 800b3e0:	2000166c 	.word	0x2000166c
 800b3e4:	20001670 	.word	0x20001670
 800b3e8:	20001674 	.word	0x20001674
 800b3ec:	20001660 	.word	0x20001660
 800b3f0:	20001664 	.word	0x20001664

0800b3f4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b3f8:	4b10      	ldr	r3, [pc, #64]	; (800b43c <_tx_initialize_kernel_enter+0x48>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b400:	d00c      	beq.n	800b41c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b402:	4b0e      	ldr	r3, [pc, #56]	; (800b43c <_tx_initialize_kernel_enter+0x48>)
 800b404:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b408:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b40a:	f7f4 ff35 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b40e:	f7ff ffab 	bl	800b368 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b412:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <_tx_initialize_kernel_enter+0x4c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3301      	adds	r3, #1
 800b418:	4a09      	ldr	r2, [pc, #36]	; (800b440 <_tx_initialize_kernel_enter+0x4c>)
 800b41a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b41c:	4b07      	ldr	r3, [pc, #28]	; (800b43c <_tx_initialize_kernel_enter+0x48>)
 800b41e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b422:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b424:	4b07      	ldr	r3, [pc, #28]	; (800b444 <_tx_initialize_kernel_enter+0x50>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f5 f9e3 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b42e:	4b03      	ldr	r3, [pc, #12]	; (800b43c <_tx_initialize_kernel_enter+0x48>)
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b434:	f7f4 ff5c 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b438:	bf00      	nop
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	2000000c 	.word	0x2000000c
 800b440:	20001718 	.word	0x20001718
 800b444:	20001678 	.word	0x20001678

0800b448 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08e      	sub	sp, #56	; 0x38
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b452:	f3ef 8310 	mrs	r3, PRIMASK
 800b456:	623b      	str	r3, [r7, #32]
    return(posture);
 800b458:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b45a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b45c:	b672      	cpsid	i
    return(int_posture);
 800b45e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b460:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b466:	4a37      	ldr	r2, [pc, #220]	; (800b544 <_tx_queue_cleanup+0xfc>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d161      	bne.n	800b530 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d15b      	bne.n	800b530 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b47c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	2b00      	cmp	r3, #0
 800b482:	d055      	beq.n	800b530 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a2f      	ldr	r2, [pc, #188]	; (800b548 <_tx_queue_cleanup+0x100>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d150      	bne.n	800b530 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	2b00      	cmp	r3, #0
 800b494:	d04c      	beq.n	800b530 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a0:	1e5a      	subs	r2, r3, #1
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d103      	bne.n	800b4ba <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	629a      	str	r2, [r3, #40]	; 0x28
 800b4b8:	e013      	b.n	800b4e2 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4be:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ca:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d102      	bne.n	800b4e2 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4e0:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	d122      	bne.n	800b530 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d004      	beq.n	800b4fc <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	220b      	movs	r2, #11
 800b4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b4fa:	e003      	b.n	800b504 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	220a      	movs	r2, #10
 800b500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b504:	4b11      	ldr	r3, [pc, #68]	; (800b54c <_tx_queue_cleanup+0x104>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3301      	adds	r3, #1
 800b50a:	4a10      	ldr	r2, [pc, #64]	; (800b54c <_tx_queue_cleanup+0x104>)
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b510:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f383 8810 	msr	PRIMASK, r3
}
 800b518:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f001 fcd6 	bl	800cecc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b520:	f3ef 8310 	mrs	r3, PRIMASK
 800b524:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b526:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b528:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b52a:	b672      	cpsid	i
    return(int_posture);
 800b52c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b52e:	637b      	str	r3, [r7, #52]	; 0x34
 800b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b532:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f383 8810 	msr	PRIMASK, r3
}
 800b53a:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b53c:	bf00      	nop
 800b53e:	3738      	adds	r7, #56	; 0x38
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	0800b449 	.word	0x0800b449
 800b548:	51554555 	.word	0x51554555
 800b54c:	20001718 	.word	0x20001718

0800b550 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b094      	sub	sp, #80	; 0x50
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b55e:	2238      	movs	r2, #56	; 0x38
 800b560:	2100      	movs	r1, #0
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f009 f8b8 	bl	80146d8 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
    used_words =  capacity * message_size;
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	fb02 f303 	mul.w	r3, r2, r3
 800b588:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	699a      	ldr	r2, [r3, #24]
 800b594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	441a      	add	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5ae:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5b4:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ba:	623b      	str	r3, [r7, #32]
    return(posture);
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b5be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5c0:	b672      	cpsid	i
    return(int_posture);
 800b5c2:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b5c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	4a55      	ldr	r2, [pc, #340]	; (800b720 <_tx_queue_create+0x1d0>)
 800b5ca:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b5cc:	4b55      	ldr	r3, [pc, #340]	; (800b724 <_tx_queue_create+0x1d4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d109      	bne.n	800b5e8 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b5d4:	4a54      	ldr	r2, [pc, #336]	; (800b728 <_tx_queue_create+0x1d8>)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	635a      	str	r2, [r3, #52]	; 0x34
 800b5e6:	e011      	b.n	800b60c <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b5e8:	4b4f      	ldr	r3, [pc, #316]	; (800b728 <_tx_queue_create+0x1d8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	633b      	str	r3, [r7, #48]	; 0x30
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b604:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b60c:	4b45      	ldr	r3, [pc, #276]	; (800b724 <_tx_queue_create+0x1d4>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3301      	adds	r3, #1
 800b612:	4a44      	ldr	r2, [pc, #272]	; (800b724 <_tx_queue_create+0x1d4>)
 800b614:	6013      	str	r3, [r2, #0]

    /* Optional queue create extended processing.  */
    TX_QUEUE_CREATE_EXTENSION(queue_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, name_ptr, queue_size, message_size)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	68f9      	ldr	r1, [r7, #12]
 800b620:	2003      	movs	r0, #3
 800b622:	f002 fb75 	bl	800dd10 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_CREATE, queue_ptr, message_size, TX_POINTER_TO_ULONG_CONVERT(queue_start), queue_size, TX_TRACE_QUEUE_EVENTS)
 800b626:	4b41      	ldr	r3, [pc, #260]	; (800b72c <_tx_queue_create+0x1dc>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d06b      	beq.n	800b70a <_tx_queue_create+0x1ba>
 800b632:	4b3f      	ldr	r3, [pc, #252]	; (800b730 <_tx_queue_create+0x1e0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d065      	beq.n	800b70a <_tx_queue_create+0x1ba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b63e:	f3ef 8305 	mrs	r3, IPSR
 800b642:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	4b3b      	ldr	r3, [pc, #236]	; (800b734 <_tx_queue_create+0x1e4>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
 800b64e:	4b3a      	ldr	r3, [pc, #232]	; (800b738 <_tx_queue_create+0x1e8>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	643b      	str	r3, [r7, #64]	; 0x40
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10b      	bne.n	800b672 <_tx_queue_create+0x122>
 800b65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65e:	647b      	str	r3, [r7, #68]	; 0x44
 800b660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b664:	041a      	lsls	r2, r3, #16
 800b666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b668:	4313      	orrs	r3, r2
 800b66a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b66e:	647b      	str	r3, [r7, #68]	; 0x44
 800b670:	e00e      	b.n	800b690 <_tx_queue_create+0x140>
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b678:	d205      	bcs.n	800b686 <_tx_queue_create+0x136>
 800b67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b67c:	647b      	str	r3, [r7, #68]	; 0x44
 800b67e:	f04f 33ff 	mov.w	r3, #4294967295
 800b682:	643b      	str	r3, [r7, #64]	; 0x40
 800b684:	e004      	b.n	800b690 <_tx_queue_create+0x140>
 800b686:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b68a:	643b      	str	r3, [r7, #64]	; 0x40
 800b68c:	2300      	movs	r3, #0
 800b68e:	647b      	str	r3, [r7, #68]	; 0x44
 800b690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b69a:	605a      	str	r2, [r3, #4]
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	223c      	movs	r2, #60	; 0x3c
 800b6a0:	609a      	str	r2, [r3, #8]
 800b6a2:	4b26      	ldr	r3, [pc, #152]	; (800b73c <_tx_queue_create+0x1ec>)
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	60da      	str	r2, [r3, #12]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	611a      	str	r2, [r3, #16]
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	615a      	str	r2, [r3, #20]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	619a      	str	r2, [r3, #24]
 800b6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6c0:	61da      	str	r2, [r3, #28]
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	3320      	adds	r3, #32
 800b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6c8:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <_tx_queue_create+0x1f0>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d314      	bcc.n	800b6fc <_tx_queue_create+0x1ac>
 800b6d2:	4b1c      	ldr	r3, [pc, #112]	; (800b744 <_tx_queue_create+0x1f4>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6d8:	4a14      	ldr	r2, [pc, #80]	; (800b72c <_tx_queue_create+0x1dc>)
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <_tx_queue_create+0x1f8>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e4:	621a      	str	r2, [r3, #32]
 800b6e6:	4b19      	ldr	r3, [pc, #100]	; (800b74c <_tx_queue_create+0x1fc>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00d      	beq.n	800b70a <_tx_queue_create+0x1ba>
 800b6ee:	4b17      	ldr	r3, [pc, #92]	; (800b74c <_tx_queue_create+0x1fc>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a15      	ldr	r2, [pc, #84]	; (800b748 <_tx_queue_create+0x1f8>)
 800b6f4:	6812      	ldr	r2, [r2, #0]
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	4798      	blx	r3
 800b6fa:	e006      	b.n	800b70a <_tx_queue_create+0x1ba>
 800b6fc:	4a0b      	ldr	r2, [pc, #44]	; (800b72c <_tx_queue_create+0x1dc>)
 800b6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b700:	6013      	str	r3, [r2, #0]
 800b702:	4b11      	ldr	r3, [pc, #68]	; (800b748 <_tx_queue_create+0x1f8>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b708:	621a      	str	r2, [r3, #32]
 800b70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f383 8810 	msr	PRIMASK, r3
}
 800b714:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3748      	adds	r7, #72	; 0x48
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	51554555 	.word	0x51554555
 800b724:	20001654 	.word	0x20001654
 800b728:	20001650 	.word	0x20001650
 800b72c:	20001c9c 	.word	0x20001c9c
 800b730:	20001ca0 	.word	0x20001ca0
 800b734:	2000000c 	.word	0x2000000c
 800b738:	20001680 	.word	0x20001680
 800b73c:	e0001004 	.word	0xe0001004
 800b740:	20001c98 	.word	0x20001c98
 800b744:	20001c94 	.word	0x20001c94
 800b748:	20001c88 	.word	0x20001c88
 800b74c:	20001ca4 	.word	0x20001ca4

0800b750 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b094      	sub	sp, #80	; 0x50
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 800b758:	2300      	movs	r3, #0
 800b75a:	64bb      	str	r3, [r7, #72]	; 0x48
    suspension_list =  TX_NULL;
 800b75c:	2300      	movs	r3, #0
 800b75e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b760:	f3ef 8310 	mrs	r3, PRIMASK
 800b764:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b768:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b76a:	b672      	cpsid	i
    return(int_posture);
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 800b76e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_FLUSH, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), 0, 0, TX_TRACE_QUEUE_EVENTS)
 800b770:	4b76      	ldr	r3, [pc, #472]	; (800b94c <_tx_queue_flush+0x1fc>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	63bb      	str	r3, [r7, #56]	; 0x38
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d06c      	beq.n	800b856 <_tx_queue_flush+0x106>
 800b77c:	4b74      	ldr	r3, [pc, #464]	; (800b950 <_tx_queue_flush+0x200>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b784:	2b00      	cmp	r3, #0
 800b786:	d066      	beq.n	800b856 <_tx_queue_flush+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b788:	f3ef 8305 	mrs	r3, IPSR
 800b78c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b78e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b790:	4b70      	ldr	r3, [pc, #448]	; (800b954 <_tx_queue_flush+0x204>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4313      	orrs	r3, r2
 800b796:	637b      	str	r3, [r7, #52]	; 0x34
 800b798:	4b6f      	ldr	r3, [pc, #444]	; (800b958 <_tx_queue_flush+0x208>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	643b      	str	r3, [r7, #64]	; 0x40
 800b79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10b      	bne.n	800b7bc <_tx_queue_flush+0x6c>
 800b7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ae:	041a      	lsls	r2, r3, #16
 800b7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ba:	e00e      	b.n	800b7da <_tx_queue_flush+0x8a>
 800b7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7be:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b7c2:	d205      	bcs.n	800b7d0 <_tx_queue_flush+0x80>
 800b7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b7ce:	e004      	b.n	800b7da <_tx_queue_flush+0x8a>
 800b7d0:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b7d4:	643b      	str	r3, [r7, #64]	; 0x40
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e8:	223e      	movs	r2, #62	; 0x3e
 800b7ea:	609a      	str	r2, [r3, #8]
 800b7ec:	4b5b      	ldr	r3, [pc, #364]	; (800b95c <_tx_queue_flush+0x20c>)
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	60da      	str	r2, [r3, #12]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	611a      	str	r2, [r3, #16]
 800b7fa:	f107 0208 	add.w	r2, r7, #8
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	615a      	str	r2, [r3, #20]
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	2200      	movs	r2, #0
 800b806:	619a      	str	r2, [r3, #24]
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	2200      	movs	r2, #0
 800b80c:	61da      	str	r2, [r3, #28]
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	3320      	adds	r3, #32
 800b812:	63bb      	str	r3, [r7, #56]	; 0x38
 800b814:	4b52      	ldr	r3, [pc, #328]	; (800b960 <_tx_queue_flush+0x210>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d314      	bcc.n	800b848 <_tx_queue_flush+0xf8>
 800b81e:	4b51      	ldr	r3, [pc, #324]	; (800b964 <_tx_queue_flush+0x214>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	63bb      	str	r3, [r7, #56]	; 0x38
 800b824:	4a49      	ldr	r2, [pc, #292]	; (800b94c <_tx_queue_flush+0x1fc>)
 800b826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	4b4f      	ldr	r3, [pc, #316]	; (800b968 <_tx_queue_flush+0x218>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b830:	621a      	str	r2, [r3, #32]
 800b832:	4b4e      	ldr	r3, [pc, #312]	; (800b96c <_tx_queue_flush+0x21c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00d      	beq.n	800b856 <_tx_queue_flush+0x106>
 800b83a:	4b4c      	ldr	r3, [pc, #304]	; (800b96c <_tx_queue_flush+0x21c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a4a      	ldr	r2, [pc, #296]	; (800b968 <_tx_queue_flush+0x218>)
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	4610      	mov	r0, r2
 800b844:	4798      	blx	r3
 800b846:	e006      	b.n	800b856 <_tx_queue_flush+0x106>
 800b848:	4a40      	ldr	r2, [pc, #256]	; (800b94c <_tx_queue_flush+0x1fc>)
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	6013      	str	r3, [r2, #0]
 800b84e:	4b46      	ldr	r3, [pc, #280]	; (800b968 <_tx_queue_flush+0x218>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b854:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d023      	beq.n	800b8a6 <_tx_queue_flush+0x156>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	699a      	ldr	r2, [r3, #24]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	699a      	ldr	r2, [r3, #24]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d010      	beq.n	800b8a6 <_tx_queue_flush+0x156>

            /* Yes, there are threads suspended on this queue, they must be
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b888:	64fb      	str	r3, [r7, #76]	; 0x4c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b89c:	4b34      	ldr	r3, [pc, #208]	; (800b970 <_tx_queue_flush+0x220>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	4a33      	ldr	r2, [pc, #204]	; (800b970 <_tx_queue_flush+0x220>)
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	f383 8810 	msr	PRIMASK, r3
}
 800b8b0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 800b8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d044      	beq.n	800b942 <_tx_queue_flush+0x1f2>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 800b8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ba:	60bb      	str	r3, [r7, #8]
        while (suspended_count != ((ULONG) 0))
 800b8bc:	e027      	b.n	800b90e <_tx_queue_flush+0x1be>
        {

            /* Decrement the suspension count.  */
            suspended_count--;
 800b8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d025      	beq.n	800b916 <_tx_queue_flush+0x1c6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ce:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b8d0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b8d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8d4:	b672      	cpsid	i
    return(int_posture);
 800b8d6:	69bb      	ldr	r3, [r7, #24]
            }

            /* Resume the next suspended thread.  */

            /* Lockout interrupts.  */
            TX_DISABLE
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ec:	60bb      	str	r3, [r7, #8]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800b8ee:	4b20      	ldr	r3, [pc, #128]	; (800b970 <_tx_queue_flush+0x220>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <_tx_queue_flush+0x220>)
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	f383 8810 	msr	PRIMASK, r3
}
 800b902:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b908:	4618      	mov	r0, r3
 800b90a:	f001 fadf 	bl	800cecc <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 800b90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1d4      	bne.n	800b8be <_tx_queue_flush+0x16e>
 800b914:	e000      	b.n	800b918 <_tx_queue_flush+0x1c8>
                break;
 800b916:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b918:	f3ef 8310 	mrs	r3, PRIMASK
 800b91c:	613b      	str	r3, [r7, #16]
    return(posture);
 800b91e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b920:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b922:	b672      	cpsid	i
    return(int_posture);
 800b924:	68fb      	ldr	r3, [r7, #12]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b926:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 800b928:	4b11      	ldr	r3, [pc, #68]	; (800b970 <_tx_queue_flush+0x220>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	4a10      	ldr	r2, [pc, #64]	; (800b970 <_tx_queue_flush+0x220>)
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b934:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f383 8810 	msr	PRIMASK, r3
}
 800b93c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b93e:	f001 fa8b 	bl	800ce58 <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3750      	adds	r7, #80	; 0x50
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20001c9c 	.word	0x20001c9c
 800b950:	20001ca0 	.word	0x20001ca0
 800b954:	2000000c 	.word	0x2000000c
 800b958:	20001680 	.word	0x20001680
 800b95c:	e0001004 	.word	0xe0001004
 800b960:	20001c98 	.word	0x20001c98
 800b964:	20001c94 	.word	0x20001c94
 800b968:	20001c88 	.word	0x20001c88
 800b96c:	20001ca4 	.word	0x20001ca4
 800b970:	20001718 	.word	0x20001718

0800b974 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b09a      	sub	sp, #104	; 0x68
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b980:	2300      	movs	r3, #0
 800b982:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b984:	f3ef 8310 	mrs	r3, PRIMASK
 800b988:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b98c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b98e:	b672      	cpsid	i
    return(int_posture);
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800b992:	64fb      	str	r3, [r7, #76]	; 0x4c
    queue_ptr -> tx_queue_performance_messages_received_count++;

#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_RECEIVE, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(destination_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800b994:	4b77      	ldr	r3, [pc, #476]	; (800bb74 <_tx_queue_receive+0x200>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	64bb      	str	r3, [r7, #72]	; 0x48
 800b99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d06c      	beq.n	800ba7a <_tx_queue_receive+0x106>
 800b9a0:	4b75      	ldr	r3, [pc, #468]	; (800bb78 <_tx_queue_receive+0x204>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d066      	beq.n	800ba7a <_tx_queue_receive+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9ac:	f3ef 8305 	mrs	r3, IPSR
 800b9b0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9b4:	4b71      	ldr	r3, [pc, #452]	; (800bb7c <_tx_queue_receive+0x208>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b9bc:	4b70      	ldr	r3, [pc, #448]	; (800bb80 <_tx_queue_receive+0x20c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10b      	bne.n	800b9e0 <_tx_queue_receive+0x6c>
 800b9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9cc:	657b      	str	r3, [r7, #84]	; 0x54
 800b9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d2:	041a      	lsls	r2, r3, #16
 800b9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b9dc:	657b      	str	r3, [r7, #84]	; 0x54
 800b9de:	e00e      	b.n	800b9fe <_tx_queue_receive+0x8a>
 800b9e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b9e6:	d205      	bcs.n	800b9f4 <_tx_queue_receive+0x80>
 800b9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ea:	657b      	str	r3, [r7, #84]	; 0x54
 800b9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9f2:	e004      	b.n	800b9fe <_tx_queue_receive+0x8a>
 800b9f4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800b9f8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	657b      	str	r3, [r7, #84]	; 0x54
 800b9fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba08:	605a      	str	r2, [r3, #4]
 800ba0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba0c:	2244      	movs	r2, #68	; 0x44
 800ba0e:	609a      	str	r2, [r3, #8]
 800ba10:	4b5c      	ldr	r3, [pc, #368]	; (800bb84 <_tx_queue_receive+0x210>)
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba16:	60da      	str	r2, [r3, #12]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba1c:	611a      	str	r2, [r3, #16]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba22:	615a      	str	r2, [r3, #20]
 800ba24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	619a      	str	r2, [r3, #24]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	691a      	ldr	r2, [r3, #16]
 800ba2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba30:	61da      	str	r2, [r3, #28]
 800ba32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba34:	3320      	adds	r3, #32
 800ba36:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba38:	4b53      	ldr	r3, [pc, #332]	; (800bb88 <_tx_queue_receive+0x214>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d314      	bcc.n	800ba6c <_tx_queue_receive+0xf8>
 800ba42:	4b52      	ldr	r3, [pc, #328]	; (800bb8c <_tx_queue_receive+0x218>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba48:	4a4a      	ldr	r2, [pc, #296]	; (800bb74 <_tx_queue_receive+0x200>)
 800ba4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	4b50      	ldr	r3, [pc, #320]	; (800bb90 <_tx_queue_receive+0x21c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba54:	621a      	str	r2, [r3, #32]
 800ba56:	4b4f      	ldr	r3, [pc, #316]	; (800bb94 <_tx_queue_receive+0x220>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00d      	beq.n	800ba7a <_tx_queue_receive+0x106>
 800ba5e:	4b4d      	ldr	r3, [pc, #308]	; (800bb94 <_tx_queue_receive+0x220>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a4b      	ldr	r2, [pc, #300]	; (800bb90 <_tx_queue_receive+0x21c>)
 800ba64:	6812      	ldr	r2, [r2, #0]
 800ba66:	4610      	mov	r0, r2
 800ba68:	4798      	blx	r3
 800ba6a:	e006      	b.n	800ba7a <_tx_queue_receive+0x106>
 800ba6c:	4a41      	ldr	r2, [pc, #260]	; (800bb74 <_tx_queue_receive+0x200>)
 800ba6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	4b47      	ldr	r3, [pc, #284]	; (800bb90 <_tx_queue_receive+0x21c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba78:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8149 	beq.w	800bd1c <_tx_queue_receive+0x3a8>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800ba8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d13c      	bne.n	800bb0a <_tx_queue_receive+0x196>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6a1b      	ldr	r3, [r3, #32]
 800ba94:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800baa0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800baa2:	1d13      	adds	r3, r2, #4
 800baa4:	667b      	str	r3, [r7, #100]	; 0x64
 800baa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baa8:	1d19      	adds	r1, r3, #4
 800baaa:	6639      	str	r1, [r7, #96]	; 0x60
 800baac:	6812      	ldr	r2, [r2, #0]
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d90e      	bls.n	800bad4 <_tx_queue_receive+0x160>
 800bab6:	e007      	b.n	800bac8 <_tx_queue_receive+0x154>
 800bab8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800baba:	1d13      	adds	r3, r2, #4
 800babc:	667b      	str	r3, [r7, #100]	; 0x64
 800babe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bac0:	1d19      	adds	r1, r3, #4
 800bac2:	6639      	str	r1, [r7, #96]	; 0x60
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baca:	3b01      	subs	r3, #1
 800bacc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1f1      	bne.n	800bab8 <_tx_queue_receive+0x144>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	69db      	ldr	r3, [r3, #28]
 800bad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bada:	429a      	cmp	r2, r3
 800badc:	d102      	bne.n	800bae4 <_tx_queue_receive+0x170>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	667b      	str	r3, [r7, #100]	; 0x64
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bae8:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	1e5a      	subs	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	611a      	str	r2, [r3, #16]
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb04:	f383 8810 	msr	PRIMASK, r3
}
 800bb08:	e176      	b.n	800bdf8 <_tx_queue_receive+0x484>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800bb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d166      	bne.n	800bbe8 <_tx_queue_receive+0x274>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb1e:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bb2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb2c:	1d13      	adds	r3, r2, #4
 800bb2e:	667b      	str	r3, [r7, #100]	; 0x64
 800bb30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb32:	1d19      	adds	r1, r3, #4
 800bb34:	6639      	str	r1, [r7, #96]	; 0x60
 800bb36:	6812      	ldr	r2, [r2, #0]
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d90e      	bls.n	800bb5e <_tx_queue_receive+0x1ea>
 800bb40:	e007      	b.n	800bb52 <_tx_queue_receive+0x1de>
 800bb42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb44:	1d13      	adds	r3, r2, #4
 800bb46:	667b      	str	r3, [r7, #100]	; 0x64
 800bb48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb4a:	1d19      	adds	r1, r3, #4
 800bb4c:	6639      	str	r1, [r7, #96]	; 0x60
 800bb4e:	6812      	ldr	r2, [r2, #0]
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb54:	3b01      	subs	r3, #1
 800bb56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1f1      	bne.n	800bb42 <_tx_queue_receive+0x1ce>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb60:	3b01      	subs	r3, #1
 800bb62:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d116      	bne.n	800bb98 <_tx_queue_receive+0x224>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	629a      	str	r2, [r3, #40]	; 0x28
 800bb70:	e021      	b.n	800bbb6 <_tx_queue_receive+0x242>
 800bb72:	bf00      	nop
 800bb74:	20001c9c 	.word	0x20001c9c
 800bb78:	20001ca0 	.word	0x20001ca0
 800bb7c:	2000000c 	.word	0x2000000c
 800bb80:	20001680 	.word	0x20001680
 800bb84:	e0001004 	.word	0xe0001004
 800bb88:	20001c98 	.word	0x20001c98
 800bb8c:	20001c94 	.word	0x20001c94
 800bb90:	20001c88 	.word	0x20001c88
 800bb94:	20001ca4 	.word	0x20001ca4
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb9c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bba8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbae:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800bbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbb4:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbba:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bbca:	4b8e      	ldr	r3, [pc, #568]	; (800be04 <_tx_queue_receive+0x490>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	4a8c      	ldr	r2, [pc, #560]	; (800be04 <_tx_queue_receive+0x490>)
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	f383 8810 	msr	PRIMASK, r3
}
 800bbde:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bbe0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbe2:	f001 f973 	bl	800cecc <_tx_thread_system_resume>
 800bbe6:	e107      	b.n	800bdf8 <_tx_queue_receive+0x484>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6a1b      	ldr	r3, [r3, #32]
 800bbec:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bbf8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bbfa:	1d13      	adds	r3, r2, #4
 800bbfc:	667b      	str	r3, [r7, #100]	; 0x64
 800bbfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc00:	1d19      	adds	r1, r3, #4
 800bc02:	6639      	str	r1, [r7, #96]	; 0x60
 800bc04:	6812      	ldr	r2, [r2, #0]
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d90e      	bls.n	800bc2c <_tx_queue_receive+0x2b8>
 800bc0e:	e007      	b.n	800bc20 <_tx_queue_receive+0x2ac>
 800bc10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc12:	1d13      	adds	r3, r2, #4
 800bc14:	667b      	str	r3, [r7, #100]	; 0x64
 800bc16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc18:	1d19      	adds	r1, r3, #4
 800bc1a:	6639      	str	r1, [r7, #96]	; 0x60
 800bc1c:	6812      	ldr	r2, [r2, #0]
 800bc1e:	601a      	str	r2, [r3, #0]
 800bc20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc22:	3b01      	subs	r3, #1
 800bc24:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1f1      	bne.n	800bc10 <_tx_queue_receive+0x29c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d102      	bne.n	800bc3c <_tx_queue_receive+0x2c8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	667b      	str	r3, [r7, #100]	; 0x64
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc40:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800bc42:	4b70      	ldr	r3, [pc, #448]	; (800be04 <_tx_queue_receive+0x490>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	4a6e      	ldr	r2, [pc, #440]	; (800be04 <_tx_queue_receive+0x490>)
 800bc4a:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800bc4c:	4b6d      	ldr	r3, [pc, #436]	; (800be04 <_tx_queue_receive+0x490>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	4a6c      	ldr	r2, [pc, #432]	; (800be04 <_tx_queue_receive+0x490>)
 800bc54:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc5a:	667b      	str	r3, [r7, #100]	; 0x64
                destination =  queue_ptr -> tx_queue_write;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	663b      	str	r3, [r7, #96]	; 0x60
                size =         queue_ptr -> tx_queue_message_size;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bc68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc6a:	1d13      	adds	r3, r2, #4
 800bc6c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc70:	1d19      	adds	r1, r3, #4
 800bc72:	6639      	str	r1, [r7, #96]	; 0x60
 800bc74:	6812      	ldr	r2, [r2, #0]
 800bc76:	601a      	str	r2, [r3, #0]
 800bc78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d90e      	bls.n	800bc9c <_tx_queue_receive+0x328>
 800bc7e:	e007      	b.n	800bc90 <_tx_queue_receive+0x31c>
 800bc80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc82:	1d13      	adds	r3, r2, #4
 800bc84:	667b      	str	r3, [r7, #100]	; 0x64
 800bc86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc88:	1d19      	adds	r1, r3, #4
 800bc8a:	6639      	str	r1, [r7, #96]	; 0x60
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc92:	3b01      	subs	r3, #1
 800bc94:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1f1      	bne.n	800bc80 <_tx_queue_receive+0x30c>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d102      	bne.n	800bcac <_tx_queue_receive+0x338>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	663b      	str	r3, [r7, #96]	; 0x60
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcb0:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb6:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bcb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bcbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <_tx_queue_receive+0x358>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	629a      	str	r2, [r3, #40]	; 0x28
 800bcca:	e00e      	b.n	800bcea <_tx_queue_receive+0x376>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcd6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bce2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bce8:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcee:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bcfe:	4b41      	ldr	r3, [pc, #260]	; (800be04 <_tx_queue_receive+0x490>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3301      	adds	r3, #1
 800bd04:	4a3f      	ldr	r2, [pc, #252]	; (800be04 <_tx_queue_receive+0x490>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	f383 8810 	msr	PRIMASK, r3
}
 800bd12:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bd14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd16:	f001 f8d9 	bl	800cecc <_tx_thread_system_resume>
 800bd1a:	e06d      	b.n	800bdf8 <_tx_queue_receive+0x484>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d062      	beq.n	800bde8 <_tx_queue_receive+0x474>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bd22:	4b38      	ldr	r3, [pc, #224]	; (800be04 <_tx_queue_receive+0x490>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d008      	beq.n	800bd3c <_tx_queue_receive+0x3c8>
 800bd2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd2c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	f383 8810 	msr	PRIMASK, r3
}
 800bd34:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bd36:	230a      	movs	r3, #10
 800bd38:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd3a:	e05d      	b.n	800bdf8 <_tx_queue_receive+0x484>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd3c:	4b32      	ldr	r3, [pc, #200]	; (800be08 <_tx_queue_receive+0x494>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd44:	4a31      	ldr	r2, [pc, #196]	; (800be0c <_tx_queue_receive+0x498>)
 800bd46:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd66:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bd6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d109      	bne.n	800bd84 <_tx_queue_receive+0x410>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd74:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bd76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd7a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd80:	675a      	str	r2, [r3, #116]	; 0x74
 800bd82:	e011      	b.n	800bda8 <_tx_queue_receive+0x434>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd88:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bd8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd8e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd94:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd9a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bda0:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bda6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800bda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb2:	2205      	movs	r2, #5
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb8:	2201      	movs	r2, #1
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bdbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bdc2:	4b10      	ldr	r3, [pc, #64]	; (800be04 <_tx_queue_receive+0x490>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	4a0e      	ldr	r2, [pc, #56]	; (800be04 <_tx_queue_receive+0x490>)
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdce:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	f383 8810 	msr	PRIMASK, r3
}
 800bdd6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bdd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdda:	f001 fa31 	bl	800d240 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bde6:	e007      	b.n	800bdf8 <_tx_queue_receive+0x484>
 800bde8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f383 8810 	msr	PRIMASK, r3
}
 800bdf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800bdf4:	230a      	movs	r3, #10
 800bdf6:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800bdf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3768      	adds	r7, #104	; 0x68
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	20001718 	.word	0x20001718
 800be08:	20001680 	.word	0x20001680
 800be0c:	0800b449 	.word	0x0800b449

0800be10 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b09a      	sub	sp, #104	; 0x68
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800be1c:	2300      	movs	r3, #0
 800be1e:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be20:	f3ef 8310 	mrs	r3, PRIMASK
 800be24:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800be28:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800be2a:	b672      	cpsid	i
    return(int_posture);
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800be2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Increment the number of messages sent to this queue.  */
    queue_ptr -> tx_queue_performance_messages_sent_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_QUEUE_SEND, queue_ptr, TX_POINTER_TO_ULONG_CONVERT(source_ptr), wait_option, queue_ptr -> tx_queue_enqueued, TX_TRACE_QUEUE_EVENTS)
 800be30:	4b7a      	ldr	r3, [pc, #488]	; (800c01c <_tx_queue_send+0x20c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	64bb      	str	r3, [r7, #72]	; 0x48
 800be36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d06c      	beq.n	800bf16 <_tx_queue_send+0x106>
 800be3c:	4b78      	ldr	r3, [pc, #480]	; (800c020 <_tx_queue_send+0x210>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be44:	2b00      	cmp	r3, #0
 800be46:	d066      	beq.n	800bf16 <_tx_queue_send+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be48:	f3ef 8305 	mrs	r3, IPSR
 800be4c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800be4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be50:	4b74      	ldr	r3, [pc, #464]	; (800c024 <_tx_queue_send+0x214>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4313      	orrs	r3, r2
 800be56:	647b      	str	r3, [r7, #68]	; 0x44
 800be58:	4b73      	ldr	r3, [pc, #460]	; (800c028 <_tx_queue_send+0x218>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	653b      	str	r3, [r7, #80]	; 0x50
 800be5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10b      	bne.n	800be7c <_tx_queue_send+0x6c>
 800be64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	657b      	str	r3, [r7, #84]	; 0x54
 800be6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be6e:	041a      	lsls	r2, r3, #16
 800be70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be72:	4313      	orrs	r3, r2
 800be74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be78:	657b      	str	r3, [r7, #84]	; 0x54
 800be7a:	e00e      	b.n	800be9a <_tx_queue_send+0x8a>
 800be7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be7e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800be82:	d205      	bcs.n	800be90 <_tx_queue_send+0x80>
 800be84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be86:	657b      	str	r3, [r7, #84]	; 0x54
 800be88:	f04f 33ff 	mov.w	r3, #4294967295
 800be8c:	653b      	str	r3, [r7, #80]	; 0x50
 800be8e:	e004      	b.n	800be9a <_tx_queue_send+0x8a>
 800be90:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800be94:	653b      	str	r3, [r7, #80]	; 0x50
 800be96:	2300      	movs	r3, #0
 800be98:	657b      	str	r3, [r7, #84]	; 0x54
 800be9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bea4:	605a      	str	r2, [r3, #4]
 800bea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea8:	2245      	movs	r2, #69	; 0x45
 800beaa:	609a      	str	r2, [r3, #8]
 800beac:	4b5f      	ldr	r3, [pc, #380]	; (800c02c <_tx_queue_send+0x21c>)
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb2:	60da      	str	r2, [r3, #12]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb8:	611a      	str	r2, [r3, #16]
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bebe:	615a      	str	r2, [r3, #20]
 800bec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	619a      	str	r2, [r3, #24]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	691a      	ldr	r2, [r3, #16]
 800beca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800becc:	61da      	str	r2, [r3, #28]
 800bece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed0:	3320      	adds	r3, #32
 800bed2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed4:	4b56      	ldr	r3, [pc, #344]	; (800c030 <_tx_queue_send+0x220>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beda:	429a      	cmp	r2, r3
 800bedc:	d314      	bcc.n	800bf08 <_tx_queue_send+0xf8>
 800bede:	4b55      	ldr	r3, [pc, #340]	; (800c034 <_tx_queue_send+0x224>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bee4:	4a4d      	ldr	r2, [pc, #308]	; (800c01c <_tx_queue_send+0x20c>)
 800bee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bee8:	6013      	str	r3, [r2, #0]
 800beea:	4b53      	ldr	r3, [pc, #332]	; (800c038 <_tx_queue_send+0x228>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef0:	621a      	str	r2, [r3, #32]
 800bef2:	4b52      	ldr	r3, [pc, #328]	; (800c03c <_tx_queue_send+0x22c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00d      	beq.n	800bf16 <_tx_queue_send+0x106>
 800befa:	4b50      	ldr	r3, [pc, #320]	; (800c03c <_tx_queue_send+0x22c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a4e      	ldr	r2, [pc, #312]	; (800c038 <_tx_queue_send+0x228>)
 800bf00:	6812      	ldr	r2, [r2, #0]
 800bf02:	4610      	mov	r0, r2
 800bf04:	4798      	blx	r3
 800bf06:	e006      	b.n	800bf16 <_tx_queue_send+0x106>
 800bf08:	4a44      	ldr	r2, [pc, #272]	; (800c01c <_tx_queue_send+0x20c>)
 800bf0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf0c:	6013      	str	r3, [r2, #0]
 800bf0e:	4b4a      	ldr	r3, [pc, #296]	; (800c038 <_tx_queue_send+0x228>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf14:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 80ae 	beq.w	800c082 <_tx_queue_send+0x272>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bf26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d13c      	bne.n	800bfa6 <_tx_queue_send+0x196>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	1e5a      	subs	r2, r3, #1
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  queue_ptr -> tx_queue_write;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf48:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bf50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf52:	1d13      	adds	r3, r2, #4
 800bf54:	667b      	str	r3, [r7, #100]	; 0x64
 800bf56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf58:	1d19      	adds	r1, r3, #4
 800bf5a:	6639      	str	r1, [r7, #96]	; 0x60
 800bf5c:	6812      	ldr	r2, [r2, #0]
 800bf5e:	601a      	str	r2, [r3, #0]
 800bf60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d90e      	bls.n	800bf84 <_tx_queue_send+0x174>
 800bf66:	e007      	b.n	800bf78 <_tx_queue_send+0x168>
 800bf68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf6a:	1d13      	adds	r3, r2, #4
 800bf6c:	667b      	str	r3, [r7, #100]	; 0x64
 800bf6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf70:	1d19      	adds	r1, r3, #4
 800bf72:	6639      	str	r1, [r7, #96]	; 0x60
 800bf74:	6812      	ldr	r2, [r2, #0]
 800bf76:	601a      	str	r2, [r3, #0]
 800bf78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1f1      	bne.n	800bf68 <_tx_queue_send+0x158>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	69db      	ldr	r3, [r3, #28]
 800bf88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d102      	bne.n	800bf94 <_tx_queue_send+0x184>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf98:	625a      	str	r2, [r3, #36]	; 0x24
 800bf9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	f383 8810 	msr	PRIMASK, r3
}
 800bfa4:	e0db      	b.n	800c15e <_tx_queue_send+0x34e>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800bfac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	643b      	str	r3, [r7, #64]	; 0x40
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bfb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d103      	bne.n	800bfc0 <_tx_queue_send+0x1b0>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	629a      	str	r2, [r3, #40]	; 0x28
 800bfbe:	e012      	b.n	800bfe6 <_tx_queue_send+0x1d6>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfcc:	63bb      	str	r3, [r7, #56]	; 0x38
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfd2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfd8:	637b      	str	r3, [r7, #52]	; 0x34
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfde:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800bfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfea:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfee:	2200      	movs	r2, #0
 800bff0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	667b      	str	r3, [r7, #100]	; 0x64
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bffa:	663b      	str	r3, [r7, #96]	; 0x60
            size =         queue_ptr -> tx_queue_message_size;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800c002:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c004:	1d13      	adds	r3, r2, #4
 800c006:	667b      	str	r3, [r7, #100]	; 0x64
 800c008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c00a:	1d19      	adds	r1, r3, #4
 800c00c:	6639      	str	r1, [r7, #96]	; 0x60
 800c00e:	6812      	ldr	r2, [r2, #0]
 800c010:	601a      	str	r2, [r3, #0]
 800c012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c014:	2b01      	cmp	r3, #1
 800c016:	d921      	bls.n	800c05c <_tx_queue_send+0x24c>
 800c018:	e01a      	b.n	800c050 <_tx_queue_send+0x240>
 800c01a:	bf00      	nop
 800c01c:	20001c9c 	.word	0x20001c9c
 800c020:	20001ca0 	.word	0x20001ca0
 800c024:	2000000c 	.word	0x2000000c
 800c028:	20001680 	.word	0x20001680
 800c02c:	e0001004 	.word	0xe0001004
 800c030:	20001c98 	.word	0x20001c98
 800c034:	20001c94 	.word	0x20001c94
 800c038:	20001c88 	.word	0x20001c88
 800c03c:	20001ca4 	.word	0x20001ca4
 800c040:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c042:	1d13      	adds	r3, r2, #4
 800c044:	667b      	str	r3, [r7, #100]	; 0x64
 800c046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c048:	1d19      	adds	r1, r3, #4
 800c04a:	6639      	str	r1, [r7, #96]	; 0x60
 800c04c:	6812      	ldr	r2, [r2, #0]
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c052:	3b01      	subs	r3, #1
 800c054:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f1      	bne.n	800c040 <_tx_queue_send+0x230>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05e:	2200      	movs	r2, #0
 800c060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c064:	4b40      	ldr	r3, [pc, #256]	; (800c168 <_tx_queue_send+0x358>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3301      	adds	r3, #1
 800c06a:	4a3f      	ldr	r2, [pc, #252]	; (800c168 <_tx_queue_send+0x358>)
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c070:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	f383 8810 	msr	PRIMASK, r3
}
 800c078:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800c07a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c07c:	f000 ff26 	bl	800cecc <_tx_thread_system_resume>
 800c080:	e06d      	b.n	800c15e <_tx_queue_send+0x34e>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d062      	beq.n	800c14e <_tx_queue_send+0x33e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c088:	4b37      	ldr	r3, [pc, #220]	; (800c168 <_tx_queue_send+0x358>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d008      	beq.n	800c0a2 <_tx_queue_send+0x292>
 800c090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c092:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	f383 8810 	msr	PRIMASK, r3
}
 800c09a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800c09c:	230b      	movs	r3, #11
 800c09e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0a0:	e05d      	b.n	800c15e <_tx_queue_send+0x34e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c0a2:	4b32      	ldr	r3, [pc, #200]	; (800c16c <_tx_queue_send+0x35c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800c0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0aa:	4a31      	ldr	r2, [pc, #196]	; (800c170 <_tx_queue_send+0x360>)
 800c0ac:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800c0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800c0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800c0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800c0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <_tx_queue_send+0x2da>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0da:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0e0:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0e6:	675a      	str	r2, [r3, #116]	; 0x74
 800c0e8:	e011      	b.n	800c10e <_tx_queue_send+0x2fe>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ee:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0f4:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0fa:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c100:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c106:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c10c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800c10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c110:	1c5a      	adds	r2, r3, #1
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800c116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c118:	2205      	movs	r2, #5
 800c11a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11e:	2201      	movs	r2, #1
 800c120:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c128:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <_tx_queue_send+0x358>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3301      	adds	r3, #1
 800c12e:	4a0e      	ldr	r2, [pc, #56]	; (800c168 <_tx_queue_send+0x358>)
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c134:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	f383 8810 	msr	PRIMASK, r3
}
 800c13c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c13e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c140:	f001 f87e 	bl	800d240 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c14a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c14c:	e007      	b.n	800c15e <_tx_queue_send+0x34e>
 800c14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c150:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f383 8810 	msr	PRIMASK, r3
}
 800c158:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800c15a:	230b      	movs	r3, #11
 800c15c:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Return completion status.  */
    return(status);
 800c15e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800c160:	4618      	mov	r0, r3
 800c162:	3768      	adds	r7, #104	; 0x68
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	20001718 	.word	0x20001718
 800c16c:	20001680 	.word	0x20001680
 800c170:	0800b449 	.word	0x0800b449

0800c174 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b092      	sub	sp, #72	; 0x48
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c17e:	2300      	movs	r3, #0
 800c180:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c182:	f3ef 8310 	mrs	r3, PRIMASK
 800c186:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c188:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c18a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c18c:	b672      	cpsid	i
    return(int_posture);
 800c18e:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c190:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of puts on this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CEILING_PUT, semaphore_ptr, semaphore_ptr -> tx_semaphore_count, semaphore_ptr -> tx_semaphore_suspended_count, ceiling, TX_TRACE_SEMAPHORE_EVENTS)
 800c192:	4b67      	ldr	r3, [pc, #412]	; (800c330 <_tx_semaphore_ceiling_put+0x1bc>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	637b      	str	r3, [r7, #52]	; 0x34
 800c198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d06d      	beq.n	800c27a <_tx_semaphore_ceiling_put+0x106>
 800c19e:	4b65      	ldr	r3, [pc, #404]	; (800c334 <_tx_semaphore_ceiling_put+0x1c0>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d067      	beq.n	800c27a <_tx_semaphore_ceiling_put+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1aa:	f3ef 8305 	mrs	r3, IPSR
 800c1ae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	4b61      	ldr	r3, [pc, #388]	; (800c338 <_tx_semaphore_ceiling_put+0x1c4>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	633b      	str	r3, [r7, #48]	; 0x30
 800c1ba:	4b60      	ldr	r3, [pc, #384]	; (800c33c <_tx_semaphore_ceiling_put+0x1c8>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10b      	bne.n	800c1de <_tx_semaphore_ceiling_put+0x6a>
 800c1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d0:	041a      	lsls	r2, r3, #16
 800c1d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1da:	643b      	str	r3, [r7, #64]	; 0x40
 800c1dc:	e00e      	b.n	800c1fc <_tx_semaphore_ceiling_put+0x88>
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c1e4:	d205      	bcs.n	800c1f2 <_tx_semaphore_ceiling_put+0x7e>
 800c1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e8:	643b      	str	r3, [r7, #64]	; 0x40
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f0:	e004      	b.n	800c1fc <_tx_semaphore_ceiling_put+0x88>
 800c1f2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c1fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c206:	605a      	str	r2, [r3, #4]
 800c208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20a:	2250      	movs	r2, #80	; 0x50
 800c20c:	609a      	str	r2, [r3, #8]
 800c20e:	4b4c      	ldr	r3, [pc, #304]	; (800c340 <_tx_semaphore_ceiling_put+0x1cc>)
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c214:	60da      	str	r2, [r3, #12]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21a:	611a      	str	r2, [r3, #16]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c222:	615a      	str	r2, [r3, #20]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	691a      	ldr	r2, [r3, #16]
 800c228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22a:	619a      	str	r2, [r3, #24]
 800c22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	61da      	str	r2, [r3, #28]
 800c232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c234:	3320      	adds	r3, #32
 800c236:	637b      	str	r3, [r7, #52]	; 0x34
 800c238:	4b42      	ldr	r3, [pc, #264]	; (800c344 <_tx_semaphore_ceiling_put+0x1d0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c23e:	429a      	cmp	r2, r3
 800c240:	d314      	bcc.n	800c26c <_tx_semaphore_ceiling_put+0xf8>
 800c242:	4b41      	ldr	r3, [pc, #260]	; (800c348 <_tx_semaphore_ceiling_put+0x1d4>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	637b      	str	r3, [r7, #52]	; 0x34
 800c248:	4a39      	ldr	r2, [pc, #228]	; (800c330 <_tx_semaphore_ceiling_put+0x1bc>)
 800c24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	4b3f      	ldr	r3, [pc, #252]	; (800c34c <_tx_semaphore_ceiling_put+0x1d8>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c254:	621a      	str	r2, [r3, #32]
 800c256:	4b3e      	ldr	r3, [pc, #248]	; (800c350 <_tx_semaphore_ceiling_put+0x1dc>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00d      	beq.n	800c27a <_tx_semaphore_ceiling_put+0x106>
 800c25e:	4b3c      	ldr	r3, [pc, #240]	; (800c350 <_tx_semaphore_ceiling_put+0x1dc>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a3a      	ldr	r2, [pc, #232]	; (800c34c <_tx_semaphore_ceiling_put+0x1d8>)
 800c264:	6812      	ldr	r2, [r2, #0]
 800c266:	4610      	mov	r0, r2
 800c268:	4798      	blx	r3
 800c26a:	e006      	b.n	800c27a <_tx_semaphore_ceiling_put+0x106>
 800c26c:	4a30      	ldr	r2, [pc, #192]	; (800c330 <_tx_semaphore_ceiling_put+0x1bc>)
 800c26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	4b36      	ldr	r3, [pc, #216]	; (800c34c <_tx_semaphore_ceiling_put+0x1d8>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c278:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	2b00      	cmp	r3, #0
 800c284:	d11b      	bne.n	800c2be <_tx_semaphore_ceiling_put+0x14a>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d808      	bhi.n	800c2a2 <_tx_semaphore_ceiling_put+0x12e>
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	f383 8810 	msr	PRIMASK, r3
}
 800c29a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 800c29c:	2321      	movs	r3, #33	; 0x21
 800c29e:	647b      	str	r3, [r7, #68]	; 0x44
 800c2a0:	e041      	b.n	800c326 <_tx_semaphore_ceiling_put+0x1b2>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	609a      	str	r2, [r3, #8]
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f383 8810 	msr	PRIMASK, r3
}
 800c2b6:	bf00      	nop
                (semaphore_put_notify)(semaphore_ptr);
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c2bc:	e033      	b.n	800c326 <_tx_semaphore_ceiling_put+0x1b2>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <_tx_semaphore_ceiling_put+0x164>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	e00e      	b.n	800c2f6 <_tx_semaphore_ceiling_put+0x182>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2dc:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2e8:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	6a3a      	ldr	r2, [r7, #32]
 800c2ee:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2fa:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	2200      	movs	r2, #0
 800c300:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	2200      	movs	r2, #0
 800c306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c30a:	4b12      	ldr	r3, [pc, #72]	; (800c354 <_tx_semaphore_ceiling_put+0x1e0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3301      	adds	r3, #1
 800c310:	4a10      	ldr	r2, [pc, #64]	; (800c354 <_tx_semaphore_ceiling_put+0x1e0>)
 800c312:	6013      	str	r3, [r2, #0]
 800c314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c316:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	f383 8810 	msr	PRIMASK, r3
}
 800c31e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c322:	f000 fdd3 	bl	800cecc <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800c326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3748      	adds	r7, #72	; 0x48
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	20001c9c 	.word	0x20001c9c
 800c334:	20001ca0 	.word	0x20001ca0
 800c338:	2000000c 	.word	0x2000000c
 800c33c:	20001680 	.word	0x20001680
 800c340:	e0001004 	.word	0xe0001004
 800c344:	20001c98 	.word	0x20001c98
 800c348:	20001c94 	.word	0x20001c94
 800c34c:	20001c88 	.word	0x20001c88
 800c350:	20001ca4 	.word	0x20001ca4
 800c354:	20001718 	.word	0x20001718

0800c358 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08e      	sub	sp, #56	; 0x38
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c362:	f3ef 8310 	mrs	r3, PRIMASK
 800c366:	623b      	str	r3, [r7, #32]
    return(posture);
 800c368:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c36a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c36c:	b672      	cpsid	i
    return(int_posture);
 800c36e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800c370:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c376:	4a33      	ldr	r2, [pc, #204]	; (800c444 <_tx_semaphore_cleanup+0xec>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d158      	bne.n	800c42e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	429a      	cmp	r2, r3
 800c386:	d152      	bne.n	800c42e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	2b00      	cmp	r3, #0
 800c392:	d04c      	beq.n	800c42e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a2b      	ldr	r2, [pc, #172]	; (800c448 <_tx_semaphore_cleanup+0xf0>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d147      	bne.n	800c42e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d043      	beq.n	800c42e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	1e5a      	subs	r2, r3, #1
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d103      	bne.n	800c3ca <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	60da      	str	r2, [r3, #12]
 800c3c8:	e013      	b.n	800c3f2 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ce:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3da:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d102      	bne.n	800c3f2 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f6:	2b06      	cmp	r3, #6
 800c3f8:	d119      	bne.n	800c42e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	220d      	movs	r2, #13
 800c3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c402:	4b12      	ldr	r3, [pc, #72]	; (800c44c <_tx_semaphore_cleanup+0xf4>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3301      	adds	r3, #1
 800c408:	4a10      	ldr	r2, [pc, #64]	; (800c44c <_tx_semaphore_cleanup+0xf4>)
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	f383 8810 	msr	PRIMASK, r3
}
 800c416:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fd57 	bl	800cecc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c41e:	f3ef 8310 	mrs	r3, PRIMASK
 800c422:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c424:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c426:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c428:	b672      	cpsid	i
    return(int_posture);
 800c42a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c42c:	637b      	str	r3, [r7, #52]	; 0x34
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c430:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f383 8810 	msr	PRIMASK, r3
}
 800c438:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c43a:	bf00      	nop
 800c43c:	3738      	adds	r7, #56	; 0x38
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	0800c359 	.word	0x0800c359
 800c448:	53454d41 	.word	0x53454d41
 800c44c:	20001718 	.word	0x20001718

0800c450 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b092      	sub	sp, #72	; 0x48
 800c454:	af02      	add	r7, sp, #8
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c45c:	221c      	movs	r2, #28
 800c45e:	2100      	movs	r1, #0
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f008 f939 	bl	80146d8 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c472:	f3ef 8310 	mrs	r3, PRIMASK
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c47a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c47c:	b672      	cpsid	i
    return(int_posture);
 800c47e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c480:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4a56      	ldr	r2, [pc, #344]	; (800c5e0 <_tx_semaphore_create+0x190>)
 800c486:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c488:	4b56      	ldr	r3, [pc, #344]	; (800c5e4 <_tx_semaphore_create+0x194>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d109      	bne.n	800c4a4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c490:	4a55      	ldr	r2, [pc, #340]	; (800c5e8 <_tx_semaphore_create+0x198>)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	619a      	str	r2, [r3, #24]
 800c4a2:	e011      	b.n	800c4c8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c4a4:	4b50      	ldr	r3, [pc, #320]	; (800c5e8 <_tx_semaphore_create+0x198>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	617b      	str	r3, [r7, #20]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c4c8:	4b46      	ldr	r3, [pc, #280]	; (800c5e4 <_tx_semaphore_create+0x194>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	4a45      	ldr	r2, [pc, #276]	; (800c5e4 <_tx_semaphore_create+0x194>)
 800c4d0:	6013      	str	r3, [r2, #0]

    /* Optional semaphore create extended processing.  */
    TX_SEMAPHORE_CREATE_EXTENSION(semaphore_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, name_ptr, initial_count, 0)
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	68f9      	ldr	r1, [r7, #12]
 800c4dc:	2004      	movs	r0, #4
 800c4de:	f001 fc17 	bl	800dd10 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_CREATE, semaphore_ptr, initial_count, TX_POINTER_TO_ULONG_CONVERT(&next_semaphore), 0, TX_TRACE_SEMAPHORE_EVENTS)
 800c4e2:	4b42      	ldr	r3, [pc, #264]	; (800c5ec <_tx_semaphore_create+0x19c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d06c      	beq.n	800c5c8 <_tx_semaphore_create+0x178>
 800c4ee:	4b40      	ldr	r3, [pc, #256]	; (800c5f0 <_tx_semaphore_create+0x1a0>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d066      	beq.n	800c5c8 <_tx_semaphore_create+0x178>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4fa:	f3ef 8305 	mrs	r3, IPSR
 800c4fe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c500:	69fa      	ldr	r2, [r7, #28]
 800c502:	4b3c      	ldr	r3, [pc, #240]	; (800c5f4 <_tx_semaphore_create+0x1a4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4313      	orrs	r3, r2
 800c508:	62bb      	str	r3, [r7, #40]	; 0x28
 800c50a:	4b3b      	ldr	r3, [pc, #236]	; (800c5f8 <_tx_semaphore_create+0x1a8>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10b      	bne.n	800c52e <_tx_semaphore_create+0xde>
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c520:	041a      	lsls	r2, r3, #16
 800c522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c524:	4313      	orrs	r3, r2
 800c526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52c:	e00e      	b.n	800c54c <_tx_semaphore_create+0xfc>
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c534:	d205      	bcs.n	800c542 <_tx_semaphore_create+0xf2>
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53a:	f04f 33ff 	mov.w	r3, #4294967295
 800c53e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c540:	e004      	b.n	800c54c <_tx_semaphore_create+0xfc>
 800c542:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c546:	63bb      	str	r3, [r7, #56]	; 0x38
 800c548:	2300      	movs	r3, #0
 800c54a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c54c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c556:	605a      	str	r2, [r3, #4]
 800c558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55a:	2251      	movs	r2, #81	; 0x51
 800c55c:	609a      	str	r2, [r3, #8]
 800c55e:	4b27      	ldr	r3, [pc, #156]	; (800c5fc <_tx_semaphore_create+0x1ac>)
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	60da      	str	r2, [r3, #12]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	611a      	str	r2, [r3, #16]
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	615a      	str	r2, [r3, #20]
 800c572:	f107 0214 	add.w	r2, r7, #20
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	619a      	str	r2, [r3, #24]
 800c57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57c:	2200      	movs	r2, #0
 800c57e:	61da      	str	r2, [r3, #28]
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	3320      	adds	r3, #32
 800c584:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c586:	4b1e      	ldr	r3, [pc, #120]	; (800c600 <_tx_semaphore_create+0x1b0>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d314      	bcc.n	800c5ba <_tx_semaphore_create+0x16a>
 800c590:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <_tx_semaphore_create+0x1b4>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c596:	4a15      	ldr	r2, [pc, #84]	; (800c5ec <_tx_semaphore_create+0x19c>)
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	4b1a      	ldr	r3, [pc, #104]	; (800c608 <_tx_semaphore_create+0x1b8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5a2:	621a      	str	r2, [r3, #32]
 800c5a4:	4b19      	ldr	r3, [pc, #100]	; (800c60c <_tx_semaphore_create+0x1bc>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00d      	beq.n	800c5c8 <_tx_semaphore_create+0x178>
 800c5ac:	4b17      	ldr	r3, [pc, #92]	; (800c60c <_tx_semaphore_create+0x1bc>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a15      	ldr	r2, [pc, #84]	; (800c608 <_tx_semaphore_create+0x1b8>)
 800c5b2:	6812      	ldr	r2, [r2, #0]
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	4798      	blx	r3
 800c5b8:	e006      	b.n	800c5c8 <_tx_semaphore_create+0x178>
 800c5ba:	4a0c      	ldr	r2, [pc, #48]	; (800c5ec <_tx_semaphore_create+0x19c>)
 800c5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5be:	6013      	str	r3, [r2, #0]
 800c5c0:	4b11      	ldr	r3, [pc, #68]	; (800c608 <_tx_semaphore_create+0x1b8>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5c6:	621a      	str	r2, [r3, #32]
 800c5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	f383 8810 	msr	PRIMASK, r3
}
 800c5d2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3740      	adds	r7, #64	; 0x40
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	53454d41 	.word	0x53454d41
 800c5e4:	2000164c 	.word	0x2000164c
 800c5e8:	20001648 	.word	0x20001648
 800c5ec:	20001c9c 	.word	0x20001c9c
 800c5f0:	20001ca0 	.word	0x20001ca0
 800c5f4:	2000000c 	.word	0x2000000c
 800c5f8:	20001680 	.word	0x20001680
 800c5fc:	e0001004 	.word	0xe0001004
 800c600:	20001c98 	.word	0x20001c98
 800c604:	20001c94 	.word	0x20001c94
 800c608:	20001c88 	.word	0x20001c88
 800c60c:	20001ca4 	.word	0x20001ca4

0800c610 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b092      	sub	sp, #72	; 0x48
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c61a:	2300      	movs	r3, #0
 800c61c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c61e:	f3ef 8310 	mrs	r3, PRIMASK
 800c622:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c626:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c628:	b672      	cpsid	i
    return(int_posture);
 800c62a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c62c:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Increment the number of attempts to get this semaphore.  */
    semaphore_ptr -> tx_semaphore_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_SEMAPHORE_GET, semaphore_ptr, wait_option, semaphore_ptr -> tx_semaphore_count, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_SEMAPHORE_EVENTS)
 800c62e:	4b78      	ldr	r3, [pc, #480]	; (800c810 <_tx_semaphore_get+0x200>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	637b      	str	r3, [r7, #52]	; 0x34
 800c634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c636:	2b00      	cmp	r3, #0
 800c638:	d06d      	beq.n	800c716 <_tx_semaphore_get+0x106>
 800c63a:	4b76      	ldr	r3, [pc, #472]	; (800c814 <_tx_semaphore_get+0x204>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c642:	2b00      	cmp	r3, #0
 800c644:	d067      	beq.n	800c716 <_tx_semaphore_get+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c646:	f3ef 8305 	mrs	r3, IPSR
 800c64a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	4b72      	ldr	r3, [pc, #456]	; (800c818 <_tx_semaphore_get+0x208>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4313      	orrs	r3, r2
 800c654:	633b      	str	r3, [r7, #48]	; 0x30
 800c656:	4b71      	ldr	r3, [pc, #452]	; (800c81c <_tx_semaphore_get+0x20c>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10b      	bne.n	800c67a <_tx_semaphore_get+0x6a>
 800c662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c666:	643b      	str	r3, [r7, #64]	; 0x40
 800c668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c66c:	041a      	lsls	r2, r3, #16
 800c66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c670:	4313      	orrs	r3, r2
 800c672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c676:	643b      	str	r3, [r7, #64]	; 0x40
 800c678:	e00e      	b.n	800c698 <_tx_semaphore_get+0x88>
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c680:	d205      	bcs.n	800c68e <_tx_semaphore_get+0x7e>
 800c682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c684:	643b      	str	r3, [r7, #64]	; 0x40
 800c686:	f04f 33ff 	mov.w	r3, #4294967295
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c68c:	e004      	b.n	800c698 <_tx_semaphore_get+0x88>
 800c68e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c694:	2300      	movs	r3, #0
 800c696:	643b      	str	r3, [r7, #64]	; 0x40
 800c698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6a2:	605a      	str	r2, [r3, #4]
 800c6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a6:	2253      	movs	r2, #83	; 0x53
 800c6a8:	609a      	str	r2, [r3, #8]
 800c6aa:	4b5d      	ldr	r3, [pc, #372]	; (800c820 <_tx_semaphore_get+0x210>)
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b0:	60da      	str	r2, [r3, #12]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b6:	611a      	str	r2, [r3, #16]
 800c6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	615a      	str	r2, [r3, #20]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689a      	ldr	r2, [r3, #8]
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c4:	619a      	str	r2, [r3, #24]
 800c6c6:	f107 0208 	add.w	r2, r7, #8
 800c6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6cc:	61da      	str	r2, [r3, #28]
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d0:	3320      	adds	r3, #32
 800c6d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6d4:	4b53      	ldr	r3, [pc, #332]	; (800c824 <_tx_semaphore_get+0x214>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d314      	bcc.n	800c708 <_tx_semaphore_get+0xf8>
 800c6de:	4b52      	ldr	r3, [pc, #328]	; (800c828 <_tx_semaphore_get+0x218>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6e4:	4a4a      	ldr	r2, [pc, #296]	; (800c810 <_tx_semaphore_get+0x200>)
 800c6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e8:	6013      	str	r3, [r2, #0]
 800c6ea:	4b50      	ldr	r3, [pc, #320]	; (800c82c <_tx_semaphore_get+0x21c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6f0:	621a      	str	r2, [r3, #32]
 800c6f2:	4b4f      	ldr	r3, [pc, #316]	; (800c830 <_tx_semaphore_get+0x220>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00d      	beq.n	800c716 <_tx_semaphore_get+0x106>
 800c6fa:	4b4d      	ldr	r3, [pc, #308]	; (800c830 <_tx_semaphore_get+0x220>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a4b      	ldr	r2, [pc, #300]	; (800c82c <_tx_semaphore_get+0x21c>)
 800c700:	6812      	ldr	r2, [r2, #0]
 800c702:	4610      	mov	r0, r2
 800c704:	4798      	blx	r3
 800c706:	e006      	b.n	800c716 <_tx_semaphore_get+0x106>
 800c708:	4a41      	ldr	r2, [pc, #260]	; (800c810 <_tx_semaphore_get+0x200>)
 800c70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	4b47      	ldr	r3, [pc, #284]	; (800c82c <_tx_semaphore_get+0x21c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c714:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00a      	beq.n	800c734 <_tx_semaphore_get+0x124>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	1e5a      	subs	r2, r3, #1
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	609a      	str	r2, [r3, #8]
 800c728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	f383 8810 	msr	PRIMASK, r3
}
 800c732:	e068      	b.n	800c806 <_tx_semaphore_get+0x1f6>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d05d      	beq.n	800c7f6 <_tx_semaphore_get+0x1e6>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c73a:	4b3e      	ldr	r3, [pc, #248]	; (800c834 <_tx_semaphore_get+0x224>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d008      	beq.n	800c754 <_tx_semaphore_get+0x144>
 800c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c744:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f383 8810 	msr	PRIMASK, r3
}
 800c74c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c74e:	230d      	movs	r3, #13
 800c750:	647b      	str	r3, [r7, #68]	; 0x44
 800c752:	e058      	b.n	800c806 <_tx_semaphore_get+0x1f6>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c754:	4b31      	ldr	r3, [pc, #196]	; (800c81c <_tx_semaphore_get+0x20c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60bb      	str	r3, [r7, #8]

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	4a36      	ldr	r2, [pc, #216]	; (800c838 <_tx_semaphore_get+0x228>)
 800c75e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c76c:	3201      	adds	r2, #1
 800c76e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d109      	bne.n	800c78e <_tx_semaphore_get+0x17e>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	675a      	str	r2, [r3, #116]	; 0x74
 800c78c:	e011      	b.n	800c7b2 <_tx_semaphore_get+0x1a2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c798:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c79e:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7a4:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	1c5a      	adds	r2, r3, #1
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2206      	movs	r2, #6
 800c7c0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	683a      	ldr	r2, [r7, #0]
 800c7cc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c7ce:	4b19      	ldr	r3, [pc, #100]	; (800c834 <_tx_semaphore_get+0x224>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	4a17      	ldr	r2, [pc, #92]	; (800c834 <_tx_semaphore_get+0x224>)
 800c7d6:	6013      	str	r3, [r2, #0]
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f383 8810 	msr	PRIMASK, r3
}
 800c7e2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fd2a 	bl	800d240 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7f4:	e007      	b.n	800c806 <_tx_semaphore_get+0x1f6>
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f383 8810 	msr	PRIMASK, r3
}
 800c800:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800c802:	230d      	movs	r3, #13
 800c804:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3748      	adds	r7, #72	; 0x48
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	20001c9c 	.word	0x20001c9c
 800c814:	20001ca0 	.word	0x20001ca0
 800c818:	2000000c 	.word	0x2000000c
 800c81c:	20001680 	.word	0x20001680
 800c820:	e0001004 	.word	0xe0001004
 800c824:	20001c98 	.word	0x20001c98
 800c828:	20001c94 	.word	0x20001c94
 800c82c:	20001c88 	.word	0x20001c88
 800c830:	20001ca4 	.word	0x20001ca4
 800c834:	20001718 	.word	0x20001718
 800c838:	0800c359 	.word	0x0800c359

0800c83c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b09a      	sub	sp, #104	; 0x68
 800c840:	af02      	add	r7, sp, #8
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800c84a:	2300      	movs	r3, #0
 800c84c:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800c84e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c850:	21ef      	movs	r1, #239	; 0xef
 800c852:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c854:	f007 ff40 	bl	80146d8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800c858:	22b0      	movs	r2, #176	; 0xb0
 800c85a:	2100      	movs	r1, #0
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f007 ff3b 	bl	80146d8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c878:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c87e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c884:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c88a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c892:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c898:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2220      	movs	r2, #32
 800c89e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c8a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800c8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8ac:	4413      	add	r3, r2
 800c8ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8b4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800c8b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c8b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d007      	beq.n	800c8ce <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c8cc:	e006      	b.n	800c8dc <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c8d2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c8d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2203      	movs	r2, #3
 800c8e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4a86      	ldr	r2, [pc, #536]	; (800cb00 <_tx_thread_create+0x2c4>)
 800c8e6:	655a      	str	r2, [r3, #84]	; 0x54
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800c8ee:	4985      	ldr	r1, [pc, #532]	; (800cb04 <_tx_thread_create+0x2c8>)
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f7f3 fd6b 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8fa:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800c8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800c8fe:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800c900:	b672      	cpsid	i
    return(int_posture);
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800c904:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	4a7f      	ldr	r2, [pc, #508]	; (800cb08 <_tx_thread_create+0x2cc>)
 800c90a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800c90c:	4b7f      	ldr	r3, [pc, #508]	; (800cb0c <_tx_thread_create+0x2d0>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10b      	bne.n	800c92c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800c914:	4a7e      	ldr	r2, [pc, #504]	; (800cb10 <_tx_thread_create+0x2d4>)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c92a:	e016      	b.n	800c95a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800c92c:	4b78      	ldr	r3, [pc, #480]	; (800cb10 <_tx_thread_create+0x2d4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800c932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c938:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800c93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800c942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c94e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c95a:	4b6c      	ldr	r3, [pc, #432]	; (800cb0c <_tx_thread_create+0x2d0>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3301      	adds	r3, #1
 800c960:	4a6a      	ldr	r2, [pc, #424]	; (800cb0c <_tx_thread_create+0x2d0>)
 800c962:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800c964:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	4613      	mov	r3, r2
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	68f9      	ldr	r1, [r7, #12]
 800c970:	2001      	movs	r0, #1
 800c972:	f001 f9cd 	bl	800dd10 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800c976:	4b67      	ldr	r3, [pc, #412]	; (800cb14 <_tx_thread_create+0x2d8>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d06b      	beq.n	800ca5a <_tx_thread_create+0x21e>
 800c982:	4b65      	ldr	r3, [pc, #404]	; (800cb18 <_tx_thread_create+0x2dc>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d065      	beq.n	800ca5a <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c98e:	f3ef 8305 	mrs	r3, IPSR
 800c992:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c996:	4b61      	ldr	r3, [pc, #388]	; (800cb1c <_tx_thread_create+0x2e0>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c99e:	4b60      	ldr	r3, [pc, #384]	; (800cb20 <_tx_thread_create+0x2e4>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	653b      	str	r3, [r7, #80]	; 0x50
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10b      	bne.n	800c9c2 <_tx_thread_create+0x186>
 800c9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	657b      	str	r3, [r7, #84]	; 0x54
 800c9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b4:	041a      	lsls	r2, r3, #16
 800c9b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9be:	657b      	str	r3, [r7, #84]	; 0x54
 800c9c0:	e00e      	b.n	800c9e0 <_tx_thread_create+0x1a4>
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c9c8:	d205      	bcs.n	800c9d6 <_tx_thread_create+0x19a>
 800c9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9cc:	657b      	str	r3, [r7, #84]	; 0x54
 800c9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d2:	653b      	str	r3, [r7, #80]	; 0x50
 800c9d4:	e004      	b.n	800c9e0 <_tx_thread_create+0x1a4>
 800c9d6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800c9da:	653b      	str	r3, [r7, #80]	; 0x50
 800c9dc:	2300      	movs	r3, #0
 800c9de:	657b      	str	r3, [r7, #84]	; 0x54
 800c9e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9ea:	605a      	str	r2, [r3, #4]
 800c9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ee:	2264      	movs	r2, #100	; 0x64
 800c9f0:	609a      	str	r2, [r3, #8]
 800c9f2:	4b4c      	ldr	r3, [pc, #304]	; (800cb24 <_tx_thread_create+0x2e8>)
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f8:	60da      	str	r2, [r3, #12]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fe:	611a      	str	r2, [r3, #16]
 800ca00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca04:	615a      	str	r2, [r3, #20]
 800ca06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0a:	619a      	str	r2, [r3, #24]
 800ca0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca10:	61da      	str	r2, [r3, #28]
 800ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca14:	3320      	adds	r3, #32
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca18:	4b43      	ldr	r3, [pc, #268]	; (800cb28 <_tx_thread_create+0x2ec>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d314      	bcc.n	800ca4c <_tx_thread_create+0x210>
 800ca22:	4b42      	ldr	r3, [pc, #264]	; (800cb2c <_tx_thread_create+0x2f0>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca28:	4a3a      	ldr	r2, [pc, #232]	; (800cb14 <_tx_thread_create+0x2d8>)
 800ca2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2c:	6013      	str	r3, [r2, #0]
 800ca2e:	4b40      	ldr	r3, [pc, #256]	; (800cb30 <_tx_thread_create+0x2f4>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca34:	621a      	str	r2, [r3, #32]
 800ca36:	4b3f      	ldr	r3, [pc, #252]	; (800cb34 <_tx_thread_create+0x2f8>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00d      	beq.n	800ca5a <_tx_thread_create+0x21e>
 800ca3e:	4b3d      	ldr	r3, [pc, #244]	; (800cb34 <_tx_thread_create+0x2f8>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a3b      	ldr	r2, [pc, #236]	; (800cb30 <_tx_thread_create+0x2f4>)
 800ca44:	6812      	ldr	r2, [r2, #0]
 800ca46:	4610      	mov	r0, r2
 800ca48:	4798      	blx	r3
 800ca4a:	e006      	b.n	800ca5a <_tx_thread_create+0x21e>
 800ca4c:	4a31      	ldr	r2, [pc, #196]	; (800cb14 <_tx_thread_create+0x2d8>)
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	4b37      	ldr	r3, [pc, #220]	; (800cb30 <_tx_thread_create+0x2f4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca58:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ca5a:	4b37      	ldr	r3, [pc, #220]	; (800cb38 <_tx_thread_create+0x2fc>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	4a35      	ldr	r2, [pc, #212]	; (800cb38 <_tx_thread_create+0x2fc>)
 800ca62:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ca64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d129      	bne.n	800cabe <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca6a:	f3ef 8305 	mrs	r3, IPSR
 800ca6e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ca70:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ca72:	4b2a      	ldr	r3, [pc, #168]	; (800cb1c <_tx_thread_create+0x2e0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ca7c:	d30d      	bcc.n	800ca9a <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ca7e:	4b2f      	ldr	r3, [pc, #188]	; (800cb3c <_tx_thread_create+0x300>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ca84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ca8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8e:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800ca90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca96:	63da      	str	r2, [r3, #60]	; 0x3c
 800ca98:	e001      	b.n	800ca9e <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caa0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa4:	f383 8810 	msr	PRIMASK, r3
}
 800caa8:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f000 fa0e 	bl	800cecc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d01e      	beq.n	800caf4 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800caba:	63da      	str	r2, [r3, #60]	; 0x3c
 800cabc:	e01a      	b.n	800caf4 <_tx_thread_create+0x2b8>
 800cabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f383 8810 	msr	PRIMASK, r3
}
 800cac8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800caca:	f3ef 8310 	mrs	r3, PRIMASK
 800cace:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cad0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cad2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cad4:	b672      	cpsid	i
    return(int_posture);
 800cad6:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cad8:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cada:	4b17      	ldr	r3, [pc, #92]	; (800cb38 <_tx_thread_create+0x2fc>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3b01      	subs	r3, #1
 800cae0:	4a15      	ldr	r2, [pc, #84]	; (800cb38 <_tx_thread_create+0x2fc>)
 800cae2:	6013      	str	r3, [r2, #0]
 800cae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cae6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cae8:	6a3b      	ldr	r3, [r7, #32]
 800caea:	f383 8810 	msr	PRIMASK, r3
}
 800caee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800caf0:	f000 f9b2 	bl	800ce58 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3760      	adds	r7, #96	; 0x60
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	0800d7e1 	.word	0x0800d7e1
 800cb04:	0800cbbd 	.word	0x0800cbbd
 800cb08:	54485244 	.word	0x54485244
 800cb0c:	2000168c 	.word	0x2000168c
 800cb10:	20001688 	.word	0x20001688
 800cb14:	20001c9c 	.word	0x20001c9c
 800cb18:	20001ca0 	.word	0x20001ca0
 800cb1c:	2000000c 	.word	0x2000000c
 800cb20:	20001680 	.word	0x20001680
 800cb24:	e0001004 	.word	0xe0001004
 800cb28:	20001c98 	.word	0x20001c98
 800cb2c:	20001c94 	.word	0x20001c94
 800cb30:	20001c88 	.word	0x20001c88
 800cb34:	20001ca4 	.word	0x20001ca4
 800cb38:	20001718 	.word	0x20001718
 800cb3c:	20001684 	.word	0x20001684

0800cb40 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cb44:	4b13      	ldr	r3, [pc, #76]	; (800cb94 <_tx_thread_initialize+0x54>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cb4a:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <_tx_thread_initialize+0x58>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	4b12      	ldr	r3, [pc, #72]	; (800cb9c <_tx_thread_initialize+0x5c>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cb56:	4b12      	ldr	r3, [pc, #72]	; (800cba0 <_tx_thread_initialize+0x60>)
 800cb58:	2220      	movs	r2, #32
 800cb5a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cb5c:	2280      	movs	r2, #128	; 0x80
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4810      	ldr	r0, [pc, #64]	; (800cba4 <_tx_thread_initialize+0x64>)
 800cb62:	f007 fdb9 	bl	80146d8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cb66:	4b10      	ldr	r3, [pc, #64]	; (800cba8 <_tx_thread_initialize+0x68>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cb6c:	4b0f      	ldr	r3, [pc, #60]	; (800cbac <_tx_thread_initialize+0x6c>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cb72:	4b0f      	ldr	r3, [pc, #60]	; (800cbb0 <_tx_thread_initialize+0x70>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cb78:	4b0e      	ldr	r3, [pc, #56]	; (800cbb4 <_tx_thread_initialize+0x74>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 800cb7e:	4b0e      	ldr	r3, [pc, #56]	; (800cbb8 <_tx_thread_initialize+0x78>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800cb86:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 800cb8a:	4a0b      	ldr	r2, [pc, #44]	; (800cbb8 <_tx_thread_initialize+0x78>)
 800cb8c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cb8e:	bf00      	nop
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20001680 	.word	0x20001680
 800cb98:	20001684 	.word	0x20001684
 800cb9c:	20001690 	.word	0x20001690
 800cba0:	20001694 	.word	0x20001694
 800cba4:	20001698 	.word	0x20001698
 800cba8:	20001688 	.word	0x20001688
 800cbac:	2000168c 	.word	0x2000168c
 800cbb0:	20001718 	.word	0x20001718
 800cbb4:	2000171c 	.word	0x2000171c
 800cbb8:	20001720 	.word	0x20001720

0800cbbc <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cbc2:	4b21      	ldr	r3, [pc, #132]	; (800cc48 <_tx_thread_shell_entry+0x8c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbcc:	69fa      	ldr	r2, [r7, #28]
 800cbce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800cbd4:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <_tx_thread_shell_entry+0x90>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cbdc:	4b1b      	ldr	r3, [pc, #108]	; (800cc4c <_tx_thread_shell_entry+0x90>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	69f8      	ldr	r0, [r7, #28]
 800cbe2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbe4:	f3ef 8310 	mrs	r3, PRIMASK
 800cbe8:	607b      	str	r3, [r7, #4]
    return(posture);
 800cbea:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cbec:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbee:	b672      	cpsid	i
    return(int_posture);
 800cbf0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800cbf2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	2200      	movs	r2, #0
 800cc04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cc06:	4b12      	ldr	r3, [pc, #72]	; (800cc50 <_tx_thread_shell_entry+0x94>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	4a10      	ldr	r2, [pc, #64]	; (800cc50 <_tx_thread_shell_entry+0x94>)
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	f383 8810 	msr	PRIMASK, r3
}
 800cc1a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800cc1c:	f3ef 8314 	mrs	r3, CONTROL
 800cc20:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800cc22:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800cc24:	617b      	str	r3, [r7, #20]
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f023 0304 	bic.w	r3, r3, #4
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f383 8814 	msr	CONTROL, r3
}
 800cc38:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800cc3a:	69f8      	ldr	r0, [r7, #28]
 800cc3c:	f000 fb00 	bl	800d240 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cc40:	bf00      	nop
 800cc42:	3720      	adds	r7, #32
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20001680 	.word	0x20001680
 800cc4c:	2000171c 	.word	0x2000171c
 800cc50:	20001718 	.word	0x20001718

0800cc54 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b094      	sub	sp, #80	; 0x50
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800cc60:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cc64:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc66:	b672      	cpsid	i
    return(int_posture);
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cc6a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cc6c:	4b6f      	ldr	r3, [pc, #444]	; (800ce2c <_tx_thread_sleep+0x1d8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d108      	bne.n	800cc8a <_tx_thread_sleep+0x36>
 800cc78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	f383 8810 	msr	PRIMASK, r3
}
 800cc82:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cc84:	2313      	movs	r3, #19
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	e0ca      	b.n	800ce20 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc8a:	f3ef 8305 	mrs	r3, IPSR
 800cc8e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cc90:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cc92:	4b67      	ldr	r3, [pc, #412]	; (800ce30 <_tx_thread_sleep+0x1dc>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d008      	beq.n	800ccae <_tx_thread_sleep+0x5a>
 800cc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	f383 8810 	msr	PRIMASK, r3
}
 800cca6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cca8:	2313      	movs	r3, #19
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	e0b8      	b.n	800ce20 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800ccae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb0:	4a60      	ldr	r2, [pc, #384]	; (800ce34 <_tx_thread_sleep+0x1e0>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d108      	bne.n	800ccc8 <_tx_thread_sleep+0x74>
 800ccb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	f383 8810 	msr	PRIMASK, r3
}
 800ccc0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ccc2:	2313      	movs	r3, #19
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e0ab      	b.n	800ce20 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d108      	bne.n	800cce0 <_tx_thread_sleep+0x8c>
 800ccce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	f383 8810 	msr	PRIMASK, r3
}
 800ccd8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60fb      	str	r3, [r7, #12]
 800ccde:	e09f      	b.n	800ce20 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cce0:	4b55      	ldr	r3, [pc, #340]	; (800ce38 <_tx_thread_sleep+0x1e4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d008      	beq.n	800ccfa <_tx_thread_sleep+0xa6>
 800cce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	f383 8810 	msr	PRIMASK, r3
}
 800ccf2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800ccf4:	2313      	movs	r3, #19
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	e092      	b.n	800ce20 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 800ccfa:	4b50      	ldr	r3, [pc, #320]	; (800ce3c <_tx_thread_sleep+0x1e8>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d06d      	beq.n	800cde2 <_tx_thread_sleep+0x18e>
 800cd06:	4b4e      	ldr	r3, [pc, #312]	; (800ce40 <_tx_thread_sleep+0x1ec>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d067      	beq.n	800cde2 <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd12:	f3ef 8305 	mrs	r3, IPSR
 800cd16:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cd18:	697a      	ldr	r2, [r7, #20]
 800cd1a:	4b45      	ldr	r3, [pc, #276]	; (800ce30 <_tx_thread_sleep+0x1dc>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd22:	4b42      	ldr	r3, [pc, #264]	; (800ce2c <_tx_thread_sleep+0x1d8>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10b      	bne.n	800cd46 <_tx_thread_sleep+0xf2>
 800cd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd38:	041a      	lsls	r2, r3, #16
 800cd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd44:	e00e      	b.n	800cd64 <_tx_thread_sleep+0x110>
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cd4c:	d205      	bcs.n	800cd5a <_tx_thread_sleep+0x106>
 800cd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd52:	f04f 33ff 	mov.w	r3, #4294967295
 800cd56:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd58:	e004      	b.n	800cd64 <_tx_thread_sleep+0x110>
 800cd5a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cd5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd60:	2300      	movs	r3, #0
 800cd62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd68:	601a      	str	r2, [r3, #0]
 800cd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd6e:	605a      	str	r2, [r3, #4]
 800cd70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd72:	2270      	movs	r2, #112	; 0x70
 800cd74:	609a      	str	r2, [r3, #8]
 800cd76:	4b33      	ldr	r3, [pc, #204]	; (800ce44 <_tx_thread_sleep+0x1f0>)
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd7c:	60da      	str	r2, [r3, #12]
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	611a      	str	r2, [r3, #16]
 800cd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8a:	615a      	str	r2, [r3, #20]
 800cd8c:	f107 020c 	add.w	r2, r7, #12
 800cd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd92:	619a      	str	r2, [r3, #24]
 800cd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd96:	2200      	movs	r2, #0
 800cd98:	61da      	str	r2, [r3, #28]
 800cd9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9c:	3320      	adds	r3, #32
 800cd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda0:	4b29      	ldr	r3, [pc, #164]	; (800ce48 <_tx_thread_sleep+0x1f4>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d314      	bcc.n	800cdd4 <_tx_thread_sleep+0x180>
 800cdaa:	4b28      	ldr	r3, [pc, #160]	; (800ce4c <_tx_thread_sleep+0x1f8>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb0:	4a22      	ldr	r2, [pc, #136]	; (800ce3c <_tx_thread_sleep+0x1e8>)
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb4:	6013      	str	r3, [r2, #0]
 800cdb6:	4b26      	ldr	r3, [pc, #152]	; (800ce50 <_tx_thread_sleep+0x1fc>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdbc:	621a      	str	r2, [r3, #32]
 800cdbe:	4b25      	ldr	r3, [pc, #148]	; (800ce54 <_tx_thread_sleep+0x200>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00d      	beq.n	800cde2 <_tx_thread_sleep+0x18e>
 800cdc6:	4b23      	ldr	r3, [pc, #140]	; (800ce54 <_tx_thread_sleep+0x200>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a21      	ldr	r2, [pc, #132]	; (800ce50 <_tx_thread_sleep+0x1fc>)
 800cdcc:	6812      	ldr	r2, [r2, #0]
 800cdce:	4610      	mov	r0, r2
 800cdd0:	4798      	blx	r3
 800cdd2:	e006      	b.n	800cde2 <_tx_thread_sleep+0x18e>
 800cdd4:	4a19      	ldr	r2, [pc, #100]	; (800ce3c <_tx_thread_sleep+0x1e8>)
 800cdd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd8:	6013      	str	r3, [r2, #0]
 800cdda:	4b1d      	ldr	r3, [pc, #116]	; (800ce50 <_tx_thread_sleep+0x1fc>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cde0:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800cde2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cde4:	2204      	movs	r2, #4
 800cde6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cde8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdea:	2201      	movs	r2, #1
 800cdec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cdee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800cdf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <_tx_thread_sleep+0x1e4>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3301      	adds	r3, #1
 800ce02:	4a0d      	ldr	r2, [pc, #52]	; (800ce38 <_tx_thread_sleep+0x1e4>)
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce08:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	f383 8810 	msr	PRIMASK, r3
}
 800ce10:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ce12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ce14:	f000 fa14 	bl	800d240 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ce18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce1e:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 800ce20:	68fb      	ldr	r3, [r7, #12]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3750      	adds	r7, #80	; 0x50
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20001680 	.word	0x20001680
 800ce30:	2000000c 	.word	0x2000000c
 800ce34:	200017c8 	.word	0x200017c8
 800ce38:	20001718 	.word	0x20001718
 800ce3c:	20001c9c 	.word	0x20001c9c
 800ce40:	20001ca0 	.word	0x20001ca0
 800ce44:	e0001004 	.word	0xe0001004
 800ce48:	20001c98 	.word	0x20001c98
 800ce4c:	20001c94 	.word	0x20001c94
 800ce50:	20001c88 	.word	0x20001c88
 800ce54:	20001ca4 	.word	0x20001ca4

0800ce58 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b089      	sub	sp, #36	; 0x24
 800ce5c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ce5e:	4b17      	ldr	r3, [pc, #92]	; (800cebc <_tx_thread_system_preempt_check+0x64>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d121      	bne.n	800ceae <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800ce6a:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <_tx_thread_system_preempt_check+0x68>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800ce70:	4b14      	ldr	r3, [pc, #80]	; (800cec4 <_tx_thread_system_preempt_check+0x6c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800ce76:	69ba      	ldr	r2, [r7, #24]
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d017      	beq.n	800ceae <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ce7e:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <_tx_thread_system_preempt_check+0x70>)
 800ce80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce84:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce86:	f3ef 8305 	mrs	r3, IPSR
 800ce8a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ce8c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10c      	bne.n	800ceac <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce92:	f3ef 8310 	mrs	r3, PRIMASK
 800ce96:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ce98:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800ce9a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ce9c:	b662      	cpsie	i
}
 800ce9e:	bf00      	nop
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f383 8810 	msr	PRIMASK, r3
}
 800ceaa:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800ceac:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800ceae:	bf00      	nop
 800ceb0:	3724      	adds	r7, #36	; 0x24
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	20001718 	.word	0x20001718
 800cec0:	20001680 	.word	0x20001680
 800cec4:	20001684 	.word	0x20001684
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b09e      	sub	sp, #120	; 0x78
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800ced4:	2300      	movs	r3, #0
 800ced6:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ced8:	f3ef 8310 	mrs	r3, PRIMASK
 800cedc:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800cede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800cee2:	b672      	cpsid	i
    return(int_posture);
 800cee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cee6:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d005      	beq.n	800cefc <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	334c      	adds	r3, #76	; 0x4c
 800cef4:	4618      	mov	r0, r3
 800cef6:	f000 fdaf 	bl	800da58 <_tx_timer_system_deactivate>
 800cefa:	e002      	b.n	800cf02 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 800cf02:	4b8b      	ldr	r3, [pc, #556]	; (800d130 <_tx_thread_system_resume+0x264>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800cf08:	4b89      	ldr	r3, [pc, #548]	; (800d130 <_tx_thread_system_resume+0x264>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	663b      	str	r3, [r7, #96]	; 0x60
 800cf0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d06f      	beq.n	800cff4 <_tx_thread_system_resume+0x128>
 800cf14:	4b87      	ldr	r3, [pc, #540]	; (800d134 <_tx_thread_system_resume+0x268>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d069      	beq.n	800cff4 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf20:	f3ef 8305 	mrs	r3, IPSR
 800cf24:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800cf26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf28:	4b83      	ldr	r3, [pc, #524]	; (800d138 <_tx_thread_system_resume+0x26c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf30:	4b82      	ldr	r3, [pc, #520]	; (800d13c <_tx_thread_system_resume+0x270>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10b      	bne.n	800cf54 <_tx_thread_system_resume+0x88>
 800cf3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	673b      	str	r3, [r7, #112]	; 0x70
 800cf42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf46:	041a      	lsls	r2, r3, #16
 800cf48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf50:	673b      	str	r3, [r7, #112]	; 0x70
 800cf52:	e00e      	b.n	800cf72 <_tx_thread_system_resume+0xa6>
 800cf54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf56:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cf5a:	d205      	bcs.n	800cf68 <_tx_thread_system_resume+0x9c>
 800cf5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf5e:	673b      	str	r3, [r7, #112]	; 0x70
 800cf60:	f04f 33ff 	mov.w	r3, #4294967295
 800cf64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf66:	e004      	b.n	800cf72 <_tx_thread_system_resume+0xa6>
 800cf68:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800cf6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf6e:	2300      	movs	r3, #0
 800cf70:	673b      	str	r3, [r7, #112]	; 0x70
 800cf72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf7c:	605a      	str	r2, [r3, #4]
 800cf7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf80:	2201      	movs	r2, #1
 800cf82:	609a      	str	r2, [r3, #8]
 800cf84:	4b6e      	ldr	r3, [pc, #440]	; (800d140 <_tx_thread_system_resume+0x274>)
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf8a:	60da      	str	r2, [r3, #12]
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf90:	611a      	str	r2, [r3, #16]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf98:	615a      	str	r2, [r3, #20]
 800cf9a:	f107 020c 	add.w	r2, r7, #12
 800cf9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfa0:	619a      	str	r2, [r3, #24]
 800cfa2:	4b68      	ldr	r3, [pc, #416]	; (800d144 <_tx_thread_system_resume+0x278>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfaa:	61da      	str	r2, [r3, #28]
 800cfac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfae:	3320      	adds	r3, #32
 800cfb0:	663b      	str	r3, [r7, #96]	; 0x60
 800cfb2:	4b65      	ldr	r3, [pc, #404]	; (800d148 <_tx_thread_system_resume+0x27c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d314      	bcc.n	800cfe6 <_tx_thread_system_resume+0x11a>
 800cfbc:	4b63      	ldr	r3, [pc, #396]	; (800d14c <_tx_thread_system_resume+0x280>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	663b      	str	r3, [r7, #96]	; 0x60
 800cfc2:	4a5b      	ldr	r2, [pc, #364]	; (800d130 <_tx_thread_system_resume+0x264>)
 800cfc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfc6:	6013      	str	r3, [r2, #0]
 800cfc8:	4b61      	ldr	r3, [pc, #388]	; (800d150 <_tx_thread_system_resume+0x284>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfce:	621a      	str	r2, [r3, #32]
 800cfd0:	4b60      	ldr	r3, [pc, #384]	; (800d154 <_tx_thread_system_resume+0x288>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00d      	beq.n	800cff4 <_tx_thread_system_resume+0x128>
 800cfd8:	4b5e      	ldr	r3, [pc, #376]	; (800d154 <_tx_thread_system_resume+0x288>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a5c      	ldr	r2, [pc, #368]	; (800d150 <_tx_thread_system_resume+0x284>)
 800cfde:	6812      	ldr	r2, [r2, #0]
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	4798      	blx	r3
 800cfe4:	e006      	b.n	800cff4 <_tx_thread_system_resume+0x128>
 800cfe6:	4a52      	ldr	r2, [pc, #328]	; (800d130 <_tx_thread_system_resume+0x264>)
 800cfe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	4b58      	ldr	r3, [pc, #352]	; (800d150 <_tx_thread_system_resume+0x284>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cff2:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 800cff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800cffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d000:	4b55      	ldr	r3, [pc, #340]	; (800d158 <_tx_thread_system_resume+0x28c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3b01      	subs	r3, #1
 800d006:	4a54      	ldr	r2, [pc, #336]	; (800d158 <_tx_thread_system_resume+0x28c>)
 800d008:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f040 80b3 	bne.w	800d17a <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 80c7 	beq.w	800d1ac <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d022:	2b00      	cmp	r3, #0
 800d024:	f040 80a2 	bne.w	800d16c <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d032:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d034:	4a49      	ldr	r2, [pc, #292]	; (800d15c <_tx_thread_system_resume+0x290>)
 800d036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d03c:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800d03e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d040:	2b00      	cmp	r3, #0
 800d042:	d164      	bne.n	800d10e <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d044:	4945      	ldr	r1, [pc, #276]	; (800d15c <_tx_thread_system_resume+0x290>)
 800d046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d05a:	2201      	movs	r2, #1
 800d05c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d05e:	fa02 f303 	lsl.w	r3, r2, r3
 800d062:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d064:	4b3e      	ldr	r3, [pc, #248]	; (800d160 <_tx_thread_system_resume+0x294>)
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d06a:	4313      	orrs	r3, r2
 800d06c:	4a3c      	ldr	r2, [pc, #240]	; (800d160 <_tx_thread_system_resume+0x294>)
 800d06e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d070:	4b3c      	ldr	r3, [pc, #240]	; (800d164 <_tx_thread_system_resume+0x298>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d076:	429a      	cmp	r2, r3
 800d078:	f080 8098 	bcs.w	800d1ac <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d07c:	4a39      	ldr	r2, [pc, #228]	; (800d164 <_tx_thread_system_resume+0x298>)
 800d07e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d080:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d082:	4b30      	ldr	r3, [pc, #192]	; (800d144 <_tx_thread_system_resume+0x278>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d103      	bne.n	800d096 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d08e:	4a2d      	ldr	r2, [pc, #180]	; (800d144 <_tx_thread_system_resume+0x278>)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6013      	str	r3, [r2, #0]
 800d094:	e08a      	b.n	800d1ac <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d09c:	429a      	cmp	r2, r3
 800d09e:	f080 8085 	bcs.w	800d1ac <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d0a2:	4a28      	ldr	r2, [pc, #160]	; (800d144 <_tx_thread_system_resume+0x278>)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 800d0a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d009      	beq.n	800d0c2 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d0ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d104      	bne.n	800d0c2 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d0b8:	4b22      	ldr	r3, [pc, #136]	; (800d144 <_tx_thread_system_resume+0x278>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0c0:	61da      	str	r2, [r3, #28]
 800d0c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0c4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c8:	f383 8810 	msr	PRIMASK, r3
}
 800d0cc:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d0ce:	4b22      	ldr	r3, [pc, #136]	; (800d158 <_tx_thread_system_resume+0x28c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 800d0d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f040 80a1 	bne.w	800d21e <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d0dc:	4b22      	ldr	r3, [pc, #136]	; (800d168 <_tx_thread_system_resume+0x29c>)
 800d0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0e4:	f3ef 8305 	mrs	r3, IPSR
 800d0e8:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f040 8098 	bne.w	800d222 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0f2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800d0fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d0fc:	b662      	cpsie	i
}
 800d0fe:	bf00      	nop
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	f383 8810 	msr	PRIMASK, r3
}
 800d10a:	bf00      	nop
}
 800d10c:	e089      	b.n	800d222 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d112:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d124:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d12a:	621a      	str	r2, [r3, #32]
 800d12c:	e03e      	b.n	800d1ac <_tx_thread_system_resume+0x2e0>
 800d12e:	bf00      	nop
 800d130:	20001c9c 	.word	0x20001c9c
 800d134:	20001ca0 	.word	0x20001ca0
 800d138:	2000000c 	.word	0x2000000c
 800d13c:	20001680 	.word	0x20001680
 800d140:	e0001004 	.word	0xe0001004
 800d144:	20001684 	.word	0x20001684
 800d148:	20001c98 	.word	0x20001c98
 800d14c:	20001c94 	.word	0x20001c94
 800d150:	20001c88 	.word	0x20001c88
 800d154:	20001ca4 	.word	0x20001ca4
 800d158:	20001718 	.word	0x20001718
 800d15c:	20001698 	.word	0x20001698
 800d160:	20001690 	.word	0x20001690
 800d164:	20001694 	.word	0x20001694
 800d168:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2203      	movs	r2, #3
 800d176:	631a      	str	r2, [r3, #48]	; 0x30
 800d178:	e018      	b.n	800d1ac <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d014      	beq.n	800d1ac <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d186:	2b02      	cmp	r3, #2
 800d188:	d010      	beq.n	800d1ac <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d106      	bne.n	800d1a0 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	631a      	str	r2, [r3, #48]	; 0x30
 800d19e:	e005      	b.n	800d1ac <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2203      	movs	r2, #3
 800d1aa:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 800d1ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d009      	beq.n	800d1c6 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d1b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d104      	bne.n	800d1c6 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d1bc:	4b1c      	ldr	r3, [pc, #112]	; (800d230 <_tx_thread_system_resume+0x364>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1c4:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d1c6:	4b1b      	ldr	r3, [pc, #108]	; (800d234 <_tx_thread_system_resume+0x368>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d1cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1d0:	6a3b      	ldr	r3, [r7, #32]
 800d1d2:	f383 8810 	msr	PRIMASK, r3
}
 800d1d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d1d8:	4b15      	ldr	r3, [pc, #84]	; (800d230 <_tx_thread_system_resume+0x364>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d022      	beq.n	800d228 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d1e2:	4b15      	ldr	r3, [pc, #84]	; (800d238 <_tx_thread_system_resume+0x36c>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800d1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d11c      	bne.n	800d228 <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d1ee:	4b13      	ldr	r3, [pc, #76]	; (800d23c <_tx_thread_system_resume+0x370>)
 800d1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1f6:	f3ef 8305 	mrs	r3, IPSR
 800d1fa:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d1fc:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d111      	bne.n	800d226 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d202:	f3ef 8310 	mrs	r3, PRIMASK
 800d206:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d208:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800d20a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d20c:	b662      	cpsie	i
}
 800d20e:	bf00      	nop
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	f383 8810 	msr	PRIMASK, r3
}
 800d21a:	bf00      	nop
}
 800d21c:	e003      	b.n	800d226 <_tx_thread_system_resume+0x35a>
                                return;
 800d21e:	bf00      	nop
 800d220:	e002      	b.n	800d228 <_tx_thread_system_resume+0x35c>
 800d222:	bf00      	nop
 800d224:	e000      	b.n	800d228 <_tx_thread_system_resume+0x35c>
 800d226:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d228:	3778      	adds	r7, #120	; 0x78
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	20001684 	.word	0x20001684
 800d234:	20001680 	.word	0x20001680
 800d238:	20001718 	.word	0x20001718
 800d23c:	e000ed04 	.word	0xe000ed04

0800d240 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b0a4      	sub	sp, #144	; 0x90
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800d248:	2300      	movs	r3, #0
 800d24a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d24e:	4b98      	ldr	r3, [pc, #608]	; (800d4b0 <_tx_thread_system_suspend+0x270>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d256:	f3ef 8310 	mrs	r3, PRIMASK
 800d25a:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800d25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800d25e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d260:	b672      	cpsid	i
    return(int_posture);
 800d262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d264:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d112      	bne.n	800d296 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d274:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d008      	beq.n	800d28e <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d27c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d282:	d004      	beq.n	800d28e <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	334c      	adds	r3, #76	; 0x4c
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 fb83 	bl	800d994 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	69db      	ldr	r3, [r3, #28]
 800d292:	4a88      	ldr	r2, [pc, #544]	; (800d4b4 <_tx_thread_system_suspend+0x274>)
 800d294:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d296:	4b88      	ldr	r3, [pc, #544]	; (800d4b8 <_tx_thread_system_suspend+0x278>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	4a86      	ldr	r2, [pc, #536]	; (800d4b8 <_tx_thread_system_suspend+0x278>)
 800d29e:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	f040 817d 	bne.w	800d5a4 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 800d2aa:	4b84      	ldr	r3, [pc, #528]	; (800d4bc <_tx_thread_system_suspend+0x27c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d2b0:	4b82      	ldr	r3, [pc, #520]	; (800d4bc <_tx_thread_system_suspend+0x27c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	673b      	str	r3, [r7, #112]	; 0x70
 800d2b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d07c      	beq.n	800d3b6 <_tx_thread_system_suspend+0x176>
 800d2bc:	4b80      	ldr	r3, [pc, #512]	; (800d4c0 <_tx_thread_system_suspend+0x280>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d076      	beq.n	800d3b6 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2c8:	f3ef 8305 	mrs	r3, IPSR
 800d2cc:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800d2ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2d0:	4b7c      	ldr	r3, [pc, #496]	; (800d4c4 <_tx_thread_system_suspend+0x284>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2d8:	4b75      	ldr	r3, [pc, #468]	; (800d4b0 <_tx_thread_system_suspend+0x270>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d110      	bne.n	800d308 <_tx_thread_system_suspend+0xc8>
 800d2e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f6:	041a      	lsls	r2, r3, #16
 800d2f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d302:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d306:	e013      	b.n	800d330 <_tx_thread_system_suspend+0xf0>
 800d308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d30a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d30e:	d208      	bcs.n	800d322 <_tx_thread_system_suspend+0xe2>
 800d310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d320:	e006      	b.n	800d330 <_tx_thread_system_suspend+0xf0>
 800d322:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d32a:	2300      	movs	r3, #0
 800d32c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d330:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d33a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d33e:	605a      	str	r2, [r3, #4]
 800d340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d342:	2202      	movs	r2, #2
 800d344:	609a      	str	r2, [r3, #8]
 800d346:	4b60      	ldr	r3, [pc, #384]	; (800d4c8 <_tx_thread_system_suspend+0x288>)
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d34c:	60da      	str	r2, [r3, #12]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d352:	611a      	str	r2, [r3, #16]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d35a:	615a      	str	r2, [r3, #20]
 800d35c:	f107 0208 	add.w	r2, r7, #8
 800d360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d362:	619a      	str	r2, [r3, #24]
 800d364:	4b59      	ldr	r3, [pc, #356]	; (800d4cc <_tx_thread_system_suspend+0x28c>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	461a      	mov	r2, r3
 800d36a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d36c:	61da      	str	r2, [r3, #28]
 800d36e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d370:	3320      	adds	r3, #32
 800d372:	673b      	str	r3, [r7, #112]	; 0x70
 800d374:	4b56      	ldr	r3, [pc, #344]	; (800d4d0 <_tx_thread_system_suspend+0x290>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d314      	bcc.n	800d3a8 <_tx_thread_system_suspend+0x168>
 800d37e:	4b55      	ldr	r3, [pc, #340]	; (800d4d4 <_tx_thread_system_suspend+0x294>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	673b      	str	r3, [r7, #112]	; 0x70
 800d384:	4a4d      	ldr	r2, [pc, #308]	; (800d4bc <_tx_thread_system_suspend+0x27c>)
 800d386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	4b53      	ldr	r3, [pc, #332]	; (800d4d8 <_tx_thread_system_suspend+0x298>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d390:	621a      	str	r2, [r3, #32]
 800d392:	4b52      	ldr	r3, [pc, #328]	; (800d4dc <_tx_thread_system_suspend+0x29c>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00d      	beq.n	800d3b6 <_tx_thread_system_suspend+0x176>
 800d39a:	4b50      	ldr	r3, [pc, #320]	; (800d4dc <_tx_thread_system_suspend+0x29c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a4e      	ldr	r2, [pc, #312]	; (800d4d8 <_tx_thread_system_suspend+0x298>)
 800d3a0:	6812      	ldr	r2, [r2, #0]
 800d3a2:	4610      	mov	r0, r2
 800d3a4:	4798      	blx	r3
 800d3a6:	e006      	b.n	800d3b6 <_tx_thread_system_suspend+0x176>
 800d3a8:	4a44      	ldr	r2, [pc, #272]	; (800d4bc <_tx_thread_system_suspend+0x27c>)
 800d3aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3ac:	6013      	str	r3, [r2, #0]
 800d3ae:	4b4a      	ldr	r3, [pc, #296]	; (800d4d8 <_tx_thread_system_suspend+0x298>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3b4:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 800d3b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d003      	beq.n	800d3c4 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800d3bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ce:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a1b      	ldr	r3, [r3, #32]
 800d3d4:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d3d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d016      	beq.n	800d40c <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d3e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3e8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3ee:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	4a3b      	ldr	r2, [pc, #236]	; (800d4e0 <_tx_thread_system_suspend+0x2a0>)
 800d3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	f040 8085 	bne.w	800d50a <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	4937      	ldr	r1, [pc, #220]	; (800d4e0 <_tx_thread_system_suspend+0x2a0>)
 800d404:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d40a:	e07e      	b.n	800d50a <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	4a34      	ldr	r2, [pc, #208]	; (800d4e0 <_tx_thread_system_suspend+0x2a0>)
 800d410:	2100      	movs	r1, #0
 800d412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	2201      	movs	r2, #1
 800d41a:	fa02 f303 	lsl.w	r3, r2, r3
 800d41e:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d420:	4b30      	ldr	r3, [pc, #192]	; (800d4e4 <_tx_thread_system_suspend+0x2a4>)
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d426:	43db      	mvns	r3, r3
 800d428:	4013      	ands	r3, r2
 800d42a:	4a2e      	ldr	r2, [pc, #184]	; (800d4e4 <_tx_thread_system_suspend+0x2a4>)
 800d42c:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d42e:	2300      	movs	r3, #0
 800d430:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d432:	4b2c      	ldr	r3, [pc, #176]	; (800d4e4 <_tx_thread_system_suspend+0x2a4>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d158      	bne.n	800d4f0 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d43e:	4b2a      	ldr	r3, [pc, #168]	; (800d4e8 <_tx_thread_system_suspend+0x2a8>)
 800d440:	2220      	movs	r2, #32
 800d442:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d444:	4b21      	ldr	r3, [pc, #132]	; (800d4cc <_tx_thread_system_suspend+0x28c>)
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800d44a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d008      	beq.n	800d462 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d458:	429a      	cmp	r2, r3
 800d45a:	d102      	bne.n	800d462 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800d45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d45e:	2200      	movs	r2, #0
 800d460:	61da      	str	r2, [r3, #28]
 800d462:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d464:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d468:	f383 8810 	msr	PRIMASK, r3
}
 800d46c:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d46e:	4b12      	ldr	r3, [pc, #72]	; (800d4b8 <_tx_thread_system_suspend+0x278>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 800d474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d476:	2b00      	cmp	r3, #0
 800d478:	f040 80bf 	bne.w	800d5fa <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d47c:	4b1b      	ldr	r3, [pc, #108]	; (800d4ec <_tx_thread_system_suspend+0x2ac>)
 800d47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d482:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d484:	f3ef 8305 	mrs	r3, IPSR
 800d488:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10c      	bne.n	800d4aa <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d490:	f3ef 8310 	mrs	r3, PRIMASK
 800d494:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d498:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d49a:	b662      	cpsie	i
}
 800d49c:	bf00      	nop
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a4:	f383 8810 	msr	PRIMASK, r3
}
 800d4a8:	bf00      	nop
}
 800d4aa:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d4ac:	e0a5      	b.n	800d5fa <_tx_thread_system_suspend+0x3ba>
 800d4ae:	bf00      	nop
 800d4b0:	20001680 	.word	0x20001680
 800d4b4:	20001c84 	.word	0x20001c84
 800d4b8:	20001718 	.word	0x20001718
 800d4bc:	20001c9c 	.word	0x20001c9c
 800d4c0:	20001ca0 	.word	0x20001ca0
 800d4c4:	2000000c 	.word	0x2000000c
 800d4c8:	e0001004 	.word	0xe0001004
 800d4cc:	20001684 	.word	0x20001684
 800d4d0:	20001c98 	.word	0x20001c98
 800d4d4:	20001c94 	.word	0x20001c94
 800d4d8:	20001c88 	.word	0x20001c88
 800d4dc:	20001ca4 	.word	0x20001ca4
 800d4e0:	20001698 	.word	0x20001698
 800d4e4:	20001690 	.word	0x20001690
 800d4e8:	20001694 	.word	0x20001694
 800d4ec:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4f2:	fa93 f3a3 	rbit	r3, r3
 800d4f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4fa:	fab3 f383 	clz	r3, r3
 800d4fe:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d504:	4413      	add	r3, r2
 800d506:	4a41      	ldr	r2, [pc, #260]	; (800d60c <_tx_thread_system_suspend+0x3cc>)
 800d508:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d50a:	4b41      	ldr	r3, [pc, #260]	; (800d610 <_tx_thread_system_suspend+0x3d0>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d139      	bne.n	800d588 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d514:	4b3d      	ldr	r3, [pc, #244]	; (800d60c <_tx_thread_system_suspend+0x3cc>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a3e      	ldr	r2, [pc, #248]	; (800d614 <_tx_thread_system_suspend+0x3d4>)
 800d51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d51e:	4a3c      	ldr	r2, [pc, #240]	; (800d610 <_tx_thread_system_suspend+0x3d0>)
 800d520:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 800d522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d524:	2b00      	cmp	r3, #0
 800d526:	d00a      	beq.n	800d53e <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d530:	429a      	cmp	r2, r3
 800d532:	d104      	bne.n	800d53e <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d534:	4b36      	ldr	r3, [pc, #216]	; (800d610 <_tx_thread_system_suspend+0x3d0>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	461a      	mov	r2, r3
 800d53a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d53c:	61da      	str	r2, [r3, #28]
 800d53e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d540:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d544:	f383 8810 	msr	PRIMASK, r3
}
 800d548:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d54a:	4b33      	ldr	r3, [pc, #204]	; (800d618 <_tx_thread_system_suspend+0x3d8>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 800d550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d552:	2b00      	cmp	r3, #0
 800d554:	d153      	bne.n	800d5fe <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d556:	4b31      	ldr	r3, [pc, #196]	; (800d61c <_tx_thread_system_suspend+0x3dc>)
 800d558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d55c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d55e:	f3ef 8305 	mrs	r3, IPSR
 800d562:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10c      	bne.n	800d584 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d56a:	f3ef 8310 	mrs	r3, PRIMASK
 800d56e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d572:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d574:	b662      	cpsie	i
}
 800d576:	bf00      	nop
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	f383 8810 	msr	PRIMASK, r3
}
 800d582:	bf00      	nop
}
 800d584:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d586:	e03a      	b.n	800d5fe <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800d588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00a      	beq.n	800d5a4 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800d58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d596:	429a      	cmp	r2, r3
 800d598:	d104      	bne.n	800d5a4 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800d59a:	4b1d      	ldr	r3, [pc, #116]	; (800d610 <_tx_thread_system_suspend+0x3d0>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5a2:	61da      	str	r2, [r3, #28]
 800d5a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	f383 8810 	msr	PRIMASK, r3
}
 800d5ae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d5b0:	4b17      	ldr	r3, [pc, #92]	; (800d610 <_tx_thread_system_suspend+0x3d0>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d022      	beq.n	800d602 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d5bc:	4b16      	ldr	r3, [pc, #88]	; (800d618 <_tx_thread_system_suspend+0x3d8>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 800d5c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d11c      	bne.n	800d602 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d5c8:	4b14      	ldr	r3, [pc, #80]	; (800d61c <_tx_thread_system_suspend+0x3dc>)
 800d5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ce:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5d0:	f3ef 8305 	mrs	r3, IPSR
 800d5d4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d5d6:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10c      	bne.n	800d5f6 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d5e0:	617b      	str	r3, [r7, #20]
    return(posture);
 800d5e2:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d5e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d5e6:	b662      	cpsie	i
}
 800d5e8:	bf00      	nop
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f383 8810 	msr	PRIMASK, r3
}
 800d5f4:	bf00      	nop
}
 800d5f6:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d5f8:	e003      	b.n	800d602 <_tx_thread_system_suspend+0x3c2>
                return;
 800d5fa:	bf00      	nop
 800d5fc:	e002      	b.n	800d604 <_tx_thread_system_suspend+0x3c4>
            return;
 800d5fe:	bf00      	nop
 800d600:	e000      	b.n	800d604 <_tx_thread_system_suspend+0x3c4>
    return;
 800d602:	bf00      	nop
}
 800d604:	3790      	adds	r7, #144	; 0x90
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	20001694 	.word	0x20001694
 800d610:	20001684 	.word	0x20001684
 800d614:	20001698 	.word	0x20001698
 800d618:	20001718 	.word	0x20001718
 800d61c:	e000ed04 	.word	0xe000ed04

0800d620 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08e      	sub	sp, #56	; 0x38
 800d624:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d626:	4b5f      	ldr	r3, [pc, #380]	; (800d7a4 <_tx_thread_time_slice+0x184>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d62c:	f3ef 8310 	mrs	r3, PRIMASK
 800d630:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d632:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d634:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d636:	b672      	cpsid	i
    return(int_posture);
 800d638:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d63c:	4b5a      	ldr	r3, [pc, #360]	; (800d7a8 <_tx_thread_time_slice+0x188>)
 800d63e:	2200      	movs	r2, #0
 800d640:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d024      	beq.n	800d692 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d120      	bne.n	800d692 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	69d2      	ldr	r2, [r2, #28]
 800d656:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	4a53      	ldr	r2, [pc, #332]	; (800d7ac <_tx_thread_time_slice+0x18c>)
 800d65e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a1a      	ldr	r2, [r3, #32]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	429a      	cmp	r2, r3
 800d668:	d013      	beq.n	800d692 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	429a      	cmp	r2, r3
 800d674:	d10d      	bne.n	800d692 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67c:	6a12      	ldr	r2, [r2, #32]
 800d67e:	494c      	ldr	r1, [pc, #304]	; (800d7b0 <_tx_thread_time_slice+0x190>)
 800d680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d684:	4b4b      	ldr	r3, [pc, #300]	; (800d7b4 <_tx_thread_time_slice+0x194>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a49      	ldr	r2, [pc, #292]	; (800d7b0 <_tx_thread_time_slice+0x190>)
 800d68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d68e:	4a4a      	ldr	r2, [pc, #296]	; (800d7b8 <_tx_thread_time_slice+0x198>)
 800d690:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d692:	f3ef 8305 	mrs	r3, IPSR
 800d696:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d698:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800d69a:	4b48      	ldr	r3, [pc, #288]	; (800d7bc <_tx_thread_time_slice+0x19c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 800d6a2:	4b47      	ldr	r3, [pc, #284]	; (800d7c0 <_tx_thread_time_slice+0x1a0>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800d6a8:	4b46      	ldr	r3, [pc, #280]	; (800d7c4 <_tx_thread_time_slice+0x1a4>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	623b      	str	r3, [r7, #32]
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d06d      	beq.n	800d790 <_tx_thread_time_slice+0x170>
 800d6b4:	4b44      	ldr	r3, [pc, #272]	; (800d7c8 <_tx_thread_time_slice+0x1a8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d067      	beq.n	800d790 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6c0:	f3ef 8305 	mrs	r3, IPSR
 800d6c4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	4b3c      	ldr	r3, [pc, #240]	; (800d7bc <_tx_thread_time_slice+0x19c>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	61fb      	str	r3, [r7, #28]
 800d6d0:	4b34      	ldr	r3, [pc, #208]	; (800d7a4 <_tx_thread_time_slice+0x184>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	633b      	str	r3, [r7, #48]	; 0x30
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10b      	bne.n	800d6f4 <_tx_thread_time_slice+0xd4>
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e6:	041a      	lsls	r2, r3, #16
 800d6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6f0:	637b      	str	r3, [r7, #52]	; 0x34
 800d6f2:	e00e      	b.n	800d712 <_tx_thread_time_slice+0xf2>
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d6fa:	d205      	bcs.n	800d708 <_tx_thread_time_slice+0xe8>
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d700:	f04f 33ff 	mov.w	r3, #4294967295
 800d704:	633b      	str	r3, [r7, #48]	; 0x30
 800d706:	e004      	b.n	800d712 <_tx_thread_time_slice+0xf2>
 800d708:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800d70c:	633b      	str	r3, [r7, #48]	; 0x30
 800d70e:	2300      	movs	r3, #0
 800d710:	637b      	str	r3, [r7, #52]	; 0x34
 800d712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d714:	6a3b      	ldr	r3, [r7, #32]
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	6a3b      	ldr	r3, [r7, #32]
 800d71a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d71c:	605a      	str	r2, [r3, #4]
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	2205      	movs	r2, #5
 800d722:	609a      	str	r2, [r3, #8]
 800d724:	4b29      	ldr	r3, [pc, #164]	; (800d7cc <_tx_thread_time_slice+0x1ac>)
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	60da      	str	r2, [r3, #12]
 800d72c:	4b22      	ldr	r3, [pc, #136]	; (800d7b8 <_tx_thread_time_slice+0x198>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	461a      	mov	r2, r3
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	611a      	str	r2, [r3, #16]
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d73a:	615a      	str	r2, [r3, #20]
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d740:	619a      	str	r2, [r3, #24]
 800d742:	1d3a      	adds	r2, r7, #4
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	61da      	str	r2, [r3, #28]
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	3320      	adds	r3, #32
 800d74c:	623b      	str	r3, [r7, #32]
 800d74e:	4b20      	ldr	r3, [pc, #128]	; (800d7d0 <_tx_thread_time_slice+0x1b0>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6a3a      	ldr	r2, [r7, #32]
 800d754:	429a      	cmp	r2, r3
 800d756:	d314      	bcc.n	800d782 <_tx_thread_time_slice+0x162>
 800d758:	4b1e      	ldr	r3, [pc, #120]	; (800d7d4 <_tx_thread_time_slice+0x1b4>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	623b      	str	r3, [r7, #32]
 800d75e:	4a19      	ldr	r2, [pc, #100]	; (800d7c4 <_tx_thread_time_slice+0x1a4>)
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	4b1c      	ldr	r3, [pc, #112]	; (800d7d8 <_tx_thread_time_slice+0x1b8>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6a3a      	ldr	r2, [r7, #32]
 800d76a:	621a      	str	r2, [r3, #32]
 800d76c:	4b1b      	ldr	r3, [pc, #108]	; (800d7dc <_tx_thread_time_slice+0x1bc>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00d      	beq.n	800d790 <_tx_thread_time_slice+0x170>
 800d774:	4b19      	ldr	r3, [pc, #100]	; (800d7dc <_tx_thread_time_slice+0x1bc>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a17      	ldr	r2, [pc, #92]	; (800d7d8 <_tx_thread_time_slice+0x1b8>)
 800d77a:	6812      	ldr	r2, [r2, #0]
 800d77c:	4610      	mov	r0, r2
 800d77e:	4798      	blx	r3
 800d780:	e006      	b.n	800d790 <_tx_thread_time_slice+0x170>
 800d782:	4a10      	ldr	r2, [pc, #64]	; (800d7c4 <_tx_thread_time_slice+0x1a4>)
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	4b13      	ldr	r3, [pc, #76]	; (800d7d8 <_tx_thread_time_slice+0x1b8>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6a3a      	ldr	r2, [r7, #32]
 800d78e:	621a      	str	r2, [r3, #32]
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f383 8810 	msr	PRIMASK, r3
}
 800d79a:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d79c:	bf00      	nop
 800d79e:	3738      	adds	r7, #56	; 0x38
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20001680 	.word	0x20001680
 800d7a8:	20001728 	.word	0x20001728
 800d7ac:	20001c84 	.word	0x20001c84
 800d7b0:	20001698 	.word	0x20001698
 800d7b4:	20001694 	.word	0x20001694
 800d7b8:	20001684 	.word	0x20001684
 800d7bc:	2000000c 	.word	0x2000000c
 800d7c0:	20001718 	.word	0x20001718
 800d7c4:	20001c9c 	.word	0x20001c9c
 800d7c8:	20001ca0 	.word	0x20001ca0
 800d7cc:	e0001004 	.word	0xe0001004
 800d7d0:	20001c98 	.word	0x20001c98
 800d7d4:	20001c94 	.word	0x20001c94
 800d7d8:	20001c88 	.word	0x20001c88
 800d7dc:	20001ca4 	.word	0x20001ca4

0800d7e0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08a      	sub	sp, #40	; 0x28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f0:	617b      	str	r3, [r7, #20]
    return(posture);
 800d7f2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d7f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d7f6:	b672      	cpsid	i
    return(int_posture);
 800d7f8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d7fa:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d800:	2b04      	cmp	r3, #4
 800d802:	d10e      	bne.n	800d822 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d804:	4b13      	ldr	r3, [pc, #76]	; (800d854 <_tx_thread_timeout+0x74>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	4a12      	ldr	r2, [pc, #72]	; (800d854 <_tx_thread_timeout+0x74>)
 800d80c:	6013      	str	r3, [r2, #0]
 800d80e:	6a3b      	ldr	r3, [r7, #32]
 800d810:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f383 8810 	msr	PRIMASK, r3
}
 800d818:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d81a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d81c:	f7ff fb56 	bl	800cecc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d820:	e013      	b.n	800d84a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d826:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d82e:	61bb      	str	r3, [r7, #24]
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	f383 8810 	msr	PRIMASK, r3
}
 800d83a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	69b9      	ldr	r1, [r7, #24]
 800d846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d848:	4798      	blx	r3
}
 800d84a:	bf00      	nop
 800d84c:	3728      	adds	r7, #40	; 0x28
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20001718 	.word	0x20001718

0800d858 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d85e:	f3ef 8310 	mrs	r3, PRIMASK
 800d862:	607b      	str	r3, [r7, #4]
    return(posture);
 800d864:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d866:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d868:	b672      	cpsid	i
    return(int_posture);
 800d86a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800d86c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <_tx_timer_expiration_process+0x3c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	4a07      	ldr	r2, [pc, #28]	; (800d894 <_tx_timer_expiration_process+0x3c>)
 800d876:	6013      	str	r3, [r2, #0]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	f383 8810 	msr	PRIMASK, r3
}
 800d882:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800d884:	4804      	ldr	r0, [pc, #16]	; (800d898 <_tx_timer_expiration_process+0x40>)
 800d886:	f7ff fb21 	bl	800cecc <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20001718 	.word	0x20001718
 800d898:	200017c8 	.word	0x200017c8

0800d89c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800d89c:	b590      	push	{r4, r7, lr}
 800d89e:	b089      	sub	sp, #36	; 0x24
 800d8a0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800d8a2:	4b28      	ldr	r3, [pc, #160]	; (800d944 <_tx_timer_initialize+0xa8>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800d8a8:	4b27      	ldr	r3, [pc, #156]	; (800d948 <_tx_timer_initialize+0xac>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d8ae:	4b27      	ldr	r3, [pc, #156]	; (800d94c <_tx_timer_initialize+0xb0>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800d8b4:	4b26      	ldr	r3, [pc, #152]	; (800d950 <_tx_timer_initialize+0xb4>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800d8ba:	4b26      	ldr	r3, [pc, #152]	; (800d954 <_tx_timer_initialize+0xb8>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800d8c0:	2280      	movs	r2, #128	; 0x80
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	4824      	ldr	r0, [pc, #144]	; (800d958 <_tx_timer_initialize+0xbc>)
 800d8c6:	f006 ff07 	bl	80146d8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800d8ca:	4b24      	ldr	r3, [pc, #144]	; (800d95c <_tx_timer_initialize+0xc0>)
 800d8cc:	4a22      	ldr	r2, [pc, #136]	; (800d958 <_tx_timer_initialize+0xbc>)
 800d8ce:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800d8d0:	4b23      	ldr	r3, [pc, #140]	; (800d960 <_tx_timer_initialize+0xc4>)
 800d8d2:	4a21      	ldr	r2, [pc, #132]	; (800d958 <_tx_timer_initialize+0xbc>)
 800d8d4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800d8d6:	4b23      	ldr	r3, [pc, #140]	; (800d964 <_tx_timer_initialize+0xc8>)
 800d8d8:	4a23      	ldr	r2, [pc, #140]	; (800d968 <_tx_timer_initialize+0xcc>)
 800d8da:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800d8dc:	4b21      	ldr	r3, [pc, #132]	; (800d964 <_tx_timer_initialize+0xc8>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	4a20      	ldr	r2, [pc, #128]	; (800d964 <_tx_timer_initialize+0xc8>)
 800d8e4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800d8e6:	4b21      	ldr	r3, [pc, #132]	; (800d96c <_tx_timer_initialize+0xd0>)
 800d8e8:	4a21      	ldr	r2, [pc, #132]	; (800d970 <_tx_timer_initialize+0xd4>)
 800d8ea:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800d8ec:	4b21      	ldr	r3, [pc, #132]	; (800d974 <_tx_timer_initialize+0xd8>)
 800d8ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8f2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800d8f4:	4b20      	ldr	r3, [pc, #128]	; (800d978 <_tx_timer_initialize+0xdc>)
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800d8fa:	4b1c      	ldr	r3, [pc, #112]	; (800d96c <_tx_timer_initialize+0xd0>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a1d      	ldr	r2, [pc, #116]	; (800d974 <_tx_timer_initialize+0xd8>)
 800d900:	6812      	ldr	r2, [r2, #0]
 800d902:	491d      	ldr	r1, [pc, #116]	; (800d978 <_tx_timer_initialize+0xdc>)
 800d904:	6809      	ldr	r1, [r1, #0]
 800d906:	481c      	ldr	r0, [pc, #112]	; (800d978 <_tx_timer_initialize+0xdc>)
 800d908:	6800      	ldr	r0, [r0, #0]
 800d90a:	2400      	movs	r4, #0
 800d90c:	9405      	str	r4, [sp, #20]
 800d90e:	2400      	movs	r4, #0
 800d910:	9404      	str	r4, [sp, #16]
 800d912:	9003      	str	r0, [sp, #12]
 800d914:	9102      	str	r1, [sp, #8]
 800d916:	9201      	str	r2, [sp, #4]
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	4b18      	ldr	r3, [pc, #96]	; (800d97c <_tx_timer_initialize+0xe0>)
 800d91c:	4a18      	ldr	r2, [pc, #96]	; (800d980 <_tx_timer_initialize+0xe4>)
 800d91e:	4919      	ldr	r1, [pc, #100]	; (800d984 <_tx_timer_initialize+0xe8>)
 800d920:	4819      	ldr	r0, [pc, #100]	; (800d988 <_tx_timer_initialize+0xec>)
 800d922:	f7fe ff8b 	bl	800c83c <_tx_thread_create>
 800d926:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e5      	bne.n	800d8fa <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800d92e:	4b17      	ldr	r3, [pc, #92]	; (800d98c <_tx_timer_initialize+0xf0>)
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800d934:	4b16      	ldr	r3, [pc, #88]	; (800d990 <_tx_timer_initialize+0xf4>)
 800d936:	2200      	movs	r2, #0
 800d938:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800d93a:	bf00      	nop
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd90      	pop	{r4, r7, pc}
 800d942:	bf00      	nop
 800d944:	20001724 	.word	0x20001724
 800d948:	20001c84 	.word	0x20001c84
 800d94c:	20001728 	.word	0x20001728
 800d950:	200017b8 	.word	0x200017b8
 800d954:	200017c4 	.word	0x200017c4
 800d958:	2000172c 	.word	0x2000172c
 800d95c:	200017ac 	.word	0x200017ac
 800d960:	200017b4 	.word	0x200017b4
 800d964:	200017b0 	.word	0x200017b0
 800d968:	200017a8 	.word	0x200017a8
 800d96c:	20001878 	.word	0x20001878
 800d970:	20001884 	.word	0x20001884
 800d974:	2000187c 	.word	0x2000187c
 800d978:	20001880 	.word	0x20001880
 800d97c:	4154494d 	.word	0x4154494d
 800d980:	0800dac9 	.word	0x0800dac9
 800d984:	080151cc 	.word	0x080151cc
 800d988:	200017c8 	.word	0x200017c8
 800d98c:	200017bc 	.word	0x200017bc
 800d990:	200017c0 	.word	0x200017c0

0800d994 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d994:	b480      	push	{r7}
 800d996:	b089      	sub	sp, #36	; 0x24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d04a      	beq.n	800da3e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ae:	d046      	beq.n	800da3e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	699b      	ldr	r3, [r3, #24]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d142      	bne.n	800da3e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b20      	cmp	r3, #32
 800d9bc:	d902      	bls.n	800d9c4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800d9be:	231f      	movs	r3, #31
 800d9c0:	61bb      	str	r3, [r7, #24]
 800d9c2:	e002      	b.n	800d9ca <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800d9ca:	4b20      	ldr	r3, [pc, #128]	; (800da4c <_tx_timer_system_activate+0xb8>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800d9d6:	4b1e      	ldr	r3, [pc, #120]	; (800da50 <_tx_timer_system_activate+0xbc>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69fa      	ldr	r2, [r7, #28]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d30b      	bcc.n	800d9f8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800d9e0:	4b1b      	ldr	r3, [pc, #108]	; (800da50 <_tx_timer_system_activate+0xbc>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	69fa      	ldr	r2, [r7, #28]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	109b      	asrs	r3, r3, #2
 800d9ea:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800d9ec:	4b19      	ldr	r3, [pc, #100]	; (800da54 <_tx_timer_system_activate+0xc0>)
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	4413      	add	r3, r2
 800d9f6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d109      	bne.n	800da14 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	e011      	b.n	800da38 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	695b      	ldr	r3, [r3, #20]
 800da1e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68fa      	ldr	r2, [r7, #12]
 800da30:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	69fa      	ldr	r2, [r7, #28]
 800da3c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800da3e:	bf00      	nop
 800da40:	3724      	adds	r7, #36	; 0x24
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	200017b4 	.word	0x200017b4
 800da50:	200017b0 	.word	0x200017b0
 800da54:	200017ac 	.word	0x200017ac

0800da58 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800da58:	b480      	push	{r7}
 800da5a:	b087      	sub	sp, #28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d026      	beq.n	800daba <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	429a      	cmp	r2, r3
 800da78:	d108      	bne.n	800da8c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	429a      	cmp	r2, r3
 800da82:	d117      	bne.n	800dab4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	e013      	b.n	800dab4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	695b      	ldr	r3, [r3, #20]
 800da90:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d105      	bne.n	800dab4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	693a      	ldr	r2, [r7, #16]
 800dab2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	619a      	str	r2, [r3, #24]
    }
}
 800daba:	bf00      	nop
 800dabc:	371c      	adds	r7, #28
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
	...

0800dac8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b098      	sub	sp, #96	; 0x60
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dad0:	2300      	movs	r3, #0
 800dad2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a73      	ldr	r2, [pc, #460]	; (800dca4 <_tx_timer_thread_entry+0x1dc>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	f040 80de 	bne.w	800dc9a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dade:	f3ef 8310 	mrs	r3, PRIMASK
 800dae2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800dae6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800dae8:	b672      	cpsid	i
    return(int_posture);
 800daea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800daec:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800daee:	4b6e      	ldr	r3, [pc, #440]	; (800dca8 <_tx_timer_thread_entry+0x1e0>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d003      	beq.n	800db04 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f107 020c 	add.w	r2, r7, #12
 800db02:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800db04:	4b68      	ldr	r3, [pc, #416]	; (800dca8 <_tx_timer_thread_entry+0x1e0>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2200      	movs	r2, #0
 800db0a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800db0c:	4b66      	ldr	r3, [pc, #408]	; (800dca8 <_tx_timer_thread_entry+0x1e0>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3304      	adds	r3, #4
 800db12:	4a65      	ldr	r2, [pc, #404]	; (800dca8 <_tx_timer_thread_entry+0x1e0>)
 800db14:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800db16:	4b64      	ldr	r3, [pc, #400]	; (800dca8 <_tx_timer_thread_entry+0x1e0>)
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	4b64      	ldr	r3, [pc, #400]	; (800dcac <_tx_timer_thread_entry+0x1e4>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d103      	bne.n	800db2a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800db22:	4b63      	ldr	r3, [pc, #396]	; (800dcb0 <_tx_timer_thread_entry+0x1e8>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a60      	ldr	r2, [pc, #384]	; (800dca8 <_tx_timer_thread_entry+0x1e0>)
 800db28:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800db2a:	4b62      	ldr	r3, [pc, #392]	; (800dcb4 <_tx_timer_thread_entry+0x1ec>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db32:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db36:	f383 8810 	msr	PRIMASK, r3
}
 800db3a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db3c:	f3ef 8310 	mrs	r3, PRIMASK
 800db40:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800db42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800db44:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800db46:	b672      	cpsid	i
    return(int_posture);
 800db48:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800db4a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800db4c:	e07f      	b.n	800dc4e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800db58:	2300      	movs	r3, #0
 800db5a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800db5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db60:	429a      	cmp	r2, r3
 800db62:	d102      	bne.n	800db6a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	e00e      	b.n	800db88 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800db6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800db70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db74:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800db76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db7a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800db7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db7e:	f107 020c 	add.w	r2, r7, #12
 800db82:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800db84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db86:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800db88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b20      	cmp	r3, #32
 800db8e:	d911      	bls.n	800dbb4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800db90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800db98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db9a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800db9c:	2300      	movs	r3, #0
 800db9e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba2:	f107 0208 	add.w	r2, r7, #8
 800dba6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbac:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb0:	60bb      	str	r3, [r7, #8]
 800dbb2:	e01a      	b.n	800dbea <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800dbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800dbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800dbc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d009      	beq.n	800dbe4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd2:	f107 0208 	add.w	r2, r7, #8
 800dbd6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800dbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbdc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800dbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe0:	60bb      	str	r3, [r7, #8]
 800dbe2:	e002      	b.n	800dbea <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800dbe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800dbea:	4a33      	ldr	r2, [pc, #204]	; (800dcb8 <_tx_timer_thread_entry+0x1f0>)
 800dbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	f383 8810 	msr	PRIMASK, r3
}
 800dbfa:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800dbfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800dc02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dc06:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc08:	f3ef 8310 	mrs	r3, PRIMASK
 800dc0c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800dc10:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc12:	b672      	cpsid	i
    return(int_posture);
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dc16:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800dc18:	4b27      	ldr	r3, [pc, #156]	; (800dcb8 <_tx_timer_thread_entry+0x1f0>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d105      	bne.n	800dc32 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800dc26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc28:	2200      	movs	r2, #0
 800dc2a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800dc2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dc2e:	f7ff feb1 	bl	800d994 <_tx_timer_system_activate>
 800dc32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	f383 8810 	msr	PRIMASK, r3
}
 800dc3c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc3e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc42:	623b      	str	r3, [r7, #32]
    return(posture);
 800dc44:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800dc46:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc48:	b672      	cpsid	i
    return(int_posture);
 800dc4a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800dc4c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f47f af7c 	bne.w	800db4e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800dc56:	4b17      	ldr	r3, [pc, #92]	; (800dcb4 <_tx_timer_thread_entry+0x1ec>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d116      	bne.n	800dc8c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800dc5e:	4b17      	ldr	r3, [pc, #92]	; (800dcbc <_tx_timer_thread_entry+0x1f4>)
 800dc60:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800dc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc64:	2203      	movs	r2, #3
 800dc66:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800dc6e:	4b14      	ldr	r3, [pc, #80]	; (800dcc0 <_tx_timer_thread_entry+0x1f8>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	4a12      	ldr	r2, [pc, #72]	; (800dcc0 <_tx_timer_thread_entry+0x1f8>)
 800dc76:	6013      	str	r3, [r2, #0]
 800dc78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc7a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	f383 8810 	msr	PRIMASK, r3
}
 800dc82:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800dc84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dc86:	f7ff fadb 	bl	800d240 <_tx_thread_system_suspend>
 800dc8a:	e728      	b.n	800dade <_tx_timer_thread_entry+0x16>
 800dc8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc8e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	f383 8810 	msr	PRIMASK, r3
}
 800dc96:	bf00      	nop
            TX_DISABLE
 800dc98:	e721      	b.n	800dade <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800dc9a:	bf00      	nop
 800dc9c:	3760      	adds	r7, #96	; 0x60
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	4154494d 	.word	0x4154494d
 800dca8:	200017b4 	.word	0x200017b4
 800dcac:	200017b0 	.word	0x200017b0
 800dcb0:	200017ac 	.word	0x200017ac
 800dcb4:	200017b8 	.word	0x200017b8
 800dcb8:	200017c4 	.word	0x200017c4
 800dcbc:	200017c8 	.word	0x200017c8
 800dcc0:	20001718 	.word	0x20001718

0800dcc4 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800dcc8:	4b0b      	ldr	r3, [pc, #44]	; (800dcf8 <_tx_trace_initialize+0x34>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 800dcce:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <_tx_trace_initialize+0x38>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 800dcd4:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <_tx_trace_initialize+0x3c>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800dcda:	4b0a      	ldr	r3, [pc, #40]	; (800dd04 <_tx_trace_initialize+0x40>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 800dce0:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <_tx_trace_initialize+0x44>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800dce6:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <_tx_trace_initialize+0x48>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 800dcec:	bf00      	nop
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	20001c88 	.word	0x20001c88
 800dcfc:	20001c8c 	.word	0x20001c8c
 800dd00:	20001c90 	.word	0x20001c90
 800dd04:	20001c94 	.word	0x20001c94
 800dd08:	20001c98 	.word	0x20001c98
 800dd0c:	20001c9c 	.word	0x20001c9c

0800dd10 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b08d      	sub	sp, #52	; 0x34
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	607a      	str	r2, [r7, #4]
 800dd1a:	603b      	str	r3, [r7, #0]
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 800dd20:	4b6f      	ldr	r3, [pc, #444]	; (800dee0 <_tx_trace_object_register+0x1d0>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 80d5 	beq.w	800ded4 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800dd2a:	4b6e      	ldr	r3, [pc, #440]	; (800dee4 <_tx_trace_object_register+0x1d4>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 800dd30:	4b6d      	ldr	r3, [pc, #436]	; (800dee8 <_tx_trace_object_register+0x1d8>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 80cd 	beq.w	800ded4 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 800dd42:	4b6a      	ldr	r3, [pc, #424]	; (800deec <_tx_trace_object_register+0x1dc>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dd48:	4b65      	ldr	r3, [pc, #404]	; (800dee0 <_tx_trace_object_register+0x1d0>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 800dd4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd50:	4613      	mov	r3, r2
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	4413      	add	r3, r2
 800dd56:	011b      	lsls	r3, r3, #4
 800dd58:	461a      	mov	r2, r3
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d103      	bne.n	800dd74 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dd70:	2301      	movs	r3, #1
 800dd72:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d103      	bne.n	800dd86 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 800dd82:	2301      	movs	r3, #1
 800dd84:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d02d      	beq.n	800dde8 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d11a      	bne.n	800ddca <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 800dd94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d102      	bne.n	800dda2 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dda0:	e013      	b.n	800ddca <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800dda2:	4b4f      	ldr	r3, [pc, #316]	; (800dee0 <_tx_trace_object_register+0x1d0>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800dda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddaa:	4613      	mov	r3, r2
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	4413      	add	r3, r2
 800ddb0:	011b      	lsls	r3, r3, #4
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	785b      	ldrb	r3, [r3, #1]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800ddc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc8:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800ddca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddcc:	3301      	adds	r3, #1
 800ddce:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 800ddd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddd2:	6a3b      	ldr	r3, [r7, #32]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d301      	bcc.n	800dddc <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800ddd8:	2300      	movs	r3, #0
 800ddda:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800dddc:	4b43      	ldr	r3, [pc, #268]	; (800deec <_tx_trace_object_register+0x1dc>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d1b0      	bne.n	800dd48 <_tx_trace_object_register+0x38>
 800dde6:	e000      	b.n	800ddea <_tx_trace_object_register+0xda>
                    break;
 800dde8:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800ddea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d270      	bcs.n	800ded4 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 800ddf2:	4b3d      	ldr	r3, [pc, #244]	; (800dee8 <_tx_trace_object_register+0x1d8>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	4a3b      	ldr	r2, [pc, #236]	; (800dee8 <_tx_trace_object_register+0x1d8>)
 800ddfa:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	3301      	adds	r3, #1
 800de00:	6a3a      	ldr	r2, [r7, #32]
 800de02:	429a      	cmp	r2, r3
 800de04:	d904      	bls.n	800de10 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800de06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de08:	3301      	adds	r3, #1
 800de0a:	4a38      	ldr	r2, [pc, #224]	; (800deec <_tx_trace_object_register+0x1dc>)
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	e002      	b.n	800de16 <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 800de10:	4b36      	ldr	r3, [pc, #216]	; (800deec <_tx_trace_object_register+0x1dc>)
 800de12:	2200      	movs	r2, #0
 800de14:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800de16:	4b32      	ldr	r3, [pc, #200]	; (800dee0 <_tx_trace_object_register+0x1d0>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800de1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de1e:	4613      	mov	r3, r2
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	4413      	add	r3, r2
 800de24:	011b      	lsls	r3, r3, #4
 800de26:	461a      	mov	r2, r3
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	4413      	add	r3, r2
 800de2c:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	2200      	movs	r2, #0
 800de36:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	7bfa      	ldrb	r2, [r7, #15]
 800de3c:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de4e:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800de50:	2300      	movs	r3, #0
 800de52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de54:	e017      	b.n	800de86 <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800de5a:	69fa      	ldr	r2, [r7, #28]
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	4413      	add	r3, r2
 800de60:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d012      	beq.n	800de8e <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	7819      	ldrb	r1, [r3, #0]
 800de6c:	69ba      	ldr	r2, [r7, #24]
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	4413      	add	r3, r2
 800de72:	3310      	adds	r3, #16
 800de74:	460a      	mov	r2, r1
 800de76:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d008      	beq.n	800de92 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de82:	3301      	adds	r3, #1
 800de84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	2b1e      	cmp	r3, #30
 800de8a:	d9e4      	bls.n	800de56 <_tx_trace_object_register+0x146>
 800de8c:	e002      	b.n	800de94 <_tx_trace_object_register+0x184>
                        break;
 800de8e:	bf00      	nop
 800de90:	e000      	b.n	800de94 <_tx_trace_object_register+0x184>
                    {
                        break;
 800de92:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800de94:	69ba      	ldr	r2, [r7, #24]
 800de96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de98:	4413      	add	r3, r2
 800de9a:	3310      	adds	r3, #16
 800de9c:	2200      	movs	r2, #0
 800de9e:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800dea0:	7bfb      	ldrb	r3, [r7, #15]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d110      	bne.n	800dec8 <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deae:	0a1b      	lsrs	r3, r3, #8
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 800dec6:	e005      	b.n	800ded4 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	2200      	movs	r2, #0
 800decc:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	2200      	movs	r2, #0
 800ded2:	70da      	strb	r2, [r3, #3]
}
 800ded4:	bf00      	nop
 800ded6:	3734      	adds	r7, #52	; 0x34
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr
 800dee0:	20001c8c 	.word	0x20001c8c
 800dee4:	20001ca8 	.word	0x20001ca8
 800dee8:	20001cac 	.word	0x20001cac
 800deec:	20001cb0 	.word	0x20001cb0

0800def0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b092      	sub	sp, #72	; 0x48
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
 800defc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800defe:	2300      	movs	r3, #0
 800df00:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800df08:	2302      	movs	r3, #2
 800df0a:	647b      	str	r3, [r7, #68]	; 0x44
 800df0c:	e075      	b.n	800dffa <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800df0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df10:	2b34      	cmp	r3, #52	; 0x34
 800df12:	d002      	beq.n	800df1a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800df14:	2302      	movs	r3, #2
 800df16:	647b      	str	r3, [r7, #68]	; 0x44
 800df18:	e06f      	b.n	800dffa <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df1a:	f3ef 8310 	mrs	r3, PRIMASK
 800df1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800df22:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800df24:	b672      	cpsid	i
    return(int_posture);
 800df26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800df28:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800df2a:	4b3b      	ldr	r3, [pc, #236]	; (800e018 <_txe_byte_pool_create+0x128>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3301      	adds	r3, #1
 800df30:	4a39      	ldr	r2, [pc, #228]	; (800e018 <_txe_byte_pool_create+0x128>)
 800df32:	6013      	str	r3, [r2, #0]
 800df34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df36:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	f383 8810 	msr	PRIMASK, r3
}
 800df3e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800df40:	4b36      	ldr	r3, [pc, #216]	; (800e01c <_txe_byte_pool_create+0x12c>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800df46:	2300      	movs	r3, #0
 800df48:	643b      	str	r3, [r7, #64]	; 0x40
 800df4a:	e009      	b.n	800df60 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df50:	429a      	cmp	r2, r3
 800df52:	d00b      	beq.n	800df6c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800df54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df58:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800df5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df5c:	3301      	adds	r3, #1
 800df5e:	643b      	str	r3, [r7, #64]	; 0x40
 800df60:	4b2f      	ldr	r3, [pc, #188]	; (800e020 <_txe_byte_pool_create+0x130>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df66:	429a      	cmp	r2, r3
 800df68:	d3f0      	bcc.n	800df4c <_txe_byte_pool_create+0x5c>
 800df6a:	e000      	b.n	800df6e <_txe_byte_pool_create+0x7e>
                break;
 800df6c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df6e:	f3ef 8310 	mrs	r3, PRIMASK
 800df72:	623b      	str	r3, [r7, #32]
    return(posture);
 800df74:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800df76:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df78:	b672      	cpsid	i
    return(int_posture);
 800df7a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800df7c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800df7e:	4b26      	ldr	r3, [pc, #152]	; (800e018 <_txe_byte_pool_create+0x128>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	3b01      	subs	r3, #1
 800df84:	4a24      	ldr	r2, [pc, #144]	; (800e018 <_txe_byte_pool_create+0x128>)
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	f383 8810 	msr	PRIMASK, r3
}
 800df92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800df94:	f7fe ff60 	bl	800ce58 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d102      	bne.n	800dfa6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	647b      	str	r3, [r7, #68]	; 0x44
 800dfa4:	e029      	b.n	800dffa <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d102      	bne.n	800dfb2 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800dfac:	2303      	movs	r3, #3
 800dfae:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb0:	e023      	b.n	800dffa <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2b63      	cmp	r3, #99	; 0x63
 800dfb6:	d802      	bhi.n	800dfbe <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800dfb8:	2305      	movs	r3, #5
 800dfba:	647b      	str	r3, [r7, #68]	; 0x44
 800dfbc:	e01d      	b.n	800dffa <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800dfbe:	4b19      	ldr	r3, [pc, #100]	; (800e024 <_txe_byte_pool_create+0x134>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800dfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc6:	4a18      	ldr	r2, [pc, #96]	; (800e028 <_txe_byte_pool_create+0x138>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d101      	bne.n	800dfd0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800dfcc:	2313      	movs	r3, #19
 800dfce:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dfd0:	f3ef 8305 	mrs	r3, IPSR
 800dfd4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dfd6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dfd8:	4b14      	ldr	r3, [pc, #80]	; (800e02c <_txe_byte_pool_create+0x13c>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00b      	beq.n	800dffa <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dfe2:	f3ef 8305 	mrs	r3, IPSR
 800dfe6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dfe8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800dfea:	4b10      	ldr	r3, [pc, #64]	; (800e02c <_txe_byte_pool_create+0x13c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4313      	orrs	r3, r2
 800dff0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dff4:	d201      	bcs.n	800dffa <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800dff6:	2313      	movs	r3, #19
 800dff8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800dffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d106      	bne.n	800e00e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7fd f88a 	bl	800b120 <_tx_byte_pool_create>
 800e00c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e00e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e010:	4618      	mov	r0, r3
 800e012:	3748      	adds	r7, #72	; 0x48
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20001718 	.word	0x20001718
 800e01c:	20001670 	.word	0x20001670
 800e020:	20001674 	.word	0x20001674
 800e024:	20001680 	.word	0x20001680
 800e028:	200017c8 	.word	0x200017c8
 800e02c:	2000000c 	.word	0x2000000c

0800e030 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b094      	sub	sp, #80	; 0x50
 800e034:	af02      	add	r7, sp, #8
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
 800e03c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e03e:	2300      	movs	r3, #0
 800e040:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d102      	bne.n	800e04e <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e048:	2309      	movs	r3, #9
 800e04a:	647b      	str	r3, [r7, #68]	; 0x44
 800e04c:	e083      	b.n	800e156 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800e04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e050:	2b38      	cmp	r3, #56	; 0x38
 800e052:	d002      	beq.n	800e05a <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e054:	2309      	movs	r3, #9
 800e056:	647b      	str	r3, [r7, #68]	; 0x44
 800e058:	e07d      	b.n	800e156 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e05a:	f3ef 8310 	mrs	r3, PRIMASK
 800e05e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e062:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e064:	b672      	cpsid	i
    return(int_posture);
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e068:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e06a:	4b43      	ldr	r3, [pc, #268]	; (800e178 <_txe_queue_create+0x148>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	3301      	adds	r3, #1
 800e070:	4a41      	ldr	r2, [pc, #260]	; (800e178 <_txe_queue_create+0x148>)
 800e072:	6013      	str	r3, [r2, #0]
 800e074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e076:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	f383 8810 	msr	PRIMASK, r3
}
 800e07e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800e080:	4b3e      	ldr	r3, [pc, #248]	; (800e17c <_txe_queue_create+0x14c>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e086:	2300      	movs	r3, #0
 800e088:	643b      	str	r3, [r7, #64]	; 0x40
 800e08a:	e009      	b.n	800e0a0 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e090:	429a      	cmp	r2, r3
 800e092:	d00b      	beq.n	800e0ac <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800e094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e098:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800e09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09c:	3301      	adds	r3, #1
 800e09e:	643b      	str	r3, [r7, #64]	; 0x40
 800e0a0:	4b37      	ldr	r3, [pc, #220]	; (800e180 <_txe_queue_create+0x150>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d3f0      	bcc.n	800e08c <_txe_queue_create+0x5c>
 800e0aa:	e000      	b.n	800e0ae <_txe_queue_create+0x7e>
                break;
 800e0ac:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e0ae:	f3ef 8310 	mrs	r3, PRIMASK
 800e0b2:	623b      	str	r3, [r7, #32]
    return(posture);
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e0b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e0b8:	b672      	cpsid	i
    return(int_posture);
 800e0ba:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e0bc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e0be:	4b2e      	ldr	r3, [pc, #184]	; (800e178 <_txe_queue_create+0x148>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	4a2c      	ldr	r2, [pc, #176]	; (800e178 <_txe_queue_create+0x148>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	f383 8810 	msr	PRIMASK, r3
}
 800e0d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e0d4:	f7fe fec0 	bl	800ce58 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d102      	bne.n	800e0e6 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800e0e0:	2309      	movs	r3, #9
 800e0e2:	647b      	str	r3, [r7, #68]	; 0x44
 800e0e4:	e037      	b.n	800e156 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d102      	bne.n	800e0f2 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	647b      	str	r3, [r7, #68]	; 0x44
 800e0f0:	e031      	b.n	800e156 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e0f8:	2305      	movs	r3, #5
 800e0fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e0fc:	e02b      	b.n	800e156 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b10      	cmp	r3, #16
 800e102:	d902      	bls.n	800e10a <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800e104:	2305      	movs	r3, #5
 800e106:	647b      	str	r3, [r7, #68]	; 0x44
 800e108:	e025      	b.n	800e156 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800e10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10c:	089b      	lsrs	r3, r3, #2
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	429a      	cmp	r2, r3
 800e112:	d902      	bls.n	800e11a <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800e114:	2305      	movs	r3, #5
 800e116:	647b      	str	r3, [r7, #68]	; 0x44
 800e118:	e01d      	b.n	800e156 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e11a:	4b1a      	ldr	r3, [pc, #104]	; (800e184 <_txe_queue_create+0x154>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e122:	4a19      	ldr	r2, [pc, #100]	; (800e188 <_txe_queue_create+0x158>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d101      	bne.n	800e12c <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e128:	2313      	movs	r3, #19
 800e12a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e12c:	f3ef 8305 	mrs	r3, IPSR
 800e130:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e132:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e134:	4b15      	ldr	r3, [pc, #84]	; (800e18c <_txe_queue_create+0x15c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4313      	orrs	r3, r2
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00b      	beq.n	800e156 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e13e:	f3ef 8305 	mrs	r3, IPSR
 800e142:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e144:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e146:	4b11      	ldr	r3, [pc, #68]	; (800e18c <_txe_queue_create+0x15c>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e150:	d201      	bcs.n	800e156 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e152:	2313      	movs	r3, #19
 800e154:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d108      	bne.n	800e16e <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800e15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	68b9      	ldr	r1, [r7, #8]
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7fd f9f2 	bl	800b550 <_tx_queue_create>
 800e16c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e170:	4618      	mov	r0, r3
 800e172:	3748      	adds	r7, #72	; 0x48
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20001718 	.word	0x20001718
 800e17c:	20001650 	.word	0x20001650
 800e180:	20001654 	.word	0x20001654
 800e184:	20001680 	.word	0x20001680
 800e188:	200017c8 	.word	0x200017c8
 800e18c:	2000000c 	.word	0x2000000c

0800e190 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d102      	bne.n	800e1a4 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e19e:	2309      	movs	r3, #9
 800e1a0:	60fb      	str	r3, [r7, #12]
 800e1a2:	e00b      	b.n	800e1bc <_txe_queue_flush+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a07      	ldr	r2, [pc, #28]	; (800e1c8 <_txe_queue_flush+0x38>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d002      	beq.n	800e1b4 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e1ae:	2309      	movs	r3, #9
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	e003      	b.n	800e1bc <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7fd facb 	bl	800b750 <_tx_queue_flush>
 800e1ba:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	51554555 	.word	0x51554555

0800e1cc <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d102      	bne.n	800e1e8 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e1e2:	2309      	movs	r3, #9
 800e1e4:	61fb      	str	r3, [r7, #28]
 800e1e6:	e025      	b.n	800e234 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a18      	ldr	r2, [pc, #96]	; (800e250 <_txe_queue_receive+0x84>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d002      	beq.n	800e1f8 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e1f2:	2309      	movs	r3, #9
 800e1f4:	61fb      	str	r3, [r7, #28]
 800e1f6:	e01d      	b.n	800e234 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e1fe:	2303      	movs	r3, #3
 800e200:	61fb      	str	r3, [r7, #28]
 800e202:	e017      	b.n	800e234 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d014      	beq.n	800e234 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e20a:	f3ef 8305 	mrs	r3, IPSR
 800e20e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e210:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e212:	4b10      	ldr	r3, [pc, #64]	; (800e254 <_txe_queue_receive+0x88>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4313      	orrs	r3, r2
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e21c:	2304      	movs	r3, #4
 800e21e:	61fb      	str	r3, [r7, #28]
 800e220:	e008      	b.n	800e234 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e222:	4b0d      	ldr	r3, [pc, #52]	; (800e258 <_txe_queue_receive+0x8c>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	4a0c      	ldr	r2, [pc, #48]	; (800e25c <_txe_queue_receive+0x90>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d101      	bne.n	800e234 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e230:	2304      	movs	r3, #4
 800e232:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d105      	bne.n	800e246 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7fd fb98 	bl	800b974 <_tx_queue_receive>
 800e244:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e246:	69fb      	ldr	r3, [r7, #28]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	51554555 	.word	0x51554555
 800e254:	2000000c 	.word	0x2000000c
 800e258:	20001680 	.word	0x20001680
 800e25c:	200017c8 	.word	0x200017c8

0800e260 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e26c:	2300      	movs	r3, #0
 800e26e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d102      	bne.n	800e27c <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e276:	2309      	movs	r3, #9
 800e278:	61fb      	str	r3, [r7, #28]
 800e27a:	e025      	b.n	800e2c8 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a18      	ldr	r2, [pc, #96]	; (800e2e4 <_txe_queue_send+0x84>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d002      	beq.n	800e28c <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800e286:	2309      	movs	r3, #9
 800e288:	61fb      	str	r3, [r7, #28]
 800e28a:	e01d      	b.n	800e2c8 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d102      	bne.n	800e298 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e292:	2303      	movs	r3, #3
 800e294:	61fb      	str	r3, [r7, #28]
 800e296:	e017      	b.n	800e2c8 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d014      	beq.n	800e2c8 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e29e:	f3ef 8305 	mrs	r3, IPSR
 800e2a2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e2a4:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e2a6:	4b10      	ldr	r3, [pc, #64]	; (800e2e8 <_txe_queue_send+0x88>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e2b0:	2304      	movs	r3, #4
 800e2b2:	61fb      	str	r3, [r7, #28]
 800e2b4:	e008      	b.n	800e2c8 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	; (800e2ec <_txe_queue_send+0x8c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	4a0c      	ldr	r2, [pc, #48]	; (800e2f0 <_txe_queue_send+0x90>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d101      	bne.n	800e2c8 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e2c4:	2304      	movs	r3, #4
 800e2c6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d105      	bne.n	800e2da <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	68b9      	ldr	r1, [r7, #8]
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7fd fd9c 	bl	800be10 <_tx_queue_send>
 800e2d8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800e2da:	69fb      	ldr	r3, [r7, #28]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3720      	adds	r7, #32
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	51554555 	.word	0x51554555
 800e2e8:	2000000c 	.word	0x2000000c
 800e2ec:	20001680 	.word	0x20001680
 800e2f0:	200017c8 	.word	0x200017c8

0800e2f4 <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d102      	bne.n	800e30a <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e304:	230c      	movs	r3, #12
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	e012      	b.n	800e330 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a0b      	ldr	r2, [pc, #44]	; (800e33c <_txe_semaphore_ceiling_put+0x48>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d002      	beq.n	800e31a <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e314:	230c      	movs	r3, #12
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	e00a      	b.n	800e330 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d102      	bne.n	800e326 <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800e320:	2322      	movs	r3, #34	; 0x22
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	e004      	b.n	800e330 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7fd ff23 	bl	800c174 <_tx_semaphore_ceiling_put>
 800e32e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e330:	68fb      	ldr	r3, [r7, #12]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	53454d41 	.word	0x53454d41

0800e340 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b092      	sub	sp, #72	; 0x48
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
 800e34c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e34e:	2300      	movs	r3, #0
 800e350:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d102      	bne.n	800e35e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e358:	230c      	movs	r3, #12
 800e35a:	647b      	str	r3, [r7, #68]	; 0x44
 800e35c:	e054      	b.n	800e408 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b1c      	cmp	r3, #28
 800e362:	d002      	beq.n	800e36a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e364:	230c      	movs	r3, #12
 800e366:	647b      	str	r3, [r7, #68]	; 0x44
 800e368:	e04e      	b.n	800e408 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e36a:	f3ef 8310 	mrs	r3, PRIMASK
 800e36e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e372:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e374:	b672      	cpsid	i
    return(int_posture);
 800e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e378:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e37a:	4b36      	ldr	r3, [pc, #216]	; (800e454 <_txe_semaphore_create+0x114>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3301      	adds	r3, #1
 800e380:	4a34      	ldr	r2, [pc, #208]	; (800e454 <_txe_semaphore_create+0x114>)
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e386:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	f383 8810 	msr	PRIMASK, r3
}
 800e38e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800e390:	4b31      	ldr	r3, [pc, #196]	; (800e458 <_txe_semaphore_create+0x118>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e396:	2300      	movs	r3, #0
 800e398:	643b      	str	r3, [r7, #64]	; 0x40
 800e39a:	e009      	b.n	800e3b0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d00b      	beq.n	800e3bc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800e3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800e3aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	643b      	str	r3, [r7, #64]	; 0x40
 800e3b0:	4b2a      	ldr	r3, [pc, #168]	; (800e45c <_txe_semaphore_create+0x11c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d3f0      	bcc.n	800e39c <_txe_semaphore_create+0x5c>
 800e3ba:	e000      	b.n	800e3be <_txe_semaphore_create+0x7e>
                break;
 800e3bc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3be:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c2:	623b      	str	r3, [r7, #32]
    return(posture);
 800e3c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e3c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3c8:	b672      	cpsid	i
    return(int_posture);
 800e3ca:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e3cc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e3ce:	4b21      	ldr	r3, [pc, #132]	; (800e454 <_txe_semaphore_create+0x114>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	4a1f      	ldr	r2, [pc, #124]	; (800e454 <_txe_semaphore_create+0x114>)
 800e3d6:	6013      	str	r3, [r2, #0]
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	f383 8810 	msr	PRIMASK, r3
}
 800e3e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e3e4:	f7fe fd38 	bl	800ce58 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d102      	bne.n	800e3f6 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800e3f0:	230c      	movs	r3, #12
 800e3f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e3f4:	e008      	b.n	800e408 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e3f6:	4b1a      	ldr	r3, [pc, #104]	; (800e460 <_txe_semaphore_create+0x120>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3fe:	4a19      	ldr	r2, [pc, #100]	; (800e464 <_txe_semaphore_create+0x124>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d101      	bne.n	800e408 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e404:	2313      	movs	r3, #19
 800e406:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d114      	bne.n	800e438 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e40e:	f3ef 8305 	mrs	r3, IPSR
 800e412:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e414:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e416:	4b14      	ldr	r3, [pc, #80]	; (800e468 <_txe_semaphore_create+0x128>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00b      	beq.n	800e438 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e420:	f3ef 8305 	mrs	r3, IPSR
 800e424:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e426:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e428:	4b0f      	ldr	r3, [pc, #60]	; (800e468 <_txe_semaphore_create+0x128>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e432:	d201      	bcs.n	800e438 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e434:	2313      	movs	r3, #19
 800e436:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d105      	bne.n	800e44a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	68b9      	ldr	r1, [r7, #8]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f7fe f804 	bl	800c450 <_tx_semaphore_create>
 800e448:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3748      	adds	r7, #72	; 0x48
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20001718 	.word	0x20001718
 800e458:	20001648 	.word	0x20001648
 800e45c:	2000164c 	.word	0x2000164c
 800e460:	20001680 	.word	0x20001680
 800e464:	200017c8 	.word	0x200017c8
 800e468:	2000000c 	.word	0x2000000c

0800e46c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e476:	2300      	movs	r3, #0
 800e478:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d102      	bne.n	800e486 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e480:	230c      	movs	r3, #12
 800e482:	617b      	str	r3, [r7, #20]
 800e484:	e01f      	b.n	800e4c6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a15      	ldr	r2, [pc, #84]	; (800e4e0 <_txe_semaphore_get+0x74>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d002      	beq.n	800e496 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800e490:	230c      	movs	r3, #12
 800e492:	617b      	str	r3, [r7, #20]
 800e494:	e017      	b.n	800e4c6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d014      	beq.n	800e4c6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e49c:	f3ef 8305 	mrs	r3, IPSR
 800e4a0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e4a2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e4a4:	4b0f      	ldr	r3, [pc, #60]	; (800e4e4 <_txe_semaphore_get+0x78>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d002      	beq.n	800e4b4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e4ae:	2304      	movs	r3, #4
 800e4b0:	617b      	str	r3, [r7, #20]
 800e4b2:	e008      	b.n	800e4c6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800e4b4:	4b0c      	ldr	r3, [pc, #48]	; (800e4e8 <_txe_semaphore_get+0x7c>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	4a0b      	ldr	r2, [pc, #44]	; (800e4ec <_txe_semaphore_get+0x80>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d101      	bne.n	800e4c6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800e4c2:	2304      	movs	r3, #4
 800e4c4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d104      	bne.n	800e4d6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800e4cc:	6839      	ldr	r1, [r7, #0]
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f7fe f89e 	bl	800c610 <_tx_semaphore_get>
 800e4d4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e4d6:	697b      	ldr	r3, [r7, #20]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	53454d41 	.word	0x53454d41
 800e4e4:	2000000c 	.word	0x2000000c
 800e4e8:	20001680 	.word	0x20001680
 800e4ec:	200017c8 	.word	0x200017c8

0800e4f0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b09a      	sub	sp, #104	; 0x68
 800e4f4:	af06      	add	r7, sp, #24
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e4fe:	2300      	movs	r3, #0
 800e500:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e508:	230e      	movs	r3, #14
 800e50a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e50c:	e0bb      	b.n	800e686 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e50e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e510:	2bb0      	cmp	r3, #176	; 0xb0
 800e512:	d002      	beq.n	800e51a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e514:	230e      	movs	r3, #14
 800e516:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e518:	e0b5      	b.n	800e686 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e51a:	f3ef 8310 	mrs	r3, PRIMASK
 800e51e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e520:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e522:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e524:	b672      	cpsid	i
    return(int_posture);
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e528:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e52a:	4b64      	ldr	r3, [pc, #400]	; (800e6bc <_txe_thread_create+0x1cc>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3301      	adds	r3, #1
 800e530:	4a62      	ldr	r2, [pc, #392]	; (800e6bc <_txe_thread_create+0x1cc>)
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e536:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	f383 8810 	msr	PRIMASK, r3
}
 800e53e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e540:	2300      	movs	r3, #0
 800e542:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e544:	4b5e      	ldr	r3, [pc, #376]	; (800e6c0 <_txe_thread_create+0x1d0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e54a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e54c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e54e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e550:	3b01      	subs	r3, #1
 800e552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e554:	4413      	add	r3, r2
 800e556:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e55c:	2300      	movs	r3, #0
 800e55e:	647b      	str	r3, [r7, #68]	; 0x44
 800e560:	e02b      	b.n	800e5ba <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e566:	429a      	cmp	r2, r3
 800e568:	d101      	bne.n	800e56e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e56a:	2301      	movs	r3, #1
 800e56c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e56e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e570:	2b01      	cmp	r3, #1
 800e572:	d028      	beq.n	800e5c6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d308      	bcc.n	800e590 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e584:	429a      	cmp	r2, r3
 800e586:	d203      	bcs.n	800e590 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e588:	2300      	movs	r3, #0
 800e58a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e58c:	2301      	movs	r3, #1
 800e58e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e596:	429a      	cmp	r2, r3
 800e598:	d308      	bcc.n	800e5ac <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d203      	bcs.n	800e5ac <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5b2:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	647b      	str	r3, [r7, #68]	; 0x44
 800e5ba:	4b42      	ldr	r3, [pc, #264]	; (800e6c4 <_txe_thread_create+0x1d4>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d3ce      	bcc.n	800e562 <_txe_thread_create+0x72>
 800e5c4:	e000      	b.n	800e5c8 <_txe_thread_create+0xd8>
                break;
 800e5c6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e5cc:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e5ce:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e5d0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5d2:	b672      	cpsid	i
    return(int_posture);
 800e5d4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e5d6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e5d8:	4b38      	ldr	r3, [pc, #224]	; (800e6bc <_txe_thread_create+0x1cc>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	4a37      	ldr	r2, [pc, #220]	; (800e6bc <_txe_thread_create+0x1cc>)
 800e5e0:	6013      	str	r3, [r2, #0]
 800e5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5e6:	6a3b      	ldr	r3, [r7, #32]
 800e5e8:	f383 8810 	msr	PRIMASK, r3
}
 800e5ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e5ee:	f7fe fc33 	bl	800ce58 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d102      	bne.n	800e600 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e5fa:	230e      	movs	r3, #14
 800e5fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5fe:	e042      	b.n	800e686 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e602:	2b00      	cmp	r3, #0
 800e604:	d102      	bne.n	800e60c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e606:	2303      	movs	r3, #3
 800e608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e60a:	e03c      	b.n	800e686 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e612:	2303      	movs	r3, #3
 800e614:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e616:	e036      	b.n	800e686 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e61a:	2bc7      	cmp	r3, #199	; 0xc7
 800e61c:	d802      	bhi.n	800e624 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e61e:	2305      	movs	r3, #5
 800e620:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e622:	e030      	b.n	800e686 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e626:	2b1f      	cmp	r3, #31
 800e628:	d902      	bls.n	800e630 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e62a:	230f      	movs	r3, #15
 800e62c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e62e:	e02a      	b.n	800e686 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e630:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e634:	429a      	cmp	r2, r3
 800e636:	d902      	bls.n	800e63e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e638:	2318      	movs	r3, #24
 800e63a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e63c:	e023      	b.n	800e686 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e640:	2b01      	cmp	r3, #1
 800e642:	d902      	bls.n	800e64a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e644:	2310      	movs	r3, #16
 800e646:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e648:	e01d      	b.n	800e686 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e64a:	4b1f      	ldr	r3, [pc, #124]	; (800e6c8 <_txe_thread_create+0x1d8>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e652:	4a1e      	ldr	r2, [pc, #120]	; (800e6cc <_txe_thread_create+0x1dc>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d101      	bne.n	800e65c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e658:	2313      	movs	r3, #19
 800e65a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e65c:	f3ef 8305 	mrs	r3, IPSR
 800e660:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e662:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e664:	4b1a      	ldr	r3, [pc, #104]	; (800e6d0 <_txe_thread_create+0x1e0>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4313      	orrs	r3, r2
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00b      	beq.n	800e686 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e66e:	f3ef 8305 	mrs	r3, IPSR
 800e672:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e674:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e676:	4b16      	ldr	r3, [pc, #88]	; (800e6d0 <_txe_thread_create+0x1e0>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4313      	orrs	r3, r2
 800e67c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e680:	d201      	bcs.n	800e686 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e682:	2313      	movs	r3, #19
 800e684:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d112      	bne.n	800e6b2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e68e:	9305      	str	r3, [sp, #20]
 800e690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e696:	9303      	str	r3, [sp, #12]
 800e698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e69a:	9302      	str	r3, [sp, #8]
 800e69c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e69e:	9301      	str	r3, [sp, #4]
 800e6a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f7fe f8c6 	bl	800c83c <_tx_thread_create>
 800e6b0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3750      	adds	r7, #80	; 0x50
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	20001718 	.word	0x20001718
 800e6c0:	20001688 	.word	0x20001688
 800e6c4:	2000168c 	.word	0x2000168c
 800e6c8:	20001680 	.word	0x20001680
 800e6cc:	200017c8 	.word	0x200017c8
 800e6d0:	2000000c 	.word	0x2000000c

0800e6d4 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b086      	sub	sp, #24
 800e6d8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6da:	f3ef 8310 	mrs	r3, PRIMASK
 800e6de:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e6e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6e4:	b672      	cpsid	i
    return(int_posture);
 800e6e6:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e6e8:	613b      	str	r3, [r7, #16]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e6ea:	463b      	mov	r3, r7
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f000 f83d 	bl	800e76c <tx_timer_get_next>
 800e6f2:	6178      	str	r0, [r7, #20]
            a low power clock needs to be set up.
    */

#ifndef TX_LOW_POWER_TICKLESS
    /* We still want to keep track of time in low power mode. */
    if (timers_active == TX_FALSE)
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d104      	bne.n	800e704 <tx_low_power_enter+0x30>
    {
        /* Set the next expiration to 0xFFFFFFF, an indication that the timer sleeps for
           maximum amount of time the HW supports.*/
        tx_low_power_next_expiration = 0xFFFFFFFF;
 800e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fe:	603b      	str	r3, [r7, #0]
        timers_active = TX_TRUE;
 800e700:	2301      	movs	r3, #1
 800e702:	617b      	str	r3, [r7, #20]
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d103      	bne.n	800e712 <tx_low_power_enter+0x3e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7f2 f8ff 	bl	8000910 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800e712:	4b07      	ldr	r3, [pc, #28]	; (800e730 <tx_low_power_enter+0x5c>)
 800e714:	2201      	movs	r2, #1
 800e716:	601a      	str	r2, [r3, #0]
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f383 8810 	msr	PRIMASK, r3
}
 800e722:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800e724:	f7f2 f91e 	bl	8000964 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800e728:	bf00      	nop
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20001cb4 	.word	0x20001cb4

0800e734 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800e73a:	4b0b      	ldr	r3, [pc, #44]	; (800e768 <tx_low_power_exit+0x34>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00d      	beq.n	800e75e <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800e742:	4b09      	ldr	r3, [pc, #36]	; (800e768 <tx_low_power_exit+0x34>)
 800e744:	2200      	movs	r2, #0
 800e746:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800e748:	f7f2 f91a 	bl	8000980 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800e74c:	f7f2 f926 	bl	800099c <App_ThreadX_LowPower_Timer_Adjust>
 800e750:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d002      	beq.n	800e75e <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 f86f 	bl	800e83c <tx_time_increment>
        }
    }
}
 800e75e:	bf00      	nop
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	20001cb4 	.word	0x20001cb4

0800e76c <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b08d      	sub	sp, #52	; 0x34
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800e774:	f04f 33ff 	mov.w	r3, #4294967295
 800e778:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e77a:	f3ef 8310 	mrs	r3, PRIMASK
 800e77e:	617b      	str	r3, [r7, #20]
    return(posture);
 800e780:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e782:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e784:	b672      	cpsid	i
    return(int_posture);
 800e786:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800e788:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e78a:	4b29      	ldr	r3, [pc, #164]	; (800e830 <tx_timer_get_next+0xc4>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e790:	2300      	movs	r3, #0
 800e792:	627b      	str	r3, [r7, #36]	; 0x24
 800e794:	e02f      	b.n	800e7f6 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800e796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d01d      	beq.n	800e7da <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b20      	cmp	r3, #32
 800e7aa:	d906      	bls.n	800e7ba <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800e7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	4413      	add	r3, r2
 800e7b4:	3b20      	subs	r3, #32
 800e7b6:	623b      	str	r3, [r7, #32]
 800e7b8:	e001      	b.n	800e7be <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800e7be:	69fa      	ldr	r2, [r7, #28]
 800e7c0:	6a3b      	ldr	r3, [r7, #32]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d901      	bls.n	800e7ca <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800e7c6:	6a3b      	ldr	r3, [r7, #32]
 800e7c8:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d1e4      	bne.n	800e7a4 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	3304      	adds	r3, #4
 800e7de:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e7e0:	4b14      	ldr	r3, [pc, #80]	; (800e834 <tx_timer_get_next+0xc8>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d302      	bcc.n	800e7f0 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e7ea:	4b13      	ldr	r3, [pc, #76]	; (800e838 <tx_timer_get_next+0xcc>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	2b1f      	cmp	r3, #31
 800e7fa:	d9cc      	bls.n	800e796 <tx_timer_get_next+0x2a>
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f383 8810 	msr	PRIMASK, r3
}
 800e806:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e80e:	d004      	beq.n	800e81a <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	69fa      	ldr	r2, [r7, #28]
 800e814:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800e816:	2301      	movs	r3, #1
 800e818:	e003      	b.n	800e822 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800e820:	2300      	movs	r3, #0
    }
}
 800e822:	4618      	mov	r0, r3
 800e824:	3734      	adds	r7, #52	; 0x34
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	200017b4 	.word	0x200017b4
 800e834:	200017b0 	.word	0x200017b0
 800e838:	200017ac 	.word	0x200017ac

0800e83c <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08a      	sub	sp, #40	; 0x28
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 809b 	beq.w	800e982 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e84c:	f3ef 8310 	mrs	r3, PRIMASK
 800e850:	613b      	str	r3, [r7, #16]
    return(posture);
 800e852:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e854:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e856:	b672      	cpsid	i
    return(int_posture);
 800e858:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800e85a:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800e85c:	4b4b      	ldr	r3, [pc, #300]	; (800e98c <tx_time_increment+0x150>)
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4413      	add	r3, r2
 800e864:	4a49      	ldr	r2, [pc, #292]	; (800e98c <tx_time_increment+0x150>)
 800e866:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800e868:	4b49      	ldr	r3, [pc, #292]	; (800e990 <tx_time_increment+0x154>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00e      	beq.n	800e88e <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800e870:	4b47      	ldr	r3, [pc, #284]	; (800e990 <tx_time_increment+0x154>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	429a      	cmp	r2, r3
 800e878:	d206      	bcs.n	800e888 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800e87a:	4b45      	ldr	r3, [pc, #276]	; (800e990 <tx_time_increment+0x154>)
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	1ad3      	subs	r3, r2, r3
 800e882:	4a43      	ldr	r2, [pc, #268]	; (800e990 <tx_time_increment+0x154>)
 800e884:	6013      	str	r3, [r2, #0]
 800e886:	e002      	b.n	800e88e <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800e888:	4b41      	ldr	r3, [pc, #260]	; (800e990 <tx_time_increment+0x154>)
 800e88a:	2201      	movs	r2, #1
 800e88c:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e88e:	4b41      	ldr	r3, [pc, #260]	; (800e994 <tx_time_increment+0x158>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800e894:	2300      	movs	r3, #0
 800e896:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e898:	2300      	movs	r3, #0
 800e89a:	627b      	str	r3, [r7, #36]	; 0x24
 800e89c:	e046      	b.n	800e92c <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d034      	beq.n	800e910 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b20      	cmp	r3, #32
 800e8b2:	d908      	bls.n	800e8c6 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	e003      	b.n	800e8ce <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c8:	1c5a      	adds	r2, r3, #1
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	69fa      	ldr	r2, [r7, #28]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d1e6      	bne.n	800e8ac <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800e8de:	6a3b      	ldr	r3, [r7, #32]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	695b      	ldr	r3, [r3, #20]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d103      	bne.n	800e8f6 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	61bb      	str	r3, [r7, #24]
 800e8f4:	e009      	b.n	800e90a <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	695b      	ldr	r3, [r3, #20]
 800e8fa:	6a3a      	ldr	r2, [r7, #32]
 800e8fc:	6812      	ldr	r2, [r2, #0]
 800e8fe:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	695a      	ldr	r2, [r3, #20]
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800e90a:	6a3b      	ldr	r3, [r7, #32]
 800e90c:	2200      	movs	r2, #0
 800e90e:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800e910:	6a3b      	ldr	r3, [r7, #32]
 800e912:	3304      	adds	r3, #4
 800e914:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e916:	4b20      	ldr	r3, [pc, #128]	; (800e998 <tx_time_increment+0x15c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	6a3a      	ldr	r2, [r7, #32]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d302      	bcc.n	800e926 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e920:	4b1e      	ldr	r3, [pc, #120]	; (800e99c <tx_time_increment+0x160>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e928:	3301      	adds	r3, #1
 800e92a:	627b      	str	r3, [r7, #36]	; 0x24
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	2b1f      	cmp	r3, #31
 800e930:	d9b5      	bls.n	800e89e <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800e932:	4b1a      	ldr	r3, [pc, #104]	; (800e99c <tx_time_increment+0x160>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a17      	ldr	r2, [pc, #92]	; (800e994 <tx_time_increment+0x158>)
 800e938:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800e93a:	e019      	b.n	800e970 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d206      	bcs.n	800e95e <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	1ad2      	subs	r2, r2, r3
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	e002      	b.n	800e964 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	2201      	movs	r2, #1
 800e962:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	2200      	movs	r2, #0
 800e968:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800e96a:	69f8      	ldr	r0, [r7, #28]
 800e96c:	f7ff f812 	bl	800d994 <_tx_timer_system_activate>
    while (temp_list_head)
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1e2      	bne.n	800e93c <tx_time_increment+0x100>
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f383 8810 	msr	PRIMASK, r3
}
 800e980:	e000      	b.n	800e984 <tx_time_increment+0x148>
        return;
 800e982:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800e984:	3728      	adds	r7, #40	; 0x28
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	20001724 	.word	0x20001724
 800e990:	20001c84 	.word	0x20001c84
 800e994:	200017b4 	.word	0x200017b4
 800e998:	200017b0 	.word	0x200017b0
 800e99c:	200017ac 	.word	0x200017ac

0800e9a0 <fm_calendar_get>:
 * usa.
 * @param None
 * @retval None
 */
void fm_calendar_get()
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
     *     __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
     *     HAL_RTC_WaitForSynchro(&hrtc);
     *     __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
     */

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	4905      	ldr	r1, [pc, #20]	; (800e9bc <fm_calendar_get+0x1c>)
 800e9a8:	4805      	ldr	r0, [pc, #20]	; (800e9c0 <fm_calendar_get+0x20>)
 800e9aa:	f7fa fa7f 	bl	8008eac <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	4904      	ldr	r1, [pc, #16]	; (800e9c4 <fm_calendar_get+0x24>)
 800e9b2:	4803      	ldr	r0, [pc, #12]	; (800e9c0 <fm_calendar_get+0x20>)
 800e9b4:	f7fa fb72 	bl	800909c <HAL_RTC_GetDate>
}
 800e9b8:	bf00      	nop
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20001cb8 	.word	0x20001cb8
 800e9c0:	200014a0 	.word	0x200014a0
 800e9c4:	20001ccc 	.word	0x20001ccc

0800e9c8 <fm_calendar_get_hour>:
 * @brief Función que lee la hora desde el RTC y la devuelve como parámetro.
 * @param None
 * @retval Hora leida del calendario.
 */
int fm_calendar_get_hour()
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800e9cc:	f7ff ffe8 	bl	800e9a0 <fm_calendar_get>
    return (sTime.Hours);
 800e9d0:	4b01      	ldr	r3, [pc, #4]	; (800e9d8 <fm_calendar_get_hour+0x10>)
 800e9d2:	781b      	ldrb	r3, [r3, #0]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20001cb8 	.word	0x20001cb8

0800e9dc <fm_calendar_get_minute>:
 * parámetro.
 * @param None
 * @retval Minutos leidos del calendario.
 */
int fm_calendar_get_minute()
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800e9e0:	f7ff ffde 	bl	800e9a0 <fm_calendar_get>
    return (sTime.Minutes);
 800e9e4:	4b01      	ldr	r3, [pc, #4]	; (800e9ec <fm_calendar_get_minute+0x10>)
 800e9e6:	785b      	ldrb	r3, [r3, #1]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	20001cb8 	.word	0x20001cb8

0800e9f0 <fm_calendar_get_second>:
 * parámetro.
 * @param None
 * @retval Segundos leidos del calendario.
 */
int fm_calendar_get_second()
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800e9f4:	f7ff ffd4 	bl	800e9a0 <fm_calendar_get>
    return (sTime.Seconds);
 800e9f8:	4b01      	ldr	r3, [pc, #4]	; (800ea00 <fm_calendar_get_second+0x10>)
 800e9fa:	789b      	ldrb	r3, [r3, #2]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	20001cb8 	.word	0x20001cb8

0800ea04 <fm_calendar_get_day>:
 * @brief Función que lee el día desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Día leido del calendario.
 */
int fm_calendar_get_day()
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea08:	f7ff ffca 	bl	800e9a0 <fm_calendar_get>
    return (sDate.Date);
 800ea0c:	4b01      	ldr	r3, [pc, #4]	; (800ea14 <fm_calendar_get_day+0x10>)
 800ea0e:	789b      	ldrb	r3, [r3, #2]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	20001ccc 	.word	0x20001ccc

0800ea18 <fm_calendar_get_month>:
 * @brief Función que lee el mes desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Mes leida del calendario.
 */
int fm_calendar_get_month()
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea1c:	f7ff ffc0 	bl	800e9a0 <fm_calendar_get>
    return (sDate.Month);
 800ea20:	4b01      	ldr	r3, [pc, #4]	; (800ea28 <fm_calendar_get_month+0x10>)
 800ea22:	785b      	ldrb	r3, [r3, #1]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20001ccc 	.word	0x20001ccc

0800ea2c <fm_calendar_get_year>:
 * @brief Función que lee el año desde el RTC y lo devuelve como parámetro.
 * @param None
 * @retval Año leido del calendario.
 */
int fm_calendar_get_year()
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	af00      	add	r7, sp, #0
    fm_calendar_get();
 800ea30:	f7ff ffb6 	bl	800e9a0 <fm_calendar_get>
    return (sDate.Year);
 800ea34:	4b01      	ldr	r3, [pc, #4]	; (800ea3c <fm_calendar_get_year+0x10>)
 800ea36:	78db      	ldrb	r3, [r3, #3]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20001ccc 	.word	0x20001ccc

0800ea40 <fm_calendar_format_time>:
 * fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_time()
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af02      	add	r7, sp, #8
    int  time_int = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	617b      	str	r3, [r7, #20]
    char time_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ea4a:	f7ff ffa9 	bl	800e9a0 <fm_calendar_get>
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ea4e:	4b0d      	ldr	r3, [pc, #52]	; (800ea84 <fm_calendar_format_time+0x44>)
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	461a      	mov	r2, r3
 800ea54:	4b0b      	ldr	r3, [pc, #44]	; (800ea84 <fm_calendar_format_time+0x44>)
 800ea56:	785b      	ldrb	r3, [r3, #1]
 800ea58:	4619      	mov	r1, r3
    sTime.Seconds);
 800ea5a:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <fm_calendar_format_time+0x44>)
 800ea5c:	789b      	ldrb	r3, [r3, #2]
    sprintf(time_arr, "%02d%02d%02d", sTime.Hours, sTime.Minutes,
 800ea5e:	4638      	mov	r0, r7
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	460b      	mov	r3, r1
 800ea64:	4908      	ldr	r1, [pc, #32]	; (800ea88 <fm_calendar_format_time+0x48>)
 800ea66:	f005 fe73 	bl	8014750 <siprintf>
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */

    time_int = atoi(time_arr);
 800ea6a:	463b      	mov	r3, r7
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f005 fe05 	bl	801467c <atoi>
 800ea72:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_time(time_int);
 800ea74:	6978      	ldr	r0, [r7, #20]
 800ea76:	f000 f9dd 	bl	800ee34 <fm_factory_modify_fp_time>
}
 800ea7a:	bf00      	nop
 800ea7c:	3718      	adds	r7, #24
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20001cb8 	.word	0x20001cb8
 800ea88:	080151e0 	.word	0x080151e0

0800ea8c <fm_calendar_format_date>:
 * en fm_factory.
 * @param None
 * @retval None
 */
void fm_calendar_format_date()
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b088      	sub	sp, #32
 800ea90:	af02      	add	r7, sp, #8
    int  date_int = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	617b      	str	r3, [r7, #20]
    char date_arr[PCF8553_DATA_SIZE];

    fm_calendar_get();
 800ea96:	f7ff ff83 	bl	800e9a0 <fm_calendar_get>
    sprintf(date_arr, "%02d%02d20%02d", sDate.Date, sDate.Month, sDate.Year);
 800ea9a:	4b0d      	ldr	r3, [pc, #52]	; (800ead0 <fm_calendar_format_date+0x44>)
 800ea9c:	789b      	ldrb	r3, [r3, #2]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	4b0b      	ldr	r3, [pc, #44]	; (800ead0 <fm_calendar_format_date+0x44>)
 800eaa2:	785b      	ldrb	r3, [r3, #1]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <fm_calendar_format_date+0x44>)
 800eaa8:	78db      	ldrb	r3, [r3, #3]
 800eaaa:	4638      	mov	r0, r7
 800eaac:	9300      	str	r3, [sp, #0]
 800eaae:	460b      	mov	r3, r1
 800eab0:	4908      	ldr	r1, [pc, #32]	; (800ead4 <fm_calendar_format_date+0x48>)
 800eab2:	f005 fe4d 	bl	8014750 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    date_int = atoi(date_arr);
 800eab6:	463b      	mov	r3, r7
 800eab8:	4618      	mov	r0, r3
 800eaba:	f005 fddf 	bl	801467c <atoi>
 800eabe:	6178      	str	r0, [r7, #20]
    fm_factory_modify_fp_date(date_int);
 800eac0:	6978      	ldr	r0, [r7, #20]
 800eac2:	f000 f9a7 	bl	800ee14 <fm_factory_modify_fp_date>
}
 800eac6:	bf00      	nop
 800eac8:	3718      	adds	r7, #24
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	20001ccc 	.word	0x20001ccc
 800ead4:	080151f0 	.word	0x080151f0

0800ead8 <fm_debug_msg_uart>:
 * @param Mensaje a transmitir y su longitud.
 * @retval None
 *
 */
void fm_debug_msg_uart(const uint8_t *p_msg, uint8_t len)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	460b      	mov	r3, r1
 800eae2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 800eae4:	2302      	movs	r3, #2
 800eae6:	73fb      	strb	r3, [r7, #15]
     * ejecutada en otro hilo. La siguiente implementación no es buena porque
     * bloquea puede bloquear al sistema, una mejor solucion seria bloquear
     * por un corto tiempo, aun mejor seria implementar algo con RTOS.
     *
     */
    while (ret == HAL_BUSY)
 800eae8:	e008      	b.n	800eafc <fm_debug_msg_uart+0x24>
    {
        ret = HAL_UART_Transmit(&huart2, p_msg, len, DELAY_DEFAULT);
 800eaea:	78fb      	ldrb	r3, [r7, #3]
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	230a      	movs	r3, #10
 800eaf0:	6879      	ldr	r1, [r7, #4]
 800eaf2:	4806      	ldr	r0, [pc, #24]	; (800eb0c <fm_debug_msg_uart+0x34>)
 800eaf4:	f7fb fdb8 	bl	800a668 <HAL_UART_Transmit>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73fb      	strb	r3, [r7, #15]
    while (ret == HAL_BUSY)
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	2b02      	cmp	r3, #2
 800eb00:	d0f3      	beq.n	800eaea <fm_debug_msg_uart+0x12>
    }

}
 800eb02:	bf00      	nop
 800eb04:	bf00      	nop
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	20001560 	.word	0x20001560

0800eb10 <fm_factory_get_acm>:
 * @brief Función que devuelve el parámetro ACM almacenado en fm_factory.
 * @param None
 * @retval Parámetro ACM como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_acm()
{
 800eb10:	b4b0      	push	{r4, r5, r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
    return (acm_config);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a07      	ldr	r2, [pc, #28]	; (800eb38 <fm_factory_get_acm+0x28>)
 800eb1c:	461c      	mov	r4, r3
 800eb1e:	4615      	mov	r5, r2
 800eb20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bcb0      	pop	{r4, r5, r7}
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	20000030 	.word	0x20000030

0800eb3c <fm_factory_get_ttl>:
 * @brief Función que devuelve el parámetro TTL almacenado en fm_factory.
 * @param None
 * @retval Parámetro TTL como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_ttl()
{
 800eb3c:	b4b0      	push	{r4, r5, r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
    return (ttl_config);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a07      	ldr	r2, [pc, #28]	; (800eb64 <fm_factory_get_ttl+0x28>)
 800eb48:	461c      	mov	r4, r3
 800eb4a:	4615      	mov	r5, r2
 800eb4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bcb0      	pop	{r4, r5, r7}
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	20000010 	.word	0x20000010

0800eb68 <fm_factory_get_rate>:
 * @brief Función que devuelve el parámetro RATE almacenado en fm_factory.
 * @param None
 * @retval Parámetro RATE como estructura de tipo fmc_totalizer_t.
 */
fmc_totalizer_t fm_factory_get_rate()
{
 800eb68:	b4b0      	push	{r4, r5, r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
    return (rate_config);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a07      	ldr	r2, [pc, #28]	; (800eb90 <fm_factory_get_rate+0x28>)
 800eb74:	461c      	mov	r4, r3
 800eb76:	4615      	mov	r5, r2
 800eb78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eb80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bcb0      	pop	{r4, r5, r7}
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	20000050 	.word	0x20000050

0800eb94 <fm_factory_get_temp>:
 * fm_factory.
 * @param None
 * @retval Temperatura interna del micro como estructura de tipo fmc_temp_t.
 */
fmc_temp_t fm_factory_get_temp()
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
    return (temperature_config);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a05      	ldr	r2, [pc, #20]	; (800ebb4 <fm_factory_get_temp+0x20>)
 800eba0:	ca07      	ldmia	r2, {r0, r1, r2}
 800eba2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	370c      	adds	r7, #12
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	20000070 	.word	0x20000070

0800ebb8 <fm_factory_get_units_tim>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_tim()
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
    return (units_digits_tim);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a05      	ldr	r2, [pc, #20]	; (800ebd8 <fm_factory_get_units_tim+0x20>)
 800ebc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebc8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr
 800ebd8:	20000094 	.word	0x20000094

0800ebdc <fm_factory_get_units_vol>:
 * fm_factory.
 * @param None
 * @retval Configuración de resoluciones como estructura de tipo fmc_fp_t.
 */
fmc_fp_t fm_factory_get_units_vol()
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
    return (units_digits_vol);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a05      	ldr	r2, [pc, #20]	; (800ebfc <fm_factory_get_units_vol+0x20>)
 800ebe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebec:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	2000009c 	.word	0x2000009c

0800ec00 <fm_factory_get_k_factor>:
 * @brief Función que devuelve el factor K almacenado en fm_factory.
 * @param None
 * @retval Factor K.
 */
fmc_fp_t fm_factory_get_k_factor(sel_k k_sel)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t k_selected;
    if(k_sel == K_FACTOR)
 800ec0c:	78fb      	ldrb	r3, [r7, #3]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <fm_factory_get_k_factor+0x20>
    {
        k_selected = k_factor_config;
 800ec12:	4b22      	ldr	r3, [pc, #136]	; (800ec9c <fm_factory_get_k_factor+0x9c>)
 800ec14:	4a22      	ldr	r2, [pc, #136]	; (800eca0 <fm_factory_get_k_factor+0xa0>)
 800ec16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec1a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec1e:	e030      	b.n	800ec82 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_1)
 800ec20:	78fb      	ldrb	r3, [r7, #3]
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d106      	bne.n	800ec34 <fm_factory_get_k_factor+0x34>
    {
        k_selected = k_lin_1_config;
 800ec26:	4b1d      	ldr	r3, [pc, #116]	; (800ec9c <fm_factory_get_k_factor+0x9c>)
 800ec28:	4a1e      	ldr	r2, [pc, #120]	; (800eca4 <fm_factory_get_k_factor+0xa4>)
 800ec2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec2e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec32:	e026      	b.n	800ec82 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_2)
 800ec34:	78fb      	ldrb	r3, [r7, #3]
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	d106      	bne.n	800ec48 <fm_factory_get_k_factor+0x48>
    {
        k_selected = k_lin_2_config;
 800ec3a:	4b18      	ldr	r3, [pc, #96]	; (800ec9c <fm_factory_get_k_factor+0x9c>)
 800ec3c:	4a1a      	ldr	r2, [pc, #104]	; (800eca8 <fm_factory_get_k_factor+0xa8>)
 800ec3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec42:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec46:	e01c      	b.n	800ec82 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_3)
 800ec48:	78fb      	ldrb	r3, [r7, #3]
 800ec4a:	2b03      	cmp	r3, #3
 800ec4c:	d106      	bne.n	800ec5c <fm_factory_get_k_factor+0x5c>
    {
        k_selected = k_lin_3_config;
 800ec4e:	4b13      	ldr	r3, [pc, #76]	; (800ec9c <fm_factory_get_k_factor+0x9c>)
 800ec50:	4a16      	ldr	r2, [pc, #88]	; (800ecac <fm_factory_get_k_factor+0xac>)
 800ec52:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec56:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec5a:	e012      	b.n	800ec82 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_4)
 800ec5c:	78fb      	ldrb	r3, [r7, #3]
 800ec5e:	2b04      	cmp	r3, #4
 800ec60:	d106      	bne.n	800ec70 <fm_factory_get_k_factor+0x70>
    {
        k_selected = k_lin_4_config;
 800ec62:	4b0e      	ldr	r3, [pc, #56]	; (800ec9c <fm_factory_get_k_factor+0x9c>)
 800ec64:	4a12      	ldr	r2, [pc, #72]	; (800ecb0 <fm_factory_get_k_factor+0xb0>)
 800ec66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec6a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec6e:	e008      	b.n	800ec82 <fm_factory_get_k_factor+0x82>
    }
    else if(k_sel == K_LIN_5)
 800ec70:	78fb      	ldrb	r3, [r7, #3]
 800ec72:	2b05      	cmp	r3, #5
 800ec74:	d105      	bne.n	800ec82 <fm_factory_get_k_factor+0x82>
    {
        k_selected = k_lin_5_config;
 800ec76:	4b09      	ldr	r3, [pc, #36]	; (800ec9c <fm_factory_get_k_factor+0x9c>)
 800ec78:	4a0e      	ldr	r2, [pc, #56]	; (800ecb4 <fm_factory_get_k_factor+0xb4>)
 800ec7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (k_selected);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a05      	ldr	r2, [pc, #20]	; (800ec9c <fm_factory_get_k_factor+0x9c>)
 800ec86:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec8a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	20001ce8 	.word	0x20001ce8
 800eca0:	200000f4 	.word	0x200000f4
 800eca4:	200000cc 	.word	0x200000cc
 800eca8:	200000d4 	.word	0x200000d4
 800ecac:	200000dc 	.word	0x200000dc
 800ecb0:	200000e4 	.word	0x200000e4
 800ecb4:	200000ec 	.word	0x200000ec

0800ecb8 <fm_factory_get_frec_lin>:

fmc_fp_t fm_factory_get_frec_lin(sel_k k_sel)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
    static fmc_fp_t frec_lin_selected;

    if(k_sel == K_LIN_1)
 800ecc4:	78fb      	ldrb	r3, [r7, #3]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d106      	bne.n	800ecd8 <fm_factory_get_frec_lin+0x20>
    {
        frec_lin_selected = frec_lin_1;
 800ecca:	4b1d      	ldr	r3, [pc, #116]	; (800ed40 <fm_factory_get_frec_lin+0x88>)
 800eccc:	4a1d      	ldr	r2, [pc, #116]	; (800ed44 <fm_factory_get_frec_lin+0x8c>)
 800ecce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecd2:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecd6:	e026      	b.n	800ed26 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_2)
 800ecd8:	78fb      	ldrb	r3, [r7, #3]
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	d106      	bne.n	800ecec <fm_factory_get_frec_lin+0x34>
    {
        frec_lin_selected = frec_lin_2;
 800ecde:	4b18      	ldr	r3, [pc, #96]	; (800ed40 <fm_factory_get_frec_lin+0x88>)
 800ece0:	4a19      	ldr	r2, [pc, #100]	; (800ed48 <fm_factory_get_frec_lin+0x90>)
 800ece2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ece6:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecea:	e01c      	b.n	800ed26 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_3)
 800ecec:	78fb      	ldrb	r3, [r7, #3]
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d106      	bne.n	800ed00 <fm_factory_get_frec_lin+0x48>
    {
        frec_lin_selected = frec_lin_3;
 800ecf2:	4b13      	ldr	r3, [pc, #76]	; (800ed40 <fm_factory_get_frec_lin+0x88>)
 800ecf4:	4a15      	ldr	r2, [pc, #84]	; (800ed4c <fm_factory_get_frec_lin+0x94>)
 800ecf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecfa:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecfe:	e012      	b.n	800ed26 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_4)
 800ed00:	78fb      	ldrb	r3, [r7, #3]
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	d106      	bne.n	800ed14 <fm_factory_get_frec_lin+0x5c>
    {
        frec_lin_selected = frec_lin_4;
 800ed06:	4b0e      	ldr	r3, [pc, #56]	; (800ed40 <fm_factory_get_frec_lin+0x88>)
 800ed08:	4a11      	ldr	r2, [pc, #68]	; (800ed50 <fm_factory_get_frec_lin+0x98>)
 800ed0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed0e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed12:	e008      	b.n	800ed26 <fm_factory_get_frec_lin+0x6e>
    }
    else if(k_sel == K_LIN_5)
 800ed14:	78fb      	ldrb	r3, [r7, #3]
 800ed16:	2b05      	cmp	r3, #5
 800ed18:	d105      	bne.n	800ed26 <fm_factory_get_frec_lin+0x6e>
    {
        frec_lin_selected = frec_lin_5;
 800ed1a:	4b09      	ldr	r3, [pc, #36]	; (800ed40 <fm_factory_get_frec_lin+0x88>)
 800ed1c:	4a0d      	ldr	r2, [pc, #52]	; (800ed54 <fm_factory_get_frec_lin+0x9c>)
 800ed1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed22:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    return (frec_lin_selected);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a05      	ldr	r2, [pc, #20]	; (800ed40 <fm_factory_get_frec_lin+0x88>)
 800ed2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed2e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	370c      	adds	r7, #12
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	20001cf0 	.word	0x20001cf0
 800ed44:	200000a4 	.word	0x200000a4
 800ed48:	200000ac 	.word	0x200000ac
 800ed4c:	200000b4 	.word	0x200000b4
 800ed50:	200000bc 	.word	0x200000bc
 800ed54:	200000c4 	.word	0x200000c4

0800ed58 <fm_factory_get_date_time>:
 * @param None
 * @retval Hora, minutos, segundos, día, mes y año almacenados en
 * date_time_config.
 */
fmc_date_time_t fm_factory_get_date_time()
{
 800ed58:	b4b0      	push	{r4, r5, r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
    return(date_time_config);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a07      	ldr	r2, [pc, #28]	; (800ed80 <fm_factory_get_date_time+0x28>)
 800ed64:	461c      	mov	r4, r3
 800ed66:	4615      	mov	r5, r2
 800ed68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed70:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bcb0      	pop	{r4, r5, r7}
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	2000007c 	.word	0x2000007c

0800ed84 <fm_factory_get_fp_date>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha.
 */
fmc_fp_t fm_factory_get_fp_date()
{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
    return(date_user);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a05      	ldr	r2, [pc, #20]	; (800eda4 <fm_factory_get_fp_date+0x20>)
 800ed90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed94:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr
 800eda4:	20000104 	.word	0x20000104

0800eda8 <fm_factory_get_fp_time>:
 * parámetro de tipo punto fijo con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora.
 */
fmc_fp_t fm_factory_get_fp_time()
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
    return(time_user);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a05      	ldr	r2, [pc, #20]	; (800edc8 <fm_factory_get_fp_time+0x20>)
 800edb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edb8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	200000fc 	.word	0x200000fc

0800edcc <fm_factory_get_fp_date_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la fecha congelada.
 */
fmc_fp_t fm_factory_get_fp_date_conf()
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
    return(date_config);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a05      	ldr	r2, [pc, #20]	; (800edec <fm_factory_get_fp_date_conf+0x20>)
 800edd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eddc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	20000114 	.word	0x20000114

0800edf0 <fm_factory_get_fp_time_conf>:
 * con 0 decimales.
 * @param None
 * @retval Punto fijo que almacena la hora congelada.
 */
fmc_fp_t fm_factory_get_fp_time_conf()
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
    return(time_config);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a05      	ldr	r2, [pc, #20]	; (800ee10 <fm_factory_get_fp_time_conf+0x20>)
 800edfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee00:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	2000010c 	.word	0x2000010c

0800ee14 <fm_factory_modify_fp_date>:
 * fijo.
 * @param Fecha a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_date(int date)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
    date_user.num = date;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4a04      	ldr	r2, [pc, #16]	; (800ee30 <fm_factory_modify_fp_date+0x1c>)
 800ee20:	6013      	str	r3, [r2, #0]
}
 800ee22:	bf00      	nop
 800ee24:	370c      	adds	r7, #12
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	20000104 	.word	0x20000104

0800ee34 <fm_factory_modify_fp_time>:
 * fijo.
 * @param Hora a almacenar como un número concatenado.
 * @retval None
 */
void fm_factory_modify_fp_time(int time)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
    time_user.num = time;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4a04      	ldr	r2, [pc, #16]	; (800ee50 <fm_factory_modify_fp_time+0x1c>)
 800ee40:	6013      	str	r3, [r2, #0]
}
 800ee42:	bf00      	nop
 800ee44:	370c      	adds	r7, #12
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	200000fc 	.word	0x200000fc

0800ee54 <fm_factory_modify_date>:
 * fijo.
 * @param día, mes y año leídos del calendario.
 * @retval None
 */
void fm_factory_modify_date(int mod_day, int mod_month, int mod_year)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
    date_time_config.day = mod_day;
 800ee60:	4a0f      	ldr	r2, [pc, #60]	; (800eea0 <fm_factory_modify_date+0x4c>)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6013      	str	r3, [r2, #0]
    date_time_config.month = mod_month;
 800ee66:	4a0e      	ldr	r2, [pc, #56]	; (800eea0 <fm_factory_modify_date+0x4c>)
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	6053      	str	r3, [r2, #4]
    date_time_config.year = mod_year;
 800ee6c:	4a0c      	ldr	r2, [pc, #48]	; (800eea0 <fm_factory_modify_date+0x4c>)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6093      	str	r3, [r2, #8]

    date_config.num = mod_day * 1000000 + mod_month * 10000 + 2000 + mod_year;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	4a0b      	ldr	r2, [pc, #44]	; (800eea4 <fm_factory_modify_date+0x50>)
 800ee76:	fb03 f202 	mul.w	r2, r3, r2
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	f242 7110 	movw	r1, #10000	; 0x2710
 800ee80:	fb01 f303 	mul.w	r3, r1, r3
 800ee84:	4413      	add	r3, r2
 800ee86:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	461a      	mov	r2, r3
 800ee90:	4b05      	ldr	r3, [pc, #20]	; (800eea8 <fm_factory_modify_date+0x54>)
 800ee92:	601a      	str	r2, [r3, #0]
}
 800ee94:	bf00      	nop
 800ee96:	3714      	adds	r7, #20
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr
 800eea0:	2000007c 	.word	0x2000007c
 800eea4:	000f4240 	.word	0x000f4240
 800eea8:	20000114 	.word	0x20000114

0800eeac <fm_factory_modify_time>:
 * fijo.
 * @param Hora, minutos y segundos leídos del calendario.
 * @retval None
 */
void fm_factory_modify_time(int mod_hour, int mod_minute, int mod_second)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
    date_time_config.hour = mod_hour;
 800eeb8:	4a0e      	ldr	r2, [pc, #56]	; (800eef4 <fm_factory_modify_time+0x48>)
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	60d3      	str	r3, [r2, #12]
    date_time_config.minute = mod_minute;
 800eebe:	4a0d      	ldr	r2, [pc, #52]	; (800eef4 <fm_factory_modify_time+0x48>)
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	6113      	str	r3, [r2, #16]
    date_time_config.second = mod_second;
 800eec4:	4a0b      	ldr	r2, [pc, #44]	; (800eef4 <fm_factory_modify_time+0x48>)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6153      	str	r3, [r2, #20]

    time_config.num = mod_hour * 10000 + mod_minute * 100 + mod_second;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f242 7210 	movw	r2, #10000	; 0x2710
 800eed0:	fb03 f202 	mul.w	r2, r3, r2
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	2164      	movs	r1, #100	; 0x64
 800eed8:	fb01 f303 	mul.w	r3, r1, r3
 800eedc:	441a      	add	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4413      	add	r3, r2
 800eee2:	461a      	mov	r2, r3
 800eee4:	4b04      	ldr	r3, [pc, #16]	; (800eef8 <fm_factory_modify_time+0x4c>)
 800eee6:	601a      	str	r2, [r3, #0]
}
 800eee8:	bf00      	nop
 800eeea:	3714      	adds	r7, #20
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr
 800eef4:	2000007c 	.word	0x2000007c
 800eef8:	2000010c 	.word	0x2000010c

0800eefc <fm_factory_modify_k_factor_add>:
 * @brief Función que suma uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_add(sel_digit_t digit_k)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	4603      	mov	r3, r0
 800ef04:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800ef0a:	f000 fab9 	bl	800f480 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] < VAL_9)
 800ef0e:	79fb      	ldrb	r3, [r7, #7]
 800ef10:	f1c3 0307 	rsb	r3, r3, #7
 800ef14:	4a17      	ldr	r2, [pc, #92]	; (800ef74 <fm_factory_modify_k_factor_add+0x78>)
 800ef16:	5cd3      	ldrb	r3, [r2, r3]
 800ef18:	2b08      	cmp	r3, #8
 800ef1a:	d809      	bhi.n	800ef30 <fm_factory_modify_k_factor_add+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]++;
 800ef1c:	79fb      	ldrb	r3, [r7, #7]
 800ef1e:	f1c3 0307 	rsb	r3, r3, #7
 800ef22:	4a14      	ldr	r2, [pc, #80]	; (800ef74 <fm_factory_modify_k_factor_add+0x78>)
 800ef24:	5cd2      	ldrb	r2, [r2, r3]
 800ef26:	3201      	adds	r2, #1
 800ef28:	b2d1      	uxtb	r1, r2
 800ef2a:	4a12      	ldr	r2, [pc, #72]	; (800ef74 <fm_factory_modify_k_factor_add+0x78>)
 800ef2c:	54d1      	strb	r1, [r2, r3]
 800ef2e:	e005      	b.n	800ef3c <fm_factory_modify_k_factor_add+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_0;
 800ef30:	79fb      	ldrb	r3, [r7, #7]
 800ef32:	f1c3 0307 	rsb	r3, r3, #7
 800ef36:	4a0f      	ldr	r2, [pc, #60]	; (800ef74 <fm_factory_modify_k_factor_add+0x78>)
 800ef38:	2100      	movs	r1, #0
 800ef3a:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	60bb      	str	r3, [r7, #8]
 800ef40:	e00e      	b.n	800ef60 <fm_factory_modify_k_factor_add+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	4613      	mov	r3, r2
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	4413      	add	r3, r2
 800ef4a:	005b      	lsls	r3, r3, #1
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4a09      	ldr	r2, [pc, #36]	; (800ef74 <fm_factory_modify_k_factor_add+0x78>)
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	4413      	add	r3, r2
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	440b      	add	r3, r1
 800ef58:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	60bb      	str	r3, [r7, #8]
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	2b07      	cmp	r3, #7
 800ef64:	dded      	ble.n	800ef42 <fm_factory_modify_k_factor_add+0x46>
    }

    k_factor_config.num = k_new_num;
 800ef66:	4a04      	ldr	r2, [pc, #16]	; (800ef78 <fm_factory_modify_k_factor_add+0x7c>)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6013      	str	r3, [r2, #0]
}
 800ef6c:	bf00      	nop
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	20001cd0 	.word	0x20001cd0
 800ef78:	200000f4 	.word	0x200000f4

0800ef7c <fm_factory_modify_k_factor_subs>:
 * @brief Función que resta uno al dígito pasado como parámetro del factor K.
 * @param Digito a modificar del factor K de la enumeración sel_digit_t.
 * @retval None
 */
void fm_factory_modify_k_factor_subs(sel_digit_t digit_k)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	4603      	mov	r3, r0
 800ef84:	71fb      	strb	r3, [r7, #7]
    uint32_t k_new_num = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60fb      	str	r3, [r7, #12]
    fm_factory_separate_k_factor();
 800ef8a:	f000 fa79 	bl	800f480 <fm_factory_separate_k_factor>
    if (k_array[LINE_1_DIGITS - 1 - digit_k] > VAL_0)
 800ef8e:	79fb      	ldrb	r3, [r7, #7]
 800ef90:	f1c3 0307 	rsb	r3, r3, #7
 800ef94:	4a17      	ldr	r2, [pc, #92]	; (800eff4 <fm_factory_modify_k_factor_subs+0x78>)
 800ef96:	5cd3      	ldrb	r3, [r2, r3]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d009      	beq.n	800efb0 <fm_factory_modify_k_factor_subs+0x34>
    {
        k_array[LINE_1_DIGITS - 1 - digit_k]--;
 800ef9c:	79fb      	ldrb	r3, [r7, #7]
 800ef9e:	f1c3 0307 	rsb	r3, r3, #7
 800efa2:	4a14      	ldr	r2, [pc, #80]	; (800eff4 <fm_factory_modify_k_factor_subs+0x78>)
 800efa4:	5cd2      	ldrb	r2, [r2, r3]
 800efa6:	3a01      	subs	r2, #1
 800efa8:	b2d1      	uxtb	r1, r2
 800efaa:	4a12      	ldr	r2, [pc, #72]	; (800eff4 <fm_factory_modify_k_factor_subs+0x78>)
 800efac:	54d1      	strb	r1, [r2, r3]
 800efae:	e005      	b.n	800efbc <fm_factory_modify_k_factor_subs+0x40>
    }
    else
    {
        k_array[LINE_1_DIGITS - 1 - digit_k] = VAL_9;
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	f1c3 0307 	rsb	r3, r3, #7
 800efb6:	4a0f      	ldr	r2, [pc, #60]	; (800eff4 <fm_factory_modify_k_factor_subs+0x78>)
 800efb8:	2109      	movs	r1, #9
 800efba:	54d1      	strb	r1, [r2, r3]
    }

    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800efbc:	2300      	movs	r3, #0
 800efbe:	60bb      	str	r3, [r7, #8]
 800efc0:	e00e      	b.n	800efe0 <fm_factory_modify_k_factor_subs+0x64>
    {
        k_new_num = (k_new_num * 10) + k_array[i];
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	4613      	mov	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4413      	add	r3, r2
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	4619      	mov	r1, r3
 800efce:	4a09      	ldr	r2, [pc, #36]	; (800eff4 <fm_factory_modify_k_factor_subs+0x78>)
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	4413      	add	r3, r2
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	440b      	add	r3, r1
 800efd8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	3301      	adds	r3, #1
 800efde:	60bb      	str	r3, [r7, #8]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b07      	cmp	r3, #7
 800efe4:	dded      	ble.n	800efc2 <fm_factory_modify_k_factor_subs+0x46>
    }

    k_factor_config.num = k_new_num;
 800efe6:	4a04      	ldr	r2, [pc, #16]	; (800eff8 <fm_factory_modify_k_factor_subs+0x7c>)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6013      	str	r3, [r2, #0]
}
 800efec:	bf00      	nop
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	20001cd0 	.word	0x20001cd0
 800eff8:	200000f4 	.word	0x200000f4

0800effc <fm_factory_modify_k_lin_add>:

void fm_factory_modify_k_lin_add(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	460a      	mov	r2, r1
 800f006:	71fb      	strb	r3, [r7, #7]
 800f008:	4613      	mov	r3, r2
 800f00a:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f010:	2300      	movs	r3, #0
 800f012:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f014:	79bb      	ldrb	r3, [r7, #6]
 800f016:	4618      	mov	r0, r3
 800f018:	f000 fa6e 	bl	800f4f8 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f01c:	79fb      	ldrb	r3, [r7, #7]
 800f01e:	2b07      	cmp	r3, #7
 800f020:	d84e      	bhi.n	800f0c0 <fm_factory_modify_k_lin_add+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] < VAL_9)
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	f1c3 0307 	rsb	r3, r3, #7
 800f028:	4a5e      	ldr	r2, [pc, #376]	; (800f1a4 <fm_factory_modify_k_lin_add+0x1a8>)
 800f02a:	5cd3      	ldrb	r3, [r2, r3]
 800f02c:	2b08      	cmp	r3, #8
 800f02e:	d809      	bhi.n	800f044 <fm_factory_modify_k_lin_add+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]++;
 800f030:	79fb      	ldrb	r3, [r7, #7]
 800f032:	f1c3 0307 	rsb	r3, r3, #7
 800f036:	4a5b      	ldr	r2, [pc, #364]	; (800f1a4 <fm_factory_modify_k_lin_add+0x1a8>)
 800f038:	5cd2      	ldrb	r2, [r2, r3]
 800f03a:	3201      	adds	r2, #1
 800f03c:	b2d1      	uxtb	r1, r2
 800f03e:	4a59      	ldr	r2, [pc, #356]	; (800f1a4 <fm_factory_modify_k_lin_add+0x1a8>)
 800f040:	54d1      	strb	r1, [r2, r3]
 800f042:	e005      	b.n	800f050 <fm_factory_modify_k_lin_add+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_0;
 800f044:	79fb      	ldrb	r3, [r7, #7]
 800f046:	f1c3 0307 	rsb	r3, r3, #7
 800f04a:	4a56      	ldr	r2, [pc, #344]	; (800f1a4 <fm_factory_modify_k_lin_add+0x1a8>)
 800f04c:	2100      	movs	r1, #0
 800f04e:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f050:	2300      	movs	r3, #0
 800f052:	60fb      	str	r3, [r7, #12]
 800f054:	e00e      	b.n	800f074 <fm_factory_modify_k_lin_add+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	4619      	mov	r1, r3
 800f062:	4a50      	ldr	r2, [pc, #320]	; (800f1a4 <fm_factory_modify_k_lin_add+0x1a8>)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	4413      	add	r3, r2
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	440b      	add	r3, r1
 800f06c:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3301      	adds	r3, #1
 800f072:	60fb      	str	r3, [r7, #12]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b07      	cmp	r3, #7
 800f078:	dded      	ble.n	800f056 <fm_factory_modify_k_lin_add+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f07a:	79bb      	ldrb	r3, [r7, #6]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d103      	bne.n	800f088 <fm_factory_modify_k_lin_add+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f080:	4a49      	ldr	r2, [pc, #292]	; (800f1a8 <fm_factory_modify_k_lin_add+0x1ac>)
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f086:	e089      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f088:	79bb      	ldrb	r3, [r7, #6]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d103      	bne.n	800f096 <fm_factory_modify_k_lin_add+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f08e:	4a47      	ldr	r2, [pc, #284]	; (800f1ac <fm_factory_modify_k_lin_add+0x1b0>)
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	6013      	str	r3, [r2, #0]
}
 800f094:	e082      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f096:	79bb      	ldrb	r3, [r7, #6]
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d103      	bne.n	800f0a4 <fm_factory_modify_k_lin_add+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f09c:	4a44      	ldr	r2, [pc, #272]	; (800f1b0 <fm_factory_modify_k_lin_add+0x1b4>)
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	6013      	str	r3, [r2, #0]
}
 800f0a2:	e07b      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f0a4:	79bb      	ldrb	r3, [r7, #6]
 800f0a6:	2b04      	cmp	r3, #4
 800f0a8:	d103      	bne.n	800f0b2 <fm_factory_modify_k_lin_add+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f0aa:	4a42      	ldr	r2, [pc, #264]	; (800f1b4 <fm_factory_modify_k_lin_add+0x1b8>)
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	6013      	str	r3, [r2, #0]
}
 800f0b0:	e074      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f0b2:	79bb      	ldrb	r3, [r7, #6]
 800f0b4:	2b05      	cmp	r3, #5
 800f0b6:	d171      	bne.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f0b8:	4a3f      	ldr	r2, [pc, #252]	; (800f1b8 <fm_factory_modify_k_lin_add+0x1bc>)
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	6013      	str	r3, [r2, #0]
}
 800f0be:	e06d      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f0c0:	79fb      	ldrb	r3, [r7, #7]
 800f0c2:	2b07      	cmp	r3, #7
 800f0c4:	d96a      	bls.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	f1c3 030e 	rsb	r3, r3, #14
 800f0cc:	2b03      	cmp	r3, #3
 800f0ce:	d017      	beq.n	800f100 <fm_factory_modify_k_lin_add+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_9)
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	f1c3 030e 	rsb	r3, r3, #14
 800f0d6:	4a39      	ldr	r2, [pc, #228]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f0d8:	5cd3      	ldrb	r3, [r2, r3]
 800f0da:	2b08      	cmp	r3, #8
 800f0dc:	d809      	bhi.n	800f0f2 <fm_factory_modify_k_lin_add+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f0de:	79fb      	ldrb	r3, [r7, #7]
 800f0e0:	f1c3 030e 	rsb	r3, r3, #14
 800f0e4:	4a35      	ldr	r2, [pc, #212]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f0e6:	5cd2      	ldrb	r2, [r2, r3]
 800f0e8:	3201      	adds	r2, #1
 800f0ea:	b2d1      	uxtb	r1, r2
 800f0ec:	4a33      	ldr	r2, [pc, #204]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f0ee:	54d1      	strb	r1, [r2, r3]
 800f0f0:	e01d      	b.n	800f12e <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f0f2:	79fb      	ldrb	r3, [r7, #7]
 800f0f4:	f1c3 030e 	rsb	r3, r3, #14
 800f0f8:	4a30      	ldr	r2, [pc, #192]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	54d1      	strb	r1, [r2, r3]
 800f0fe:	e016      	b.n	800f12e <fm_factory_modify_k_lin_add+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] < VAL_1)
 800f100:	79fb      	ldrb	r3, [r7, #7]
 800f102:	f1c3 030e 	rsb	r3, r3, #14
 800f106:	4a2d      	ldr	r2, [pc, #180]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f108:	5cd3      	ldrb	r3, [r2, r3]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d109      	bne.n	800f122 <fm_factory_modify_k_lin_add+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]++;
 800f10e:	79fb      	ldrb	r3, [r7, #7]
 800f110:	f1c3 030e 	rsb	r3, r3, #14
 800f114:	4a29      	ldr	r2, [pc, #164]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f116:	5cd2      	ldrb	r2, [r2, r3]
 800f118:	3201      	adds	r2, #1
 800f11a:	b2d1      	uxtb	r1, r2
 800f11c:	4a27      	ldr	r2, [pc, #156]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f11e:	54d1      	strb	r1, [r2, r3]
 800f120:	e005      	b.n	800f12e <fm_factory_modify_k_lin_add+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_0;
 800f122:	79fb      	ldrb	r3, [r7, #7]
 800f124:	f1c3 030e 	rsb	r3, r3, #14
 800f128:	4a24      	ldr	r2, [pc, #144]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f12a:	2100      	movs	r1, #0
 800f12c:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f12e:	2300      	movs	r3, #0
 800f130:	60bb      	str	r3, [r7, #8]
 800f132:	e00e      	b.n	800f152 <fm_factory_modify_k_lin_add+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f134:	693a      	ldr	r2, [r7, #16]
 800f136:	4613      	mov	r3, r2
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	4413      	add	r3, r2
 800f13c:	005b      	lsls	r3, r3, #1
 800f13e:	4619      	mov	r1, r3
 800f140:	4a1e      	ldr	r2, [pc, #120]	; (800f1bc <fm_factory_modify_k_lin_add+0x1c0>)
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	4413      	add	r3, r2
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	440b      	add	r3, r1
 800f14a:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	3301      	adds	r3, #1
 800f150:	60bb      	str	r3, [r7, #8]
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	2b06      	cmp	r3, #6
 800f156:	dded      	ble.n	800f134 <fm_factory_modify_k_lin_add+0x138>
        if(k_sel == K_LIN_1)
 800f158:	79bb      	ldrb	r3, [r7, #6]
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d103      	bne.n	800f166 <fm_factory_modify_k_lin_add+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f15e:	4a18      	ldr	r2, [pc, #96]	; (800f1c0 <fm_factory_modify_k_lin_add+0x1c4>)
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	6013      	str	r3, [r2, #0]
}
 800f164:	e01a      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_2)
 800f166:	79bb      	ldrb	r3, [r7, #6]
 800f168:	2b02      	cmp	r3, #2
 800f16a:	d103      	bne.n	800f174 <fm_factory_modify_k_lin_add+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f16c:	4a15      	ldr	r2, [pc, #84]	; (800f1c4 <fm_factory_modify_k_lin_add+0x1c8>)
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	6013      	str	r3, [r2, #0]
}
 800f172:	e013      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_3)
 800f174:	79bb      	ldrb	r3, [r7, #6]
 800f176:	2b03      	cmp	r3, #3
 800f178:	d103      	bne.n	800f182 <fm_factory_modify_k_lin_add+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f17a:	4a13      	ldr	r2, [pc, #76]	; (800f1c8 <fm_factory_modify_k_lin_add+0x1cc>)
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	6013      	str	r3, [r2, #0]
}
 800f180:	e00c      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_4)
 800f182:	79bb      	ldrb	r3, [r7, #6]
 800f184:	2b04      	cmp	r3, #4
 800f186:	d103      	bne.n	800f190 <fm_factory_modify_k_lin_add+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f188:	4a10      	ldr	r2, [pc, #64]	; (800f1cc <fm_factory_modify_k_lin_add+0x1d0>)
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	6013      	str	r3, [r2, #0]
}
 800f18e:	e005      	b.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
        else if(k_sel == K_LIN_5)
 800f190:	79bb      	ldrb	r3, [r7, #6]
 800f192:	2b05      	cmp	r3, #5
 800f194:	d102      	bne.n	800f19c <fm_factory_modify_k_lin_add+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f196:	4a0e      	ldr	r2, [pc, #56]	; (800f1d0 <fm_factory_modify_k_lin_add+0x1d4>)
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	6013      	str	r3, [r2, #0]
}
 800f19c:	bf00      	nop
 800f19e:	3718      	adds	r7, #24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	20001cd8 	.word	0x20001cd8
 800f1a8:	200000cc 	.word	0x200000cc
 800f1ac:	200000d4 	.word	0x200000d4
 800f1b0:	200000dc 	.word	0x200000dc
 800f1b4:	200000e4 	.word	0x200000e4
 800f1b8:	200000ec 	.word	0x200000ec
 800f1bc:	20001ce0 	.word	0x20001ce0
 800f1c0:	200000a4 	.word	0x200000a4
 800f1c4:	200000ac 	.word	0x200000ac
 800f1c8:	200000b4 	.word	0x200000b4
 800f1cc:	200000bc 	.word	0x200000bc
 800f1d0:	200000c4 	.word	0x200000c4

0800f1d4 <fm_factory_modify_k_lin_subs>:

void fm_factory_modify_k_lin_subs(sel_digit_k_lin_t digit_k_lin, sel_k k_sel)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	4603      	mov	r3, r0
 800f1dc:	460a      	mov	r2, r1
 800f1de:	71fb      	strb	r3, [r7, #7]
 800f1e0:	4613      	mov	r3, r2
 800f1e2:	71bb      	strb	r3, [r7, #6]
    uint32_t k_lin_new_num = 0;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	617b      	str	r3, [r7, #20]
    uint32_t frec_lin_new_num = 0;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	613b      	str	r3, [r7, #16]

    fm_factory_separate_k_lin_and_frec(k_sel);
 800f1ec:	79bb      	ldrb	r3, [r7, #6]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 f982 	bl	800f4f8 <fm_factory_separate_k_lin_and_frec>
    if(digit_k_lin <= DIG_LIN_7)
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	2b07      	cmp	r3, #7
 800f1f8:	d84e      	bhi.n	800f298 <fm_factory_modify_k_lin_subs+0xc4>
    {
        if(k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] > VAL_0)
 800f1fa:	79fb      	ldrb	r3, [r7, #7]
 800f1fc:	f1c3 0307 	rsb	r3, r3, #7
 800f200:	4a5e      	ldr	r2, [pc, #376]	; (800f37c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f202:	5cd3      	ldrb	r3, [r2, r3]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d009      	beq.n	800f21c <fm_factory_modify_k_lin_subs+0x48>
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin]--;
 800f208:	79fb      	ldrb	r3, [r7, #7]
 800f20a:	f1c3 0307 	rsb	r3, r3, #7
 800f20e:	4a5b      	ldr	r2, [pc, #364]	; (800f37c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f210:	5cd2      	ldrb	r2, [r2, r3]
 800f212:	3a01      	subs	r2, #1
 800f214:	b2d1      	uxtb	r1, r2
 800f216:	4a59      	ldr	r2, [pc, #356]	; (800f37c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f218:	54d1      	strb	r1, [r2, r3]
 800f21a:	e005      	b.n	800f228 <fm_factory_modify_k_lin_subs+0x54>
        }
        else
        {
            k_lin_array[LINE_1_DIGITS - 1 - digit_k_lin] = VAL_9;
 800f21c:	79fb      	ldrb	r3, [r7, #7]
 800f21e:	f1c3 0307 	rsb	r3, r3, #7
 800f222:	4a56      	ldr	r2, [pc, #344]	; (800f37c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f224:	2109      	movs	r1, #9
 800f226:	54d1      	strb	r1, [r2, r3]
        }

        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f228:	2300      	movs	r3, #0
 800f22a:	60fb      	str	r3, [r7, #12]
 800f22c:	e00e      	b.n	800f24c <fm_factory_modify_k_lin_subs+0x78>
        {
            k_lin_new_num = (k_lin_new_num * 10) + k_lin_array[i];
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	4613      	mov	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	4413      	add	r3, r2
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	4619      	mov	r1, r3
 800f23a:	4a50      	ldr	r2, [pc, #320]	; (800f37c <fm_factory_modify_k_lin_subs+0x1a8>)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	4413      	add	r3, r2
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	440b      	add	r3, r1
 800f244:	617b      	str	r3, [r7, #20]
        for(int i = 0; i <= LINE_1_DIGITS - 1; i++)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3301      	adds	r3, #1
 800f24a:	60fb      	str	r3, [r7, #12]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2b07      	cmp	r3, #7
 800f250:	dded      	ble.n	800f22e <fm_factory_modify_k_lin_subs+0x5a>
        }

        if(k_sel == K_LIN_1)
 800f252:	79bb      	ldrb	r3, [r7, #6]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d103      	bne.n	800f260 <fm_factory_modify_k_lin_subs+0x8c>
        {
            k_lin_1_config.num = k_lin_new_num;
 800f258:	4a49      	ldr	r2, [pc, #292]	; (800f380 <fm_factory_modify_k_lin_subs+0x1ac>)
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	6013      	str	r3, [r2, #0]
        else if(k_sel == K_LIN_5)
        {
            frec_lin_5.num = frec_lin_new_num;
        }
    }
}
 800f25e:	e089      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f260:	79bb      	ldrb	r3, [r7, #6]
 800f262:	2b02      	cmp	r3, #2
 800f264:	d103      	bne.n	800f26e <fm_factory_modify_k_lin_subs+0x9a>
            k_lin_2_config.num = k_lin_new_num;
 800f266:	4a47      	ldr	r2, [pc, #284]	; (800f384 <fm_factory_modify_k_lin_subs+0x1b0>)
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	6013      	str	r3, [r2, #0]
}
 800f26c:	e082      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f26e:	79bb      	ldrb	r3, [r7, #6]
 800f270:	2b03      	cmp	r3, #3
 800f272:	d103      	bne.n	800f27c <fm_factory_modify_k_lin_subs+0xa8>
            k_lin_3_config.num = k_lin_new_num;
 800f274:	4a44      	ldr	r2, [pc, #272]	; (800f388 <fm_factory_modify_k_lin_subs+0x1b4>)
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	6013      	str	r3, [r2, #0]
}
 800f27a:	e07b      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f27c:	79bb      	ldrb	r3, [r7, #6]
 800f27e:	2b04      	cmp	r3, #4
 800f280:	d103      	bne.n	800f28a <fm_factory_modify_k_lin_subs+0xb6>
            k_lin_4_config.num = k_lin_new_num;
 800f282:	4a42      	ldr	r2, [pc, #264]	; (800f38c <fm_factory_modify_k_lin_subs+0x1b8>)
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	6013      	str	r3, [r2, #0]
}
 800f288:	e074      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f28a:	79bb      	ldrb	r3, [r7, #6]
 800f28c:	2b05      	cmp	r3, #5
 800f28e:	d171      	bne.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
            k_lin_5_config.num = k_lin_new_num;
 800f290:	4a3f      	ldr	r2, [pc, #252]	; (800f390 <fm_factory_modify_k_lin_subs+0x1bc>)
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	6013      	str	r3, [r2, #0]
}
 800f296:	e06d      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
    else if(digit_k_lin > DIG_LIN_7)
 800f298:	79fb      	ldrb	r3, [r7, #7]
 800f29a:	2b07      	cmp	r3, #7
 800f29c:	d96a      	bls.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        if(LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8 != DIG_LIN_3)
 800f29e:	79fb      	ldrb	r3, [r7, #7]
 800f2a0:	f1c3 030e 	rsb	r3, r3, #14
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	d017      	beq.n	800f2d8 <fm_factory_modify_k_lin_subs+0x104>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	f1c3 030e 	rsb	r3, r3, #14
 800f2ae:	4a39      	ldr	r2, [pc, #228]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2b0:	5cd3      	ldrb	r3, [r2, r3]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d009      	beq.n	800f2ca <fm_factory_modify_k_lin_subs+0xf6>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f2b6:	79fb      	ldrb	r3, [r7, #7]
 800f2b8:	f1c3 030e 	rsb	r3, r3, #14
 800f2bc:	4a35      	ldr	r2, [pc, #212]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2be:	5cd2      	ldrb	r2, [r2, r3]
 800f2c0:	3a01      	subs	r2, #1
 800f2c2:	b2d1      	uxtb	r1, r2
 800f2c4:	4a33      	ldr	r2, [pc, #204]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2c6:	54d1      	strb	r1, [r2, r3]
 800f2c8:	e01d      	b.n	800f306 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_9;
 800f2ca:	79fb      	ldrb	r3, [r7, #7]
 800f2cc:	f1c3 030e 	rsb	r3, r3, #14
 800f2d0:	4a30      	ldr	r2, [pc, #192]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2d2:	2109      	movs	r1, #9
 800f2d4:	54d1      	strb	r1, [r2, r3]
 800f2d6:	e016      	b.n	800f306 <fm_factory_modify_k_lin_subs+0x132>
            if(frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] > VAL_0)
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	f1c3 030e 	rsb	r3, r3, #14
 800f2de:	4a2d      	ldr	r2, [pc, #180]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2e0:	5cd3      	ldrb	r3, [r2, r3]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d009      	beq.n	800f2fa <fm_factory_modify_k_lin_subs+0x126>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8]--;
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	f1c3 030e 	rsb	r3, r3, #14
 800f2ec:	4a29      	ldr	r2, [pc, #164]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2ee:	5cd2      	ldrb	r2, [r2, r3]
 800f2f0:	3a01      	subs	r2, #1
 800f2f2:	b2d1      	uxtb	r1, r2
 800f2f4:	4a27      	ldr	r2, [pc, #156]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f2f6:	54d1      	strb	r1, [r2, r3]
 800f2f8:	e005      	b.n	800f306 <fm_factory_modify_k_lin_subs+0x132>
                frec_array[LINE_1_DIGITS - 2 - digit_k_lin + DIG_LIN_8] = VAL_1;
 800f2fa:	79fb      	ldrb	r3, [r7, #7]
 800f2fc:	f1c3 030e 	rsb	r3, r3, #14
 800f300:	4a24      	ldr	r2, [pc, #144]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f302:	2101      	movs	r1, #1
 800f304:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f306:	2300      	movs	r3, #0
 800f308:	60bb      	str	r3, [r7, #8]
 800f30a:	e00e      	b.n	800f32a <fm_factory_modify_k_lin_subs+0x156>
            frec_lin_new_num = (frec_lin_new_num * 10) + frec_array[j];
 800f30c:	693a      	ldr	r2, [r7, #16]
 800f30e:	4613      	mov	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	005b      	lsls	r3, r3, #1
 800f316:	4619      	mov	r1, r3
 800f318:	4a1e      	ldr	r2, [pc, #120]	; (800f394 <fm_factory_modify_k_lin_subs+0x1c0>)
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	4413      	add	r3, r2
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	440b      	add	r3, r1
 800f322:	613b      	str	r3, [r7, #16]
        for(int j = 0; j <= LINE_1_DIGITS - 2; j++)
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	3301      	adds	r3, #1
 800f328:	60bb      	str	r3, [r7, #8]
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	2b06      	cmp	r3, #6
 800f32e:	dded      	ble.n	800f30c <fm_factory_modify_k_lin_subs+0x138>
        if(k_sel == K_LIN_1)
 800f330:	79bb      	ldrb	r3, [r7, #6]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d103      	bne.n	800f33e <fm_factory_modify_k_lin_subs+0x16a>
            frec_lin_1.num = frec_lin_new_num;
 800f336:	4a18      	ldr	r2, [pc, #96]	; (800f398 <fm_factory_modify_k_lin_subs+0x1c4>)
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	6013      	str	r3, [r2, #0]
}
 800f33c:	e01a      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_2)
 800f33e:	79bb      	ldrb	r3, [r7, #6]
 800f340:	2b02      	cmp	r3, #2
 800f342:	d103      	bne.n	800f34c <fm_factory_modify_k_lin_subs+0x178>
            frec_lin_2.num = frec_lin_new_num;
 800f344:	4a15      	ldr	r2, [pc, #84]	; (800f39c <fm_factory_modify_k_lin_subs+0x1c8>)
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	6013      	str	r3, [r2, #0]
}
 800f34a:	e013      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_3)
 800f34c:	79bb      	ldrb	r3, [r7, #6]
 800f34e:	2b03      	cmp	r3, #3
 800f350:	d103      	bne.n	800f35a <fm_factory_modify_k_lin_subs+0x186>
            frec_lin_3.num = frec_lin_new_num;
 800f352:	4a13      	ldr	r2, [pc, #76]	; (800f3a0 <fm_factory_modify_k_lin_subs+0x1cc>)
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	6013      	str	r3, [r2, #0]
}
 800f358:	e00c      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_4)
 800f35a:	79bb      	ldrb	r3, [r7, #6]
 800f35c:	2b04      	cmp	r3, #4
 800f35e:	d103      	bne.n	800f368 <fm_factory_modify_k_lin_subs+0x194>
            frec_lin_4.num = frec_lin_new_num;
 800f360:	4a10      	ldr	r2, [pc, #64]	; (800f3a4 <fm_factory_modify_k_lin_subs+0x1d0>)
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	6013      	str	r3, [r2, #0]
}
 800f366:	e005      	b.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
        else if(k_sel == K_LIN_5)
 800f368:	79bb      	ldrb	r3, [r7, #6]
 800f36a:	2b05      	cmp	r3, #5
 800f36c:	d102      	bne.n	800f374 <fm_factory_modify_k_lin_subs+0x1a0>
            frec_lin_5.num = frec_lin_new_num;
 800f36e:	4a0e      	ldr	r2, [pc, #56]	; (800f3a8 <fm_factory_modify_k_lin_subs+0x1d4>)
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	6013      	str	r3, [r2, #0]
}
 800f374:	bf00      	nop
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	20001cd8 	.word	0x20001cd8
 800f380:	200000cc 	.word	0x200000cc
 800f384:	200000d4 	.word	0x200000d4
 800f388:	200000dc 	.word	0x200000dc
 800f38c:	200000e4 	.word	0x200000e4
 800f390:	200000ec 	.word	0x200000ec
 800f394:	20001ce0 	.word	0x20001ce0
 800f398:	200000a4 	.word	0x200000a4
 800f39c:	200000ac 	.word	0x200000ac
 800f3a0:	200000b4 	.word	0x200000b4
 800f3a4:	200000bc 	.word	0x200000bc
 800f3a8:	200000c4 	.word	0x200000c4

0800f3ac <fm_factory_modify_res_acm_ttl>:
 * @param Resoluciones de fabrica, y de los parámetros ACM y TTL.
 * @retval None
 */
void fm_factory_modify_res_acm_ttl(sel_resolution_t units_res,
sel_resolution_t acm_res, sel_resolution_t ttl_res)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	71fb      	strb	r3, [r7, #7]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	71bb      	strb	r3, [r7, #6]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	717b      	strb	r3, [r7, #5]
    units_digits_vol.res = units_res;
 800f3be:	4a07      	ldr	r2, [pc, #28]	; (800f3dc <fm_factory_modify_res_acm_ttl+0x30>)
 800f3c0:	79fb      	ldrb	r3, [r7, #7]
 800f3c2:	7113      	strb	r3, [r2, #4]
    acm_config.volume.res = acm_res;
 800f3c4:	4a06      	ldr	r2, [pc, #24]	; (800f3e0 <fm_factory_modify_res_acm_ttl+0x34>)
 800f3c6:	79bb      	ldrb	r3, [r7, #6]
 800f3c8:	7313      	strb	r3, [r2, #12]
    ttl_config.volume.res = ttl_res;
 800f3ca:	4a06      	ldr	r2, [pc, #24]	; (800f3e4 <fm_factory_modify_res_acm_ttl+0x38>)
 800f3cc:	797b      	ldrb	r3, [r7, #5]
 800f3ce:	7313      	strb	r3, [r2, #12]
}
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	2000009c 	.word	0x2000009c
 800f3e0:	20000030 	.word	0x20000030
 800f3e4:	20000010 	.word	0x20000010

0800f3e8 <fm_factory_modify_res_rate>:
 * @param Resolución de fabrica, y del parámetro rate.
 * @retval None
 */
void fm_factory_modify_res_rate(sel_resolution_t units_res,
sel_resolution_t rate_res)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	460a      	mov	r2, r1
 800f3f2:	71fb      	strb	r3, [r7, #7]
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	71bb      	strb	r3, [r7, #6]
    units_digits_tim.res = units_res;
 800f3f8:	4a05      	ldr	r2, [pc, #20]	; (800f410 <fm_factory_modify_res_rate+0x28>)
 800f3fa:	79fb      	ldrb	r3, [r7, #7]
 800f3fc:	7113      	strb	r3, [r2, #4]
    rate_config.volume.res = rate_res;
 800f3fe:	4a05      	ldr	r2, [pc, #20]	; (800f414 <fm_factory_modify_res_rate+0x2c>)
 800f400:	79bb      	ldrb	r3, [r7, #6]
 800f402:	7313      	strb	r3, [r2, #12]
}
 800f404:	bf00      	nop
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr
 800f410:	20000094 	.word	0x20000094
 800f414:	20000050 	.word	0x20000050

0800f418 <fm_factory_modify_time_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_time_units(fmc_unit_time_t time_units)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	4603      	mov	r3, r0
 800f420:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_time = time_units;
 800f422:	4a07      	ldr	r2, [pc, #28]	; (800f440 <fm_factory_modify_time_units+0x28>)
 800f424:	79fb      	ldrb	r3, [r7, #7]
 800f426:	7653      	strb	r3, [r2, #25]
    ttl_config.unit_time = time_units;
 800f428:	4a06      	ldr	r2, [pc, #24]	; (800f444 <fm_factory_modify_time_units+0x2c>)
 800f42a:	79fb      	ldrb	r3, [r7, #7]
 800f42c:	7653      	strb	r3, [r2, #25]
    rate_config.unit_time = time_units;
 800f42e:	4a06      	ldr	r2, [pc, #24]	; (800f448 <fm_factory_modify_time_units+0x30>)
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	7653      	strb	r3, [r2, #25]
}
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	20000030 	.word	0x20000030
 800f444:	20000010 	.word	0x20000010
 800f448:	20000050 	.word	0x20000050

0800f44c <fm_factory_modify_volume_units>:
 * usuario.
 * @param A que unidad se quiere cambiar.
 * @retval None
 */
void fm_factory_modify_volume_units(fmc_unit_volume_t volume_units)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	4603      	mov	r3, r0
 800f454:	71fb      	strb	r3, [r7, #7]
    acm_config.unit_volume = volume_units;
 800f456:	4a07      	ldr	r2, [pc, #28]	; (800f474 <fm_factory_modify_volume_units+0x28>)
 800f458:	79fb      	ldrb	r3, [r7, #7]
 800f45a:	7613      	strb	r3, [r2, #24]
    ttl_config.unit_volume = volume_units;
 800f45c:	4a06      	ldr	r2, [pc, #24]	; (800f478 <fm_factory_modify_volume_units+0x2c>)
 800f45e:	79fb      	ldrb	r3, [r7, #7]
 800f460:	7613      	strb	r3, [r2, #24]
    rate_config.unit_volume = volume_units;
 800f462:	4a06      	ldr	r2, [pc, #24]	; (800f47c <fm_factory_modify_volume_units+0x30>)
 800f464:	79fb      	ldrb	r3, [r7, #7]
 800f466:	7613      	strb	r3, [r2, #24]
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr
 800f474:	20000030 	.word	0x20000030
 800f478:	20000010 	.word	0x20000010
 800f47c:	20000050 	.word	0x20000050

0800f480 <fm_factory_separate_k_factor>:
 * global.
 * @param None
 * @retval None
 */
void fm_factory_separate_k_factor()
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
    uint32_t k_num;
    int i = 7;
 800f486:	2307      	movs	r3, #7
 800f488:	60bb      	str	r3, [r7, #8]
    k_num = fm_factory_get_k_factor(K_FACTOR).num;
 800f48a:	463b      	mov	r3, r7
 800f48c:	2100      	movs	r1, #0
 800f48e:	4618      	mov	r0, r3
 800f490:	f7ff fbb6 	bl	800ec00 <fm_factory_get_k_factor>
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	60fb      	str	r3, [r7, #12]

    while (i >= 0)
 800f498:	e021      	b.n	800f4de <fm_factory_separate_k_factor+0x5e>
    {
        if (k_num > 0)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d016      	beq.n	800f4ce <fm_factory_separate_k_factor+0x4e>
        {
            k_array[i] = k_num % 10;
 800f4a0:	68f9      	ldr	r1, [r7, #12]
 800f4a2:	4b13      	ldr	r3, [pc, #76]	; (800f4f0 <fm_factory_separate_k_factor+0x70>)
 800f4a4:	fba3 2301 	umull	r2, r3, r3, r1
 800f4a8:	08da      	lsrs	r2, r3, #3
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	4413      	add	r3, r2
 800f4b0:	005b      	lsls	r3, r3, #1
 800f4b2:	1aca      	subs	r2, r1, r3
 800f4b4:	b2d1      	uxtb	r1, r2
 800f4b6:	4a0f      	ldr	r2, [pc, #60]	; (800f4f4 <fm_factory_separate_k_factor+0x74>)
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	460a      	mov	r2, r1
 800f4be:	701a      	strb	r2, [r3, #0]
            k_num /= 10;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	4a0b      	ldr	r2, [pc, #44]	; (800f4f0 <fm_factory_separate_k_factor+0x70>)
 800f4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c8:	08db      	lsrs	r3, r3, #3
 800f4ca:	60fb      	str	r3, [r7, #12]
 800f4cc:	e004      	b.n	800f4d8 <fm_factory_separate_k_factor+0x58>
        }
        else
        {
            k_array[i] = 0;
 800f4ce:	4a09      	ldr	r2, [pc, #36]	; (800f4f4 <fm_factory_separate_k_factor+0x74>)
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	60bb      	str	r3, [r7, #8]
    while (i >= 0)
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	dada      	bge.n	800f49a <fm_factory_separate_k_factor+0x1a>
    }
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	cccccccd 	.word	0xcccccccd
 800f4f4:	20001cd0 	.word	0x20001cd0

0800f4f8 <fm_factory_separate_k_lin_and_frec>:

void fm_factory_separate_k_lin_and_frec(sel_k k_sel)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b08a      	sub	sp, #40	; 0x28
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	4603      	mov	r3, r0
 800f500:	71fb      	strb	r3, [r7, #7]
    uint32_t k_lin_num;
    uint32_t frec_num;

    int i = 7; //Contador que funciona solo en el while de esta función.
 800f502:	2307      	movs	r3, #7
 800f504:	61fb      	str	r3, [r7, #28]
    int j = 6; //Contador que funciona solo en el while de esta función.
 800f506:	2306      	movs	r3, #6
 800f508:	61bb      	str	r3, [r7, #24]
    k_lin_num = fm_factory_get_k_factor(k_sel).num;
 800f50a:	f107 0308 	add.w	r3, r7, #8
 800f50e:	79fa      	ldrb	r2, [r7, #7]
 800f510:	4611      	mov	r1, r2
 800f512:	4618      	mov	r0, r3
 800f514:	f7ff fb74 	bl	800ec00 <fm_factory_get_k_factor>
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	627b      	str	r3, [r7, #36]	; 0x24
    frec_num = fm_factory_get_frec_lin(k_sel).num;
 800f51c:	f107 0310 	add.w	r3, r7, #16
 800f520:	79fa      	ldrb	r2, [r7, #7]
 800f522:	4611      	mov	r1, r2
 800f524:	4618      	mov	r0, r3
 800f526:	f7ff fbc7 	bl	800ecb8 <fm_factory_get_frec_lin>
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	623b      	str	r3, [r7, #32]

    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f52e:	e021      	b.n	800f574 <fm_factory_separate_k_lin_and_frec+0x7c>
    {
        if (k_lin_num > 0)
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	2b00      	cmp	r3, #0
 800f534:	d016      	beq.n	800f564 <fm_factory_separate_k_lin_and_frec+0x6c>
        {
            k_lin_array[i] = k_lin_num % 10;
 800f536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f538:	4b25      	ldr	r3, [pc, #148]	; (800f5d0 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f53a:	fba3 2301 	umull	r2, r3, r3, r1
 800f53e:	08da      	lsrs	r2, r3, #3
 800f540:	4613      	mov	r3, r2
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4413      	add	r3, r2
 800f546:	005b      	lsls	r3, r3, #1
 800f548:	1aca      	subs	r2, r1, r3
 800f54a:	b2d1      	uxtb	r1, r2
 800f54c:	4a21      	ldr	r2, [pc, #132]	; (800f5d4 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	4413      	add	r3, r2
 800f552:	460a      	mov	r2, r1
 800f554:	701a      	strb	r2, [r3, #0]
            k_lin_num /= 10;
 800f556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f558:	4a1d      	ldr	r2, [pc, #116]	; (800f5d0 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f55a:	fba2 2303 	umull	r2, r3, r2, r3
 800f55e:	08db      	lsrs	r3, r3, #3
 800f560:	627b      	str	r3, [r7, #36]	; 0x24
 800f562:	e004      	b.n	800f56e <fm_factory_separate_k_lin_and_frec+0x76>
        }
        else
        {
            k_lin_array[i] = 0;
 800f564:	4a1b      	ldr	r2, [pc, #108]	; (800f5d4 <fm_factory_separate_k_lin_and_frec+0xdc>)
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	4413      	add	r3, r2
 800f56a:	2200      	movs	r2, #0
 800f56c:	701a      	strb	r2, [r3, #0]
        }
        i--;
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	3b01      	subs	r3, #1
 800f572:	61fb      	str	r3, [r7, #28]
    while (i >= 0) //Introduzco el factor k linealizado en un arreglo.
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	2b00      	cmp	r3, #0
 800f578:	dada      	bge.n	800f530 <fm_factory_separate_k_lin_and_frec+0x38>
    }

    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f57a:	e021      	b.n	800f5c0 <fm_factory_separate_k_lin_and_frec+0xc8>
    {
        if(frec_num > 0)
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d016      	beq.n	800f5b0 <fm_factory_separate_k_lin_and_frec+0xb8>
        {
            frec_array[j] = frec_num % 10;
 800f582:	6a39      	ldr	r1, [r7, #32]
 800f584:	4b12      	ldr	r3, [pc, #72]	; (800f5d0 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f586:	fba3 2301 	umull	r2, r3, r3, r1
 800f58a:	08da      	lsrs	r2, r3, #3
 800f58c:	4613      	mov	r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	1aca      	subs	r2, r1, r3
 800f596:	b2d1      	uxtb	r1, r2
 800f598:	4a0f      	ldr	r2, [pc, #60]	; (800f5d8 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	4413      	add	r3, r2
 800f59e:	460a      	mov	r2, r1
 800f5a0:	701a      	strb	r2, [r3, #0]
            frec_num /= 10;
 800f5a2:	6a3b      	ldr	r3, [r7, #32]
 800f5a4:	4a0a      	ldr	r2, [pc, #40]	; (800f5d0 <fm_factory_separate_k_lin_and_frec+0xd8>)
 800f5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f5aa:	08db      	lsrs	r3, r3, #3
 800f5ac:	623b      	str	r3, [r7, #32]
 800f5ae:	e004      	b.n	800f5ba <fm_factory_separate_k_lin_and_frec+0xc2>
        }
        else
        {
            frec_array[j] = 0;
 800f5b0:	4a09      	ldr	r2, [pc, #36]	; (800f5d8 <fm_factory_separate_k_lin_and_frec+0xe0>)
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	701a      	strb	r2, [r3, #0]
        }
        j--;
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	61bb      	str	r3, [r7, #24]
    while(j >= 0) //Introduzco la frecuencia de linealización en otro arreglo.
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	dada      	bge.n	800f57c <fm_factory_separate_k_lin_and_frec+0x84>
    }
}
 800f5c6:	bf00      	nop
 800f5c8:	bf00      	nop
 800f5ca:	3728      	adds	r7, #40	; 0x28
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	cccccccd 	.word	0xcccccccd
 800f5d4:	20001cd8 	.word	0x20001cd8
 800f5d8:	20001ce0 	.word	0x20001ce0

0800f5dc <HAL_GPIO_EXTI_Rising_Callback>:
// Private function bodies.

// Interrupts

void HAL_GPIO_EXTI_Rising_Callback(uint16_t gpio_pin) // @suppress("Name convention for function")
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	80fb      	strh	r3, [r7, #6]
    /*
     * Deshabilito interrupciones para evitar rebotes de los botones, hasta que
     * la tarea task_debounce termine su ejecución y se bloquee.
     */
    HAL_NVIC_DisableIRQ(EXTI10_IRQn);
 800f5e6:	2015      	movs	r0, #21
 800f5e8:	f7f4 fc6e 	bl	8003ec8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI11_IRQn);
 800f5ec:	2016      	movs	r0, #22
 800f5ee:	f7f4 fc6b 	bl	8003ec8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI12_IRQn);
 800f5f2:	2017      	movs	r0, #23
 800f5f4:	f7f4 fc68 	bl	8003ec8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI13_IRQn);
 800f5f8:	2018      	movs	r0, #24
 800f5fa:	f7f4 fc65 	bl	8003ec8 <HAL_NVIC_DisableIRQ>
    fm_event_t event_now;

    /*
     * Compruebo qué botón fue el presionado.
     */
    switch (gpio_pin)
 800f5fe:	88fb      	ldrh	r3, [r7, #6]
 800f600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f604:	d018      	beq.n	800f638 <HAL_GPIO_EXTI_Rising_Callback+0x5c>
 800f606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f60a:	dc18      	bgt.n	800f63e <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f60c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f610:	d00f      	beq.n	800f632 <HAL_GPIO_EXTI_Rising_Callback+0x56>
 800f612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f616:	dc12      	bgt.n	800f63e <HAL_GPIO_EXTI_Rising_Callback+0x62>
 800f618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f61c:	d003      	beq.n	800f626 <HAL_GPIO_EXTI_Rising_Callback+0x4a>
 800f61e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f622:	d003      	beq.n	800f62c <HAL_GPIO_EXTI_Rising_Callback+0x50>
        break;
        case KEY_ESC:
            event_now = EVENT_KEY_ESC;
        break;
        default:
        break;
 800f624:	e00b      	b.n	800f63e <HAL_GPIO_EXTI_Rising_Callback+0x62>
            event_now = EVENT_KEY_UP;
 800f626:	2302      	movs	r3, #2
 800f628:	73fb      	strb	r3, [r7, #15]
        break;
 800f62a:	e009      	b.n	800f640 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_DOWN;
 800f62c:	2303      	movs	r3, #3
 800f62e:	73fb      	strb	r3, [r7, #15]
        break;
 800f630:	e006      	b.n	800f640 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ENTER;
 800f632:	2304      	movs	r3, #4
 800f634:	73fb      	strb	r3, [r7, #15]
        break;
 800f636:	e003      	b.n	800f640 <HAL_GPIO_EXTI_Rising_Callback+0x64>
            event_now = EVENT_KEY_ESC;
 800f638:	2305      	movs	r3, #5
 800f63a:	73fb      	strb	r3, [r7, #15]
        break;
 800f63c:	e000      	b.n	800f640 <HAL_GPIO_EXTI_Rising_Callback+0x64>
        break;
 800f63e:	bf00      	nop
    /*
     * Pongo el nombre del botón presionado en la cola de eventos y libero el
     * semáforo de la tarea task_debounce, para que esta se bloquee durante el
     * tiempo necesario para que no haya rebotes de los botones.
     */
    tx_queue_send(&event_queue_ptr,&event_now,TX_NO_WAIT);
 800f640:	f107 030f 	add.w	r3, r7, #15
 800f644:	2200      	movs	r2, #0
 800f646:	4619      	mov	r1, r3
 800f648:	4805      	ldr	r0, [pc, #20]	; (800f660 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800f64a:	f7fe fe09 	bl	800e260 <_txe_queue_send>
    tx_semaphore_ceiling_put(&debounce_semaphore_ptr, 1);
 800f64e:	2101      	movs	r1, #1
 800f650:	4804      	ldr	r0, [pc, #16]	; (800f664 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 800f652:	f7fe fe4f 	bl	800e2f4 <_txe_semaphore_ceiling_put>
}
 800f656:	bf00      	nop
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	20001388 	.word	0x20001388
 800f664:	2000136c 	.word	0x2000136c

0800f668 <fm_lcd_acm_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_rate()
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b0b8      	sub	sp, #224	; 0xe0
 800f66c:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f66e:	f107 0318 	add.w	r3, r7, #24
 800f672:	4618      	mov	r0, r3
 800f674:	f004 febe 	bl	80143f4 <fmc_get_acm>
 800f678:	2314      	movs	r3, #20
 800f67a:	9301      	str	r3, [sp, #4]
 800f67c:	1d3b      	adds	r3, r7, #4
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	2309      	movs	r3, #9
 800f682:	2220      	movs	r2, #32
 800f684:	f107 0120 	add.w	r1, r7, #32
 800f688:	c903      	ldmia	r1, {r0, r1}
 800f68a:	f000 fa13 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f68e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f692:	4618      	mov	r0, r3
 800f694:	f004 feae 	bl	80143f4 <fmc_get_acm>
 800f698:	1d3a      	adds	r2, r7, #4
 800f69a:	2314      	movs	r3, #20
 800f69c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f6a0:	c903      	ldmia	r1, {r0, r1}
 800f6a2:	f000 f9c3 	bl	800fa2c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f6a6:	1d3b      	adds	r3, r7, #4
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 fbf0 	bl	800fe90 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800f6b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f004 ff03 	bl	80144c0 <fmc_get_rate>
 800f6ba:	2314      	movs	r3, #20
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	1d3b      	adds	r3, r7, #4
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	2308      	movs	r3, #8
 800f6c4:	2220      	movs	r2, #32
 800f6c6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f6ca:	c903      	ldmia	r1, {r0, r1}
 800f6cc:	f000 f9f2 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800f6d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f004 fef3 	bl	80144c0 <fmc_get_rate>
 800f6da:	1d3a      	adds	r2, r7, #4
 800f6dc:	2314      	movs	r3, #20
 800f6de:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800f6e2:	c903      	ldmia	r1, {r0, r1}
 800f6e4:	f000 f9a2 	bl	800fa2c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f6e8:	1d3b      	adds	r3, r7, #4
 800f6ea:	2101      	movs	r1, #1
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 fbcf 	bl	800fe90 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	2006      	movs	r0, #6
 800f6f6:	f001 fee7 	bl	80114c8 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	2002      	movs	r0, #2
 800f6fe:	f001 fee3 	bl	80114c8 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 800f702:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f706:	4618      	mov	r0, r3
 800f708:	f004 fe74 	bl	80143f4 <fmc_get_acm>
 800f70c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800f710:	2100      	movs	r1, #0
 800f712:	4618      	mov	r0, r3
 800f714:	f002 fa5c 	bl	8011bd0 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800f718:	2100      	movs	r1, #0
 800f71a:	2007      	movs	r0, #7
 800f71c:	f001 fed4 	bl	80114c8 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_acm().unit_time, 0x0);
 800f720:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f724:	4618      	mov	r0, r3
 800f726:	f004 fe65 	bl	80143f4 <fmc_get_acm>
 800f72a:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800f72e:	2100      	movs	r1, #0
 800f730:	4618      	mov	r0, r3
 800f732:	f002 fa0b 	bl	8011b4c <lcd_set_time_unit>
}
 800f736:	bf00      	nop
 800f738:	37d8      	adds	r7, #216	; 0xd8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <fm_lcd_acm_temp>:
 * de forma personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_acm_temp()
{
 800f73e:	b580      	push	{r7, lr}
 800f740:	b0a2      	sub	sp, #136	; 0x88
 800f742:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_acm().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800f744:	f107 0318 	add.w	r3, r7, #24
 800f748:	4618      	mov	r0, r3
 800f74a:	f004 fe53 	bl	80143f4 <fmc_get_acm>
 800f74e:	2314      	movs	r3, #20
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	1d3b      	adds	r3, r7, #4
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	2309      	movs	r3, #9
 800f758:	2220      	movs	r2, #32
 800f75a:	f107 0120 	add.w	r1, r7, #32
 800f75e:	c903      	ldmia	r1, {r0, r1}
 800f760:	f000 f9a8 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_acm().volume, lcd_msg, sizeof(lcd_msg));
 800f764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f768:	4618      	mov	r0, r3
 800f76a:	f004 fe43 	bl	80143f4 <fmc_get_acm>
 800f76e:	1d3a      	adds	r2, r7, #4
 800f770:	2314      	movs	r3, #20
 800f772:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f776:	c903      	ldmia	r1, {r0, r1}
 800f778:	f000 f958 	bl	800fa2c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f77c:	1d3b      	adds	r3, r7, #4
 800f77e:	2100      	movs	r1, #0
 800f780:	4618      	mov	r0, r3
 800f782:	f000 fb85 	bl	800fe90 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_stm32_temp().temperature, ' ', LINE_1_DIGITS,
 800f786:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f78a:	4618      	mov	r0, r3
 800f78c:	f004 fe72 	bl	8014474 <fmc_get_stm32_temp>
 800f790:	2314      	movs	r3, #20
 800f792:	9301      	str	r3, [sp, #4]
 800f794:	1d3b      	adds	r3, r7, #4
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	2308      	movs	r3, #8
 800f79a:	2220      	movs	r2, #32
 800f79c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f7a0:	c903      	ldmia	r1, {r0, r1}
 800f7a2:	f000 f987 	bl	800fab4 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_stm32_temp().temperature, lcd_msg,
 800f7a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f004 fe62 	bl	8014474 <fmc_get_stm32_temp>
 800f7b0:	1d3a      	adds	r2, r7, #4
 800f7b2:	2314      	movs	r3, #20
 800f7b4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f7b8:	c903      	ldmia	r1, {r0, r1}
 800f7ba:	f000 f937 	bl	800fa2c <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f7be:	1d3b      	adds	r3, r7, #4
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f000 fb64 	bl	800fe90 <fm_lcd_puts>

    lcd_set_symbol(ACM, 0x0);
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	2006      	movs	r0, #6
 800f7cc:	f001 fe7c 	bl	80114c8 <lcd_set_symbol>
    lcd_set_vol_unit(fmc_get_stm32_temp().unit_volume_temp, 0x0);
 800f7d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f004 fe4d 	bl	8014474 <fmc_get_stm32_temp>
 800f7da:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f7de:	2100      	movs	r1, #0
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f002 f9f5 	bl	8011bd0 <lcd_set_vol_unit>
}
 800f7e6:	bf00      	nop
 800f7e8:	3780      	adds	r7, #128	; 0x80
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <fm_lcd_clear>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void fm_lcd_clear()
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800f7f2:	f000 fd65 	bl	80102c0 <lcd_clear_all>
}
 800f7f6:	bf00      	nop
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <fm_lcd_date_hour>:
 * @param Hora y fecha a imprimir.
 * @retval None
 */
void fm_lcd_date_hour(user_or_configuration_t configuration,
fm_event_t event_id, sel_date_time_field_t field)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b090      	sub	sp, #64	; 0x40
 800f800:	af02      	add	r7, sp, #8
 800f802:	4603      	mov	r3, r0
 800f804:	73fb      	strb	r3, [r7, #15]
 800f806:	460b      	mov	r3, r1
 800f808:	73bb      	strb	r3, [r7, #14]
 800f80a:	4613      	mov	r3, r2
 800f80c:	737b      	strb	r3, [r7, #13]
    char lcd_msg[PCF8553_DATA_SIZE];

    /*
     * Se comprueba si se está en el menú de configuración o de usuario.
     */
    if(configuration)
 800f80e:	7bfb      	ldrb	r3, [r7, #15]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d00a      	beq.n	800f82a <fm_lcd_date_hour+0x2e>
    {
        date_to_str = fm_factory_get_fp_date_conf();
 800f814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f818:	4618      	mov	r0, r3
 800f81a:	f7ff fad7 	bl	800edcc <fm_factory_get_fp_date_conf>
        time_to_str = fm_factory_get_fp_time_conf();
 800f81e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f822:	4618      	mov	r0, r3
 800f824:	f7ff fae4 	bl	800edf0 <fm_factory_get_fp_time_conf>
 800f828:	e019      	b.n	800f85e <fm_lcd_date_hour+0x62>
    }
    else
    {
        fm_calendar_format_date();
 800f82a:	f7ff f92f 	bl	800ea8c <fm_calendar_format_date>
        fm_calendar_format_time();
 800f82e:	f7ff f907 	bl	800ea40 <fm_calendar_format_time>

        date_to_str = fm_factory_get_fp_date();
 800f832:	463b      	mov	r3, r7
 800f834:	4618      	mov	r0, r3
 800f836:	f7ff faa5 	bl	800ed84 <fm_factory_get_fp_date>
 800f83a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f83e:	463a      	mov	r2, r7
 800f840:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f844:	e883 0003 	stmia.w	r3, {r0, r1}
        time_to_str = fm_factory_get_fp_time();
 800f848:	463b      	mov	r3, r7
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7ff faac 	bl	800eda8 <fm_factory_get_fp_time>
 800f850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f854:	463a      	mov	r2, r7
 800f856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f85a:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    fm_lcd_fp_to_str(date_to_str, '0', LINE_0_DIGITS, lcd_msg,
 800f85e:	2314      	movs	r3, #20
 800f860:	9301      	str	r3, [sp, #4]
 800f862:	f107 0314 	add.w	r3, r7, #20
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	2309      	movs	r3, #9
 800f86a:	2230      	movs	r2, #48	; 0x30
 800f86c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f870:	c903      	ldmia	r1, {r0, r1}
 800f872:	f000 f91f 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800f876:	f107 0314 	add.w	r3, r7, #20
 800f87a:	2100      	movs	r1, #0
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 fb07 	bl	800fe90 <fm_lcd_puts>
    lcd_set_point(HIGH_ROW, PNT_1);
 800f882:	2101      	movs	r1, #1
 800f884:	2000      	movs	r0, #0
 800f886:	f001 fd73 	bl	8011370 <lcd_set_point>
    lcd_set_point(HIGH_ROW, PNT_3);
 800f88a:	2103      	movs	r1, #3
 800f88c:	2000      	movs	r0, #0
 800f88e:	f001 fd6f 	bl	8011370 <lcd_set_point>

    fm_lcd_fp_to_str(time_to_str, '0', LINE_1_DIGITS, lcd_msg,
 800f892:	2314      	movs	r3, #20
 800f894:	9301      	str	r3, [sp, #4]
 800f896:	f107 0314 	add.w	r3, r7, #20
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	2308      	movs	r3, #8
 800f89e:	2230      	movs	r2, #48	; 0x30
 800f8a0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f8a4:	c903      	ldmia	r1, {r0, r1}
 800f8a6:	f000 f905 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800f8aa:	f107 0314 	add.w	r3, r7, #20
 800f8ae:	2101      	movs	r1, #1
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 faed 	bl	800fe90 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800f8b6:	2101      	movs	r1, #1
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	f000 fd29 	bl	8010310 <lcd_clear_digit>
    lcd_set_point(LOW_ROW, PNT_2);
 800f8be:	2102      	movs	r1, #2
 800f8c0:	2001      	movs	r0, #1
 800f8c2:	f001 fd55 	bl	8011370 <lcd_set_point>
    lcd_set_point(LOW_ROW, PNT_4);
 800f8c6:	2104      	movs	r1, #4
 800f8c8:	2001      	movs	r0, #1
 800f8ca:	f001 fd51 	bl	8011370 <lcd_set_point>

    if(configuration)
 800f8ce:	7bfb      	ldrb	r3, [r7, #15]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d07e      	beq.n	800f9d2 <fm_lcd_date_hour+0x1d6>
    {
        if(event_id == EVENT_KEY_ENTER ||
 800f8d4:	7bbb      	ldrb	r3, [r7, #14]
 800f8d6:	2b04      	cmp	r3, #4
 800f8d8:	d006      	beq.n	800f8e8 <fm_lcd_date_hour+0xec>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800f8da:	4b40      	ldr	r3, [pc, #256]	; (800f9dc <fm_lcd_date_hour+0x1e0>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
        if(event_id == EVENT_KEY_ENTER ||
 800f8de:	2b04      	cmp	r3, #4
 800f8e0:	d106      	bne.n	800f8f0 <fm_lcd_date_hour+0xf4>
        (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800f8e2:	7bbb      	ldrb	r3, [r7, #14]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d103      	bne.n	800f8f0 <fm_lcd_date_hour+0xf4>
        {
            blink = 1;
 800f8e8:	4b3d      	ldr	r3, [pc, #244]	; (800f9e0 <fm_lcd_date_hour+0x1e4>)
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	601a      	str	r2, [r3, #0]
 800f8ee:	e016      	b.n	800f91e <fm_lcd_date_hour+0x122>
        }
        else if(event_id == EVENT_KEY_DOWN ||
 800f8f0:	7bbb      	ldrb	r3, [r7, #14]
 800f8f2:	2b03      	cmp	r3, #3
 800f8f4:	d010      	beq.n	800f918 <fm_lcd_date_hour+0x11c>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800f8f6:	4b39      	ldr	r3, [pc, #228]	; (800f9dc <fm_lcd_date_hour+0x1e0>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
        else if(event_id == EVENT_KEY_DOWN ||
 800f8fa:	2b03      	cmp	r3, #3
 800f8fc:	d102      	bne.n	800f904 <fm_lcd_date_hour+0x108>
        (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800f8fe:	7bbb      	ldrb	r3, [r7, #14]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d009      	beq.n	800f918 <fm_lcd_date_hour+0x11c>
 800f904:	7bbb      	ldrb	r3, [r7, #14]
 800f906:	2b02      	cmp	r3, #2
 800f908:	d006      	beq.n	800f918 <fm_lcd_date_hour+0x11c>
        event_id == EVENT_KEY_UP ||
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800f90a:	4b34      	ldr	r3, [pc, #208]	; (800f9dc <fm_lcd_date_hour+0x1e0>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
        event_id == EVENT_KEY_UP ||
 800f90e:	2b02      	cmp	r3, #2
 800f910:	d105      	bne.n	800f91e <fm_lcd_date_hour+0x122>
        (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800f912:	7bbb      	ldrb	r3, [r7, #14]
 800f914:	2b01      	cmp	r3, #1
 800f916:	d102      	bne.n	800f91e <fm_lcd_date_hour+0x122>
        {
            blink = 0;
 800f918:	4b31      	ldr	r3, [pc, #196]	; (800f9e0 <fm_lcd_date_hour+0x1e4>)
 800f91a:	2200      	movs	r2, #0
 800f91c:	601a      	str	r2, [r3, #0]
        }

        if(blink == 1)
 800f91e:	4b30      	ldr	r3, [pc, #192]	; (800f9e0 <fm_lcd_date_hour+0x1e4>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2b01      	cmp	r3, #1
 800f924:	d152      	bne.n	800f9cc <fm_lcd_date_hour+0x1d0>
        {
            if(field == DAY)
 800f926:	7b7b      	ldrb	r3, [r7, #13]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d108      	bne.n	800f93e <fm_lcd_date_hour+0x142>
            {
                lcd_clear_digit(DIGIT_1, HIGH_ROW);
 800f92c:	2100      	movs	r1, #0
 800f92e:	2001      	movs	r0, #1
 800f930:	f000 fcee 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_0, HIGH_ROW);
 800f934:	2100      	movs	r1, #0
 800f936:	2000      	movs	r0, #0
 800f938:	f000 fcea 	bl	8010310 <lcd_clear_digit>
 800f93c:	e042      	b.n	800f9c4 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MONTH)
 800f93e:	7b7b      	ldrb	r3, [r7, #13]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d108      	bne.n	800f956 <fm_lcd_date_hour+0x15a>
            {
                lcd_clear_digit(DIGIT_3, HIGH_ROW);
 800f944:	2100      	movs	r1, #0
 800f946:	2003      	movs	r0, #3
 800f948:	f000 fce2 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_2, HIGH_ROW);
 800f94c:	2100      	movs	r1, #0
 800f94e:	2002      	movs	r0, #2
 800f950:	f000 fcde 	bl	8010310 <lcd_clear_digit>
 800f954:	e036      	b.n	800f9c4 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == YEAR)
 800f956:	7b7b      	ldrb	r3, [r7, #13]
 800f958:	2b02      	cmp	r3, #2
 800f95a:	d110      	bne.n	800f97e <fm_lcd_date_hour+0x182>
            {
                lcd_clear_digit(DIGIT_7, HIGH_ROW);
 800f95c:	2100      	movs	r1, #0
 800f95e:	2007      	movs	r0, #7
 800f960:	f000 fcd6 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_6, HIGH_ROW);
 800f964:	2100      	movs	r1, #0
 800f966:	2006      	movs	r0, #6
 800f968:	f000 fcd2 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, HIGH_ROW);
 800f96c:	2100      	movs	r1, #0
 800f96e:	2005      	movs	r0, #5
 800f970:	f000 fcce 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_4, HIGH_ROW);
 800f974:	2100      	movs	r1, #0
 800f976:	2004      	movs	r0, #4
 800f978:	f000 fcca 	bl	8010310 <lcd_clear_digit>
 800f97c:	e022      	b.n	800f9c4 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == HOUR)
 800f97e:	7b7b      	ldrb	r3, [r7, #13]
 800f980:	2b03      	cmp	r3, #3
 800f982:	d108      	bne.n	800f996 <fm_lcd_date_hour+0x19a>
            {
                lcd_clear_digit(DIGIT_2, LOW_ROW);
 800f984:	2101      	movs	r1, #1
 800f986:	2002      	movs	r0, #2
 800f988:	f000 fcc2 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_1, LOW_ROW);
 800f98c:	2101      	movs	r1, #1
 800f98e:	2001      	movs	r0, #1
 800f990:	f000 fcbe 	bl	8010310 <lcd_clear_digit>
 800f994:	e016      	b.n	800f9c4 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == MINUTE)
 800f996:	7b7b      	ldrb	r3, [r7, #13]
 800f998:	2b04      	cmp	r3, #4
 800f99a:	d108      	bne.n	800f9ae <fm_lcd_date_hour+0x1b2>
            {
                lcd_clear_digit(DIGIT_4, LOW_ROW);
 800f99c:	2101      	movs	r1, #1
 800f99e:	2004      	movs	r0, #4
 800f9a0:	f000 fcb6 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_3, LOW_ROW);
 800f9a4:	2101      	movs	r1, #1
 800f9a6:	2003      	movs	r0, #3
 800f9a8:	f000 fcb2 	bl	8010310 <lcd_clear_digit>
 800f9ac:	e00a      	b.n	800f9c4 <fm_lcd_date_hour+0x1c8>
            }
            else if(field == SECOND)
 800f9ae:	7b7b      	ldrb	r3, [r7, #13]
 800f9b0:	2b05      	cmp	r3, #5
 800f9b2:	d107      	bne.n	800f9c4 <fm_lcd_date_hour+0x1c8>
            {
                lcd_clear_digit(DIGIT_6, LOW_ROW);
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	2006      	movs	r0, #6
 800f9b8:	f000 fcaa 	bl	8010310 <lcd_clear_digit>
                lcd_clear_digit(DIGIT_5, LOW_ROW);
 800f9bc:	2101      	movs	r1, #1
 800f9be:	2005      	movs	r0, #5
 800f9c0:	f000 fca6 	bl	8010310 <lcd_clear_digit>
            }

            blink = 0;
 800f9c4:	4b06      	ldr	r3, [pc, #24]	; (800f9e0 <fm_lcd_date_hour+0x1e4>)
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	601a      	str	r2, [r3, #0]
        else
        {
            blink = 1;
        }
    }
}
 800f9ca:	e002      	b.n	800f9d2 <fm_lcd_date_hour+0x1d6>
            blink = 1;
 800f9cc:	4b04      	ldr	r3, [pc, #16]	; (800f9e0 <fm_lcd_date_hour+0x1e4>)
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	601a      	str	r2, [r3, #0]
}
 800f9d2:	bf00      	nop
 800f9d4:	3738      	adds	r7, #56	; 0x38
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	20001db7 	.word	0x20001db7
 800f9e0:	2000011c 	.word	0x2000011c

0800f9e4 <fm_lcd_format_number_in_line>:
 * @param Enumeracion rows_t de lcd.h
 * @retval arreglo con la información formateada tipo char.
 */
void fm_lcd_format_number_in_line(rows_t line, uint32_t data, char *p_str,
int length)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60b9      	str	r1, [r7, #8]
 800f9ec:	607a      	str	r2, [r7, #4]
 800f9ee:	603b      	str	r3, [r7, #0]
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	73fb      	strb	r3, [r7, #15]
    if (line == HIGH_ROW)
 800f9f4:	7bfb      	ldrb	r3, [r7, #15]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d106      	bne.n	800fa08 <fm_lcd_format_number_in_line+0x24>
    {
        snprintf(p_str, length, "%8lu", data);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	4a09      	ldr	r2, [pc, #36]	; (800fa24 <fm_lcd_format_number_in_line+0x40>)
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f004 fe71 	bl	80146e8 <sniprintf>
    }
    else if (line == LOW_ROW)
    {
        snprintf(p_str, length, "%7lu", data);
    }
}
 800fa06:	e008      	b.n	800fa1a <fm_lcd_format_number_in_line+0x36>
    else if (line == LOW_ROW)
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d105      	bne.n	800fa1a <fm_lcd_format_number_in_line+0x36>
        snprintf(p_str, length, "%7lu", data);
 800fa0e:	6839      	ldr	r1, [r7, #0]
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	4a05      	ldr	r2, [pc, #20]	; (800fa28 <fm_lcd_format_number_in_line+0x44>)
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f004 fe67 	bl	80146e8 <sniprintf>
}
 800fa1a:	bf00      	nop
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	08015200 	.word	0x08015200
 800fa28:	08015208 	.word	0x08015208

0800fa2c <fm_lcd_fp_add_dot>:
 * @param str_size tamaño del string.
 * @retval int.
 *
 */
int fm_lcd_fp_add_dot(fmc_fp_t fp, char *p_str, int str_size)
{
 800fa2c:	b590      	push	{r4, r7, lr}
 800fa2e:	b087      	sub	sp, #28
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	f107 0408 	add.w	r4, r7, #8
 800fa36:	e884 0003 	stmia.w	r4, {r0, r1}
 800fa3a:	607a      	str	r2, [r7, #4]
 800fa3c:	603b      	str	r3, [r7, #0]
    int idx_now;

    /*
     * Si la resolución asignada por el usuario es 0, no hay nada que hacer.
     */
    if (fp.res == 0)
 800fa3e:	7b3b      	ldrb	r3, [r7, #12]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d101      	bne.n	800fa48 <fm_lcd_fp_add_dot+0x1c>
    {
        return (0);
 800fa44:	2300      	movs	r3, #0
 800fa46:	e031      	b.n	800faac <fm_lcd_fp_add_dot+0x80>
    }

    idx_now = strlen(p_str); //Como indice apunta a terminador nulo.
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7f0 fd3b 	bl	80004c4 <strlen>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	617b      	str	r3, [r7, #20]

    /*
     * Chequeo de contorno para ver si entra el punto o no.
     */

    if ((idx_now + 1 + 1) >= str_size)
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	3302      	adds	r3, #2
 800fa56:	683a      	ldr	r2, [r7, #0]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	dc02      	bgt.n	800fa62 <fm_lcd_fp_add_dot+0x36>
    {
        return (-1);
 800fa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa60:	e024      	b.n	800faac <fm_lcd_fp_add_dot+0x80>
    }

    idx_end = idx_now - fp.res; //Como índice apunta a donde debe ir el '.'
 800fa62:	7b3b      	ldrb	r3, [r7, #12]
 800fa64:	461a      	mov	r2, r3
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	1a9b      	subs	r3, r3, r2
 800fa6a:	613b      	str	r3, [r7, #16]

    /*
     * Desplazo posiciones en el arreglo hasta llegar a la posición donde debe
     * ir ubicado el '.'
     */
    while (idx_now != idx_end)
 800fa6c:	e00b      	b.n	800fa86 <fm_lcd_fp_add_dot+0x5a>
    {
        p_str[idx_now + 1] = p_str[idx_now];
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	441a      	add	r2, r3
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	3301      	adds	r3, #1
 800fa78:	6879      	ldr	r1, [r7, #4]
 800fa7a:	440b      	add	r3, r1
 800fa7c:	7812      	ldrb	r2, [r2, #0]
 800fa7e:	701a      	strb	r2, [r3, #0]
        idx_now--;
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	3b01      	subs	r3, #1
 800fa84:	617b      	str	r3, [r7, #20]
    while (idx_now != idx_end)
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d1ef      	bne.n	800fa6e <fm_lcd_fp_add_dot+0x42>
    }
    p_str[idx_now + 1] = p_str[idx_now];
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	441a      	add	r2, r3
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	3301      	adds	r3, #1
 800fa98:	6879      	ldr	r1, [r7, #4]
 800fa9a:	440b      	add	r3, r1
 800fa9c:	7812      	ldrb	r2, [r2, #0]
 800fa9e:	701a      	strb	r2, [r3, #0]
    p_str[idx_now] = '.';
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	4413      	add	r3, r2
 800faa6:	222e      	movs	r2, #46	; 0x2e
 800faa8:	701a      	strb	r2, [r3, #0]

    return (0);
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	371c      	adds	r7, #28
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd90      	pop	{r4, r7, pc}

0800fab4 <fm_lcd_fp_to_str>:
 * @param str_size tamaño del string.
 * @retval int.
 */
int fm_lcd_fp_to_str(fmc_fp_t fp, char leading_char, int str_width, char *p_str,
int str_size)
{
 800fab4:	b490      	push	{r4, r7}
 800fab6:	b088      	sub	sp, #32
 800fab8:	af00      	add	r7, sp, #0
 800faba:	f107 0408 	add.w	r4, r7, #8
 800fabe:	e884 0003 	stmia.w	r4, {r0, r1}
 800fac2:	603b      	str	r3, [r7, #0]
 800fac4:	4613      	mov	r3, r2
 800fac6:	71fb      	strb	r3, [r7, #7]
    int idx_1 = 0;
 800fac8:	2300      	movs	r3, #0
 800faca:	61fb      	str	r3, [r7, #28]
    /*
     * Este es el unico chequeo de contorno. Verifica que el tamaño del string
     * no sea menor a PCF8553_DATA_SIZE, calculado como suficiente para operar
     * con las líneas del lcd.
     */
    if (str_size < PCF8553_DATA_SIZE)
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	2b13      	cmp	r3, #19
 800fad0:	dc02      	bgt.n	800fad8 <fm_lcd_fp_to_str+0x24>
    {
        return (-1);
 800fad2:	f04f 33ff 	mov.w	r3, #4294967295
 800fad6:	e086      	b.n	800fbe6 <fm_lcd_fp_to_str+0x132>
    }

    /*
     * Esta linea es necesaria para representa bien a num = 0
     */
    p_str[idx_1] = fp.num % 10 + '0';
 800fad8:	68b9      	ldr	r1, [r7, #8]
 800fada:	4b45      	ldr	r3, [pc, #276]	; (800fbf0 <fm_lcd_fp_to_str+0x13c>)
 800fadc:	fba3 2301 	umull	r2, r3, r3, r1
 800fae0:	08da      	lsrs	r2, r3, #3
 800fae2:	4613      	mov	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	4413      	add	r3, r2
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	1aca      	subs	r2, r1, r3
 800faec:	b2d2      	uxtb	r2, r2
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faf2:	440b      	add	r3, r1
 800faf4:	3230      	adds	r2, #48	; 0x30
 800faf6:	b2d2      	uxtb	r2, r2
 800faf8:	701a      	strb	r2, [r3, #0]

    uint32_t num_aux = fp.num;
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	617b      	str	r3, [r7, #20]

    /*
     * Almaceno el número de atrás para adelante hasta que llegar al primer
     * dígito inclusive
     */
    while (fp.num / 10)
 800fafe:	e019      	b.n	800fb34 <fm_lcd_fp_to_str+0x80>
    {
        idx_1++;
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	3301      	adds	r3, #1
 800fb04:	61fb      	str	r3, [r7, #28]
        fp.num /= 10;
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	4a39      	ldr	r2, [pc, #228]	; (800fbf0 <fm_lcd_fp_to_str+0x13c>)
 800fb0a:	fba2 2303 	umull	r2, r3, r2, r3
 800fb0e:	08db      	lsrs	r3, r3, #3
 800fb10:	60bb      	str	r3, [r7, #8]
        p_str[idx_1] = fp.num % 10 + '0';
 800fb12:	68b9      	ldr	r1, [r7, #8]
 800fb14:	4b36      	ldr	r3, [pc, #216]	; (800fbf0 <fm_lcd_fp_to_str+0x13c>)
 800fb16:	fba3 2301 	umull	r2, r3, r3, r1
 800fb1a:	08da      	lsrs	r2, r3, #3
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4413      	add	r3, r2
 800fb22:	005b      	lsls	r3, r3, #1
 800fb24:	1aca      	subs	r2, r1, r3
 800fb26:	b2d2      	uxtb	r2, r2
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb2c:	440b      	add	r3, r1
 800fb2e:	3230      	adds	r2, #48	; 0x30
 800fb30:	b2d2      	uxtb	r2, r2
 800fb32:	701a      	strb	r2, [r3, #0]
    while (fp.num / 10)
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b09      	cmp	r3, #9
 800fb38:	d8e2      	bhi.n	800fb00 <fm_lcd_fp_to_str+0x4c>

    /*
     * Si se midió 0 pulsos, se rellena con 0 hasta pasar el punto y asi se
     * mantiene la resolución deseada.
     */
    if (num_aux == 0)
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d119      	bne.n	800fb74 <fm_lcd_fp_to_str+0xc0>
    {
        while (idx_1 < fp.res)
 800fb40:	e013      	b.n	800fb6a <fm_lcd_fp_to_str+0xb6>
        {
            idx_1++;
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	3301      	adds	r3, #1
 800fb46:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = fp.num % 10 + '0';
 800fb48:	68b9      	ldr	r1, [r7, #8]
 800fb4a:	4b29      	ldr	r3, [pc, #164]	; (800fbf0 <fm_lcd_fp_to_str+0x13c>)
 800fb4c:	fba3 2301 	umull	r2, r3, r3, r1
 800fb50:	08da      	lsrs	r2, r3, #3
 800fb52:	4613      	mov	r3, r2
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	4413      	add	r3, r2
 800fb58:	005b      	lsls	r3, r3, #1
 800fb5a:	1aca      	subs	r2, r1, r3
 800fb5c:	b2d2      	uxtb	r2, r2
 800fb5e:	69fb      	ldr	r3, [r7, #28]
 800fb60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb62:	440b      	add	r3, r1
 800fb64:	3230      	adds	r2, #48	; 0x30
 800fb66:	b2d2      	uxtb	r2, r2
 800fb68:	701a      	strb	r2, [r3, #0]
        while (idx_1 < fp.res)
 800fb6a:	7b3b      	ldrb	r3, [r7, #12]
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	4293      	cmp	r3, r2
 800fb72:	dbe6      	blt.n	800fb42 <fm_lcd_fp_to_str+0x8e>

    /*
     * Si el caracter a completar no es 0, se lo debe agregar al final del
     * arreglo hasta completar el largo de la linea (7 u 8 caracteres + \0).
     */
    if (leading_char)
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00d      	beq.n	800fb96 <fm_lcd_fp_to_str+0xe2>
    {
        while (idx_1 < str_width - 1)
 800fb7a:	e007      	b.n	800fb8c <fm_lcd_fp_to_str+0xd8>
        {
            idx_1++;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	61fb      	str	r3, [r7, #28]
            p_str[idx_1] = leading_char;
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb86:	4413      	add	r3, r2
 800fb88:	79fa      	ldrb	r2, [r7, #7]
 800fb8a:	701a      	strb	r2, [r3, #0]
        while (idx_1 < str_width - 1)
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	3b01      	subs	r3, #1
 800fb90:	69fa      	ldr	r2, [r7, #28]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	dbf2      	blt.n	800fb7c <fm_lcd_fp_to_str+0xc8>
        }
    }
    p_str[idx_1] = '\0';
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb9a:	4413      	add	r3, r2
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	701a      	strb	r2, [r3, #0]
    idx_1--;
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	3b01      	subs	r3, #1
 800fba4:	61fb      	str	r3, [r7, #28]

    /*
     *Esta sección da vuelta el arreglo ya que se completó al revés.
     */
    int idx_2 = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	61bb      	str	r3, [r7, #24]
    char ch_temp;

    while (idx_1 > idx_2)
 800fbaa:	e017      	b.n	800fbdc <fm_lcd_fp_to_str+0x128>
    {
        ch_temp = p_str[idx_1];
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbb0:	4413      	add	r3, r2
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	74fb      	strb	r3, [r7, #19]
        p_str[idx_1] = p_str[idx_2];
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbba:	441a      	add	r2, r3
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbc0:	440b      	add	r3, r1
 800fbc2:	7812      	ldrb	r2, [r2, #0]
 800fbc4:	701a      	strb	r2, [r3, #0]
        p_str[idx_2] = ch_temp;
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbca:	4413      	add	r3, r2
 800fbcc:	7cfa      	ldrb	r2, [r7, #19]
 800fbce:	701a      	strb	r2, [r3, #0]
        idx_1--;
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	61fb      	str	r3, [r7, #28]
        idx_2++;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	61bb      	str	r3, [r7, #24]
    while (idx_1 > idx_2)
 800fbdc:	69fa      	ldr	r2, [r7, #28]
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	dce3      	bgt.n	800fbac <fm_lcd_fp_to_str+0xf8>
    }

    return (0);
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3720      	adds	r7, #32
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bc90      	pop	{r4, r7}
 800fbee:	4770      	bx	lr
 800fbf0:	cccccccd 	.word	0xcccccccd

0800fbf4 <fm_lcd_init>:
 * @brief Es la primera instrucción a llamar para usar el lcd.
 * @param  None
 * @retval None
 */
void fm_lcd_init()
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	af00      	add	r7, sp, #0
    lcd_clear_all();
 800fbf8:	f000 fb62 	bl	80102c0 <lcd_clear_all>
    lcd_init();
 800fbfc:	f001 f9ae 	bl	8010f5c <lcd_init>
}
 800fc00:	bf00      	nop
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <fm_lcd_k_factor>:
 * configuración del factor de calibración K.
 * @param  None
 * @retval None
 */
void fm_lcd_k_factor(fm_event_t event_id, sel_digit_t digit_modify)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08e      	sub	sp, #56	; 0x38
 800fc08:	af02      	add	r7, sp, #8
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	460a      	mov	r2, r1
 800fc0e:	71fb      	strb	r3, [r7, #7]
 800fc10:	4613      	mov	r3, r2
 800fc12:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(K_FACTOR), '0',
 800fc14:	f107 0320 	add.w	r3, r7, #32
 800fc18:	2100      	movs	r1, #0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe fff0 	bl	800ec00 <fm_factory_get_k_factor>
 800fc20:	2314      	movs	r3, #20
 800fc22:	9301      	str	r3, [sp, #4]
 800fc24:	f107 030c 	add.w	r3, r7, #12
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	2309      	movs	r3, #9
 800fc2c:	2230      	movs	r2, #48	; 0x30
 800fc2e:	f107 0120 	add.w	r1, r7, #32
 800fc32:	c903      	ldmia	r1, {r0, r1}
 800fc34:	f7ff ff3e 	bl	800fab4 <fm_lcd_fp_to_str>
    LINE_0_DIGITS, lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(K_FACTOR), lcd_msg,
 800fc38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc3c:	2100      	movs	r1, #0
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7fe ffde 	bl	800ec00 <fm_factory_get_k_factor>
 800fc44:	f107 020c 	add.w	r2, r7, #12
 800fc48:	2314      	movs	r3, #20
 800fc4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fc4e:	c903      	ldmia	r1, {r0, r1}
 800fc50:	f7ff feec 	bl	800fa2c <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fc54:	f107 030c 	add.w	r3, r7, #12
 800fc58:	2100      	movs	r1, #0
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f000 f918 	bl	800fe90 <fm_lcd_puts>

    if(event_id == EVENT_KEY_ENTER ||
 800fc60:	79fb      	ldrb	r3, [r7, #7]
 800fc62:	2b04      	cmp	r3, #4
 800fc64:	d006      	beq.n	800fc74 <fm_lcd_k_factor+0x70>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fc66:	4b1e      	ldr	r3, [pc, #120]	; (800fce0 <fm_lcd_k_factor+0xdc>)
 800fc68:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800fc6a:	2b04      	cmp	r3, #4
 800fc6c:	d106      	bne.n	800fc7c <fm_lcd_k_factor+0x78>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d103      	bne.n	800fc7c <fm_lcd_k_factor+0x78>
    {
        blink = 1;
 800fc74:	4b1b      	ldr	r3, [pc, #108]	; (800fce4 <fm_lcd_k_factor+0xe0>)
 800fc76:	2201      	movs	r2, #1
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	e016      	b.n	800fcaa <fm_lcd_k_factor+0xa6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 800fc7c:	79fb      	ldrb	r3, [r7, #7]
 800fc7e:	2b03      	cmp	r3, #3
 800fc80:	d010      	beq.n	800fca4 <fm_lcd_k_factor+0xa0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fc82:	4b17      	ldr	r3, [pc, #92]	; (800fce0 <fm_lcd_k_factor+0xdc>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 800fc86:	2b03      	cmp	r3, #3
 800fc88:	d102      	bne.n	800fc90 <fm_lcd_k_factor+0x8c>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d009      	beq.n	800fca4 <fm_lcd_k_factor+0xa0>
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	2b02      	cmp	r3, #2
 800fc94:	d006      	beq.n	800fca4 <fm_lcd_k_factor+0xa0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fc96:	4b12      	ldr	r3, [pc, #72]	; (800fce0 <fm_lcd_k_factor+0xdc>)
 800fc98:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 800fc9a:	2b02      	cmp	r3, #2
 800fc9c:	d105      	bne.n	800fcaa <fm_lcd_k_factor+0xa6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d102      	bne.n	800fcaa <fm_lcd_k_factor+0xa6>
    {
        blink = 0;
 800fca4:	4b0f      	ldr	r3, [pc, #60]	; (800fce4 <fm_lcd_k_factor+0xe0>)
 800fca6:	2200      	movs	r2, #0
 800fca8:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 800fcaa:	4b0e      	ldr	r3, [pc, #56]	; (800fce4 <fm_lcd_k_factor+0xe0>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d10b      	bne.n	800fcca <fm_lcd_k_factor+0xc6>
    {
        lcd_clear_digit(DIG_7 - digit_modify, HIGH_ROW);
 800fcb2:	79bb      	ldrb	r3, [r7, #6]
 800fcb4:	f1c3 0307 	rsb	r3, r3, #7
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	2100      	movs	r1, #0
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 fb27 	bl	8010310 <lcd_clear_digit>
        blink = 0;
 800fcc2:	4b08      	ldr	r3, [pc, #32]	; (800fce4 <fm_lcd_k_factor+0xe0>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	601a      	str	r2, [r3, #0]
 800fcc8:	e002      	b.n	800fcd0 <fm_lcd_k_factor+0xcc>
    }
    else
    {
        blink = 1;
 800fcca:	4b06      	ldr	r3, [pc, #24]	; (800fce4 <fm_lcd_k_factor+0xe0>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(K, 0x00);
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	200b      	movs	r0, #11
 800fcd4:	f001 fbf8 	bl	80114c8 <lcd_set_symbol>
}
 800fcd8:	bf00      	nop
 800fcda:	3730      	adds	r7, #48	; 0x30
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	20001db7 	.word	0x20001db7
 800fce4:	2000011c 	.word	0x2000011c

0800fce8 <fm_lcd_k_lin>:

void fm_lcd_k_lin(sel_k k_sel, fm_event_t event_id, sel_digit_k_lin_t digit_lin_modify)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b090      	sub	sp, #64	; 0x40
 800fcec:	af02      	add	r7, sp, #8
 800fcee:	4603      	mov	r3, r0
 800fcf0:	71fb      	strb	r3, [r7, #7]
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	71bb      	strb	r3, [r7, #6]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	717b      	strb	r3, [r7, #5]
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fm_factory_get_k_factor(k_sel), '0', LINE_0_DIGITS,
 800fcfa:	f107 0320 	add.w	r3, r7, #32
 800fcfe:	79fa      	ldrb	r2, [r7, #7]
 800fd00:	4611      	mov	r1, r2
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe ff7c 	bl	800ec00 <fm_factory_get_k_factor>
 800fd08:	2314      	movs	r3, #20
 800fd0a:	9301      	str	r3, [sp, #4]
 800fd0c:	f107 030c 	add.w	r3, r7, #12
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	2309      	movs	r3, #9
 800fd14:	2230      	movs	r2, #48	; 0x30
 800fd16:	f107 0120 	add.w	r1, r7, #32
 800fd1a:	c903      	ldmia	r1, {r0, r1}
 800fd1c:	f7ff feca 	bl	800fab4 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_k_factor(k_sel), lcd_msg,
 800fd20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd24:	79fa      	ldrb	r2, [r7, #7]
 800fd26:	4611      	mov	r1, r2
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe ff69 	bl	800ec00 <fm_factory_get_k_factor>
 800fd2e:	f107 020c 	add.w	r2, r7, #12
 800fd32:	2314      	movs	r3, #20
 800fd34:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fd38:	c903      	ldmia	r1, {r0, r1}
 800fd3a:	f7ff fe77 	bl	800fa2c <fm_lcd_fp_add_dot>
    sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800fd3e:	f107 030c 	add.w	r3, r7, #12
 800fd42:	2100      	movs	r1, #0
 800fd44:	4618      	mov	r0, r3
 800fd46:	f000 f8a3 	bl	800fe90 <fm_lcd_puts>

    fm_lcd_fp_to_str(fm_factory_get_frec_lin(k_sel), '0', LINE_1_DIGITS,
 800fd4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd4e:	79fa      	ldrb	r2, [r7, #7]
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe ffb0 	bl	800ecb8 <fm_factory_get_frec_lin>
 800fd58:	2314      	movs	r3, #20
 800fd5a:	9301      	str	r3, [sp, #4]
 800fd5c:	f107 030c 	add.w	r3, r7, #12
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	2308      	movs	r3, #8
 800fd64:	2230      	movs	r2, #48	; 0x30
 800fd66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fd6a:	c903      	ldmia	r1, {r0, r1}
 800fd6c:	f7ff fea2 	bl	800fab4 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800fd70:	f107 030c 	add.w	r3, r7, #12
 800fd74:	2101      	movs	r1, #1
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 f88a 	bl	800fe90 <fm_lcd_puts>
    lcd_clear_digit(DIGIT_0, LOW_ROW);
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	2000      	movs	r0, #0
 800fd80:	f000 fac6 	bl	8010310 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_1, LOW_ROW);
 800fd84:	2101      	movs	r1, #1
 800fd86:	2001      	movs	r0, #1
 800fd88:	f000 fac2 	bl	8010310 <lcd_clear_digit>
    lcd_clear_digit(DIGIT_2, LOW_ROW);
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	2002      	movs	r0, #2
 800fd90:	f000 fabe 	bl	8010310 <lcd_clear_digit>

    if(event_id == EVENT_KEY_ENTER ||
 800fd94:	79bb      	ldrb	r3, [r7, #6]
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	d006      	beq.n	800fda8 <fm_lcd_k_lin+0xc0>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fd9a:	4b3b      	ldr	r3, [pc, #236]	; (800fe88 <fm_lcd_k_lin+0x1a0>)
 800fd9c:	781b      	ldrb	r3, [r3, #0]
    if(event_id == EVENT_KEY_ENTER ||
 800fd9e:	2b04      	cmp	r3, #4
 800fda0:	d106      	bne.n	800fdb0 <fm_lcd_k_lin+0xc8>
    (previous_event == EVENT_KEY_ENTER && event_id == EVENT_LCD_REFRESH))
 800fda2:	79bb      	ldrb	r3, [r7, #6]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d103      	bne.n	800fdb0 <fm_lcd_k_lin+0xc8>
    {
        blink = 1;
 800fda8:	4b38      	ldr	r3, [pc, #224]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fdaa:	2201      	movs	r2, #1
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	e016      	b.n	800fdde <fm_lcd_k_lin+0xf6>
    }
    else if(event_id == EVENT_KEY_DOWN ||
 800fdb0:	79bb      	ldrb	r3, [r7, #6]
 800fdb2:	2b03      	cmp	r3, #3
 800fdb4:	d010      	beq.n	800fdd8 <fm_lcd_k_lin+0xf0>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fdb6:	4b34      	ldr	r3, [pc, #208]	; (800fe88 <fm_lcd_k_lin+0x1a0>)
 800fdb8:	781b      	ldrb	r3, [r3, #0]
    else if(event_id == EVENT_KEY_DOWN ||
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d102      	bne.n	800fdc4 <fm_lcd_k_lin+0xdc>
    (previous_event == EVENT_KEY_DOWN && event_id == EVENT_LCD_REFRESH) ||
 800fdbe:	79bb      	ldrb	r3, [r7, #6]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d009      	beq.n	800fdd8 <fm_lcd_k_lin+0xf0>
 800fdc4:	79bb      	ldrb	r3, [r7, #6]
 800fdc6:	2b02      	cmp	r3, #2
 800fdc8:	d006      	beq.n	800fdd8 <fm_lcd_k_lin+0xf0>
    event_id == EVENT_KEY_UP ||
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fdca:	4b2f      	ldr	r3, [pc, #188]	; (800fe88 <fm_lcd_k_lin+0x1a0>)
 800fdcc:	781b      	ldrb	r3, [r3, #0]
    event_id == EVENT_KEY_UP ||
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d105      	bne.n	800fdde <fm_lcd_k_lin+0xf6>
    (previous_event == EVENT_KEY_UP && event_id == EVENT_LCD_REFRESH))
 800fdd2:	79bb      	ldrb	r3, [r7, #6]
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d102      	bne.n	800fdde <fm_lcd_k_lin+0xf6>
    {
        blink = 0;
 800fdd8:	4b2c      	ldr	r3, [pc, #176]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	601a      	str	r2, [r3, #0]
    }

    if(digit_lin_modify <= DIG_LIN_7)
 800fdde:	797b      	ldrb	r3, [r7, #5]
 800fde0:	2b07      	cmp	r3, #7
 800fde2:	d813      	bhi.n	800fe0c <fm_lcd_k_lin+0x124>
    {
        if(blink == 1)
 800fde4:	4b29      	ldr	r3, [pc, #164]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d10b      	bne.n	800fe04 <fm_lcd_k_lin+0x11c>
        {
            lcd_clear_digit(DIG_LIN_7 - digit_lin_modify, HIGH_ROW);
 800fdec:	797b      	ldrb	r3, [r7, #5]
 800fdee:	f1c3 0307 	rsb	r3, r3, #7
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f000 fa8a 	bl	8010310 <lcd_clear_digit>
            blink = 0;
 800fdfc:	4b23      	ldr	r3, [pc, #140]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	e016      	b.n	800fe32 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 800fe04:	4b21      	ldr	r3, [pc, #132]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fe06:	2201      	movs	r2, #1
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	e012      	b.n	800fe32 <fm_lcd_k_lin+0x14a>
        }
    }
    else
    {
        if(blink == 1)
 800fe0c:	4b1f      	ldr	r3, [pc, #124]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d10b      	bne.n	800fe2c <fm_lcd_k_lin+0x144>
        {
            lcd_clear_digit(DIG_LIN_6 - digit_lin_modify + DIG_LIN_8, LOW_ROW);
 800fe14:	797b      	ldrb	r3, [r7, #5]
 800fe16:	f1c3 030e 	rsb	r3, r3, #14
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	2101      	movs	r1, #1
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f000 fa76 	bl	8010310 <lcd_clear_digit>
            blink = 0;
 800fe24:	4b19      	ldr	r3, [pc, #100]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	e002      	b.n	800fe32 <fm_lcd_k_lin+0x14a>
        }
        else
        {
            blink = 1;
 800fe2c:	4b17      	ldr	r3, [pc, #92]	; (800fe8c <fm_lcd_k_lin+0x1a4>)
 800fe2e:	2201      	movs	r2, #1
 800fe30:	601a      	str	r2, [r3, #0]
        }
    }

    lcd_set_symbol(F, 0x00);
 800fe32:	2100      	movs	r1, #0
 800fe34:	2010      	movs	r0, #16
 800fe36:	f001 fb47 	bl	80114c8 <lcd_set_symbol>
    if(k_sel == K_LIN_1)
 800fe3a:	79fb      	ldrb	r3, [r7, #7]
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d103      	bne.n	800fe48 <fm_lcd_k_lin+0x160>
    {
        lcd_set_symbol(LIN_1, 0x00);
 800fe40:	2100      	movs	r1, #0
 800fe42:	2011      	movs	r0, #17
 800fe44:	f001 fb40 	bl	80114c8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_2)
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d103      	bne.n	800fe56 <fm_lcd_k_lin+0x16e>
    {
        lcd_set_symbol(LIN_2, 0x00);
 800fe4e:	2100      	movs	r1, #0
 800fe50:	2012      	movs	r0, #18
 800fe52:	f001 fb39 	bl	80114c8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_3)
 800fe56:	79fb      	ldrb	r3, [r7, #7]
 800fe58:	2b03      	cmp	r3, #3
 800fe5a:	d103      	bne.n	800fe64 <fm_lcd_k_lin+0x17c>
    {
        lcd_set_symbol(LIN_3, 0x00);
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	2013      	movs	r0, #19
 800fe60:	f001 fb32 	bl	80114c8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_4)
 800fe64:	79fb      	ldrb	r3, [r7, #7]
 800fe66:	2b04      	cmp	r3, #4
 800fe68:	d103      	bne.n	800fe72 <fm_lcd_k_lin+0x18a>
    {
        lcd_set_symbol(LIN_4, 0x00);
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	2014      	movs	r0, #20
 800fe6e:	f001 fb2b 	bl	80114c8 <lcd_set_symbol>
    }
    if(k_sel == K_LIN_5)
 800fe72:	79fb      	ldrb	r3, [r7, #7]
 800fe74:	2b05      	cmp	r3, #5
 800fe76:	d103      	bne.n	800fe80 <fm_lcd_k_lin+0x198>
    {
        lcd_set_symbol(LIN_5, 0x00);
 800fe78:	2100      	movs	r1, #0
 800fe7a:	2015      	movs	r0, #21
 800fe7c:	f001 fb24 	bl	80114c8 <lcd_set_symbol>
    }
}
 800fe80:	bf00      	nop
 800fe82:	3738      	adds	r7, #56	; 0x38
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	20001db7 	.word	0x20001db7
 800fe8c:	2000011c 	.word	0x2000011c

0800fe90 <fm_lcd_puts>:
 * @param Arreglo a imprimir.
 * @param Fila donde se coloca el arreglo a imprimir.
 * @retval None
 */
void fm_lcd_puts(const char *c, const rows_t row)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	70fb      	strb	r3, [r7, #3]
    uint8_t col = 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	73fb      	strb	r3, [r7, #15]
    uint8_t col_limit;

    if (row == 0)
 800fea0:	78fb      	ldrb	r3, [r7, #3]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d102      	bne.n	800feac <fm_lcd_puts+0x1c>
    {
        col_limit = LINE_0_DIGITS - 1;
 800fea6:	2308      	movs	r3, #8
 800fea8:	73bb      	strb	r3, [r7, #14]
 800feaa:	e026      	b.n	800fefa <fm_lcd_puts+0x6a>
    }
    else
    {
        col_limit = LINE_1_DIGITS - 1;
 800feac:	2307      	movs	r3, #7
 800feae:	73bb      	strb	r3, [r7, #14]
    }

    while ((*c) && (col < col_limit))
 800feb0:	e023      	b.n	800fefa <fm_lcd_puts+0x6a>
    {
        if (((*c >= '0') && (*c <= '9')) || (*c == ' ') || (*c == '.'))
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	2b2f      	cmp	r3, #47	; 0x2f
 800feb8:	d903      	bls.n	800fec2 <fm_lcd_puts+0x32>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	2b39      	cmp	r3, #57	; 0x39
 800fec0:	d907      	bls.n	800fed2 <fm_lcd_puts+0x42>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2b20      	cmp	r3, #32
 800fec8:	d003      	beq.n	800fed2 <fm_lcd_puts+0x42>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	2b2e      	cmp	r3, #46	; 0x2e
 800fed0:	d106      	bne.n	800fee0 <fm_lcd_puts+0x50>
        {
            lcd_put_char(*c, col, row);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	78fa      	ldrb	r2, [r7, #3]
 800fed8:	7bf9      	ldrb	r1, [r7, #15]
 800feda:	4618      	mov	r0, r3
 800fedc:	f001 f844 	bl	8010f68 <lcd_put_char>
        }
        col++;
 800fee0:	7bfb      	ldrb	r3, [r7, #15]
 800fee2:	3301      	adds	r3, #1
 800fee4:	73fb      	strb	r3, [r7, #15]
        c++;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	3301      	adds	r3, #1
 800feea:	607b      	str	r3, [r7, #4]
        if (*c == '.')
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	2b2e      	cmp	r3, #46	; 0x2e
 800fef2:	d102      	bne.n	800fefa <fm_lcd_puts+0x6a>
        {
            col--;
 800fef4:	7bfb      	ldrb	r3, [r7, #15]
 800fef6:	3b01      	subs	r3, #1
 800fef8:	73fb      	strb	r3, [r7, #15]
    while ((*c) && (col < col_limit))
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d003      	beq.n	800ff0a <fm_lcd_puts+0x7a>
 800ff02:	7bfa      	ldrb	r2, [r7, #15]
 800ff04:	7bbb      	ldrb	r3, [r7, #14]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d3d3      	bcc.n	800feb2 <fm_lcd_puts+0x22>
        }
    }
}
 800ff0a:	bf00      	nop
 800ff0c:	3710      	adds	r7, #16
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <fm_lcd_refresh>:
 * la librería de mas bajo nivel 'lcd.h'.
 * @param  None
 * @retval None
 */
void fm_lcd_refresh()
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	af00      	add	r7, sp, #0
    lcd_refresh();
 800ff16:	f001 fa25 	bl	8011364 <lcd_refresh>
}
 800ff1a:	bf00      	nop
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <fm_lcd_ttl_rate>:
 * personalizada según las opciones que se elijan.
 * @param None
 * @retval None
 */
void fm_lcd_ttl_rate()
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b0b8      	sub	sp, #224	; 0xe0
 800ff22:	af02      	add	r7, sp, #8
    char lcd_msg[PCF8553_DATA_SIZE];

    fm_lcd_fp_to_str(fmc_get_ttl().volume, ' ', LINE_0_DIGITS, lcd_msg,
 800ff24:	f107 0318 	add.w	r3, r7, #24
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f004 fb09 	bl	8014540 <fmc_get_ttl>
 800ff2e:	2314      	movs	r3, #20
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	1d3b      	adds	r3, r7, #4
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	2309      	movs	r3, #9
 800ff38:	2220      	movs	r2, #32
 800ff3a:	f107 0120 	add.w	r1, r7, #32
 800ff3e:	c903      	ldmia	r1, {r0, r1}
 800ff40:	f7ff fdb8 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_ttl().volume, lcd_msg, sizeof(lcd_msg));
 800ff44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f004 faf9 	bl	8014540 <fmc_get_ttl>
 800ff4e:	1d3a      	adds	r2, r7, #4
 800ff50:	2314      	movs	r3, #20
 800ff52:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ff56:	c903      	ldmia	r1, {r0, r1}
 800ff58:	f7ff fd68 	bl	800fa2c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 800ff5c:	1d3b      	adds	r3, r7, #4
 800ff5e:	2100      	movs	r1, #0
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff ff95 	bl	800fe90 <fm_lcd_puts>

    fm_lcd_fp_to_str(fmc_get_rate().volume, ' ', LINE_1_DIGITS, lcd_msg,
 800ff66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f004 faa8 	bl	80144c0 <fmc_get_rate>
 800ff70:	2314      	movs	r3, #20
 800ff72:	9301      	str	r3, [sp, #4]
 800ff74:	1d3b      	adds	r3, r7, #4
 800ff76:	9300      	str	r3, [sp, #0]
 800ff78:	2308      	movs	r3, #8
 800ff7a:	2220      	movs	r2, #32
 800ff7c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ff80:	c903      	ldmia	r1, {r0, r1}
 800ff82:	f7ff fd97 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fmc_get_rate().volume, lcd_msg, sizeof(lcd_msg));
 800ff86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f004 fa98 	bl	80144c0 <fmc_get_rate>
 800ff90:	1d3a      	adds	r2, r7, #4
 800ff92:	2314      	movs	r3, #20
 800ff94:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ff98:	c903      	ldmia	r1, {r0, r1}
 800ff9a:	f7ff fd47 	bl	800fa2c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 800ff9e:	1d3b      	adds	r3, r7, #4
 800ffa0:	2101      	movs	r1, #1
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff ff74 	bl	800fe90 <fm_lcd_puts>

    lcd_set_symbol(TTL, 0x0);
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	2005      	movs	r0, #5
 800ffac:	f001 fa8c 	bl	80114c8 <lcd_set_symbol>
    lcd_set_symbol(RATE, 0x0);
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	2002      	movs	r0, #2
 800ffb4:	f001 fa88 	bl	80114c8 <lcd_set_symbol>

    lcd_set_vol_unit(fmc_get_ttl().unit_volume, 0x0);
 800ffb8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f004 fabf 	bl	8014540 <fmc_get_ttl>
 800ffc2:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f001 fe01 	bl	8011bd0 <lcd_set_vol_unit>
    lcd_set_symbol(BACKSLASH, 0x0);
 800ffce:	2100      	movs	r1, #0
 800ffd0:	2007      	movs	r0, #7
 800ffd2:	f001 fa79 	bl	80114c8 <lcd_set_symbol>
    lcd_set_time_unit(fmc_get_ttl().unit_time, 0x0);
 800ffd6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f004 fab0 	bl	8014540 <fmc_get_ttl>
 800ffe0:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f001 fdb0 	bl	8011b4c <lcd_set_time_unit>
}
 800ffec:	bf00      	nop
 800ffee:	37d8      	adds	r7, #216	; 0xd8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <fm_lcd_units_tim>:
 * configuración de unidades tiempo y la resolución del factor RATE.
 * @param  None
 * @retval None
 */
void fm_lcd_units_tim(fm_event_t event_id)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b0a6      	sub	sp, #152	; 0x98
 800fff8:	af02      	add	r7, sp, #8
 800fffa:	4603      	mov	r3, r0
 800fffc:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_tim(), '0', LINE_1_DIGITS, lcd_msg,
 800fffe:	f107 0320 	add.w	r3, r7, #32
 8010002:	4618      	mov	r0, r3
 8010004:	f7fe fdd8 	bl	800ebb8 <fm_factory_get_units_tim>
 8010008:	2314      	movs	r3, #20
 801000a:	9301      	str	r3, [sp, #4]
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	2308      	movs	r3, #8
 8010014:	2230      	movs	r2, #48	; 0x30
 8010016:	f107 0120 	add.w	r1, r7, #32
 801001a:	c903      	ldmia	r1, {r0, r1}
 801001c:	f7ff fd4a 	bl	800fab4 <fm_lcd_fp_to_str>
    sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_tim(), lcd_msg, sizeof(lcd_msg));
 8010020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010024:	4618      	mov	r0, r3
 8010026:	f7fe fdc7 	bl	800ebb8 <fm_factory_get_units_tim>
 801002a:	f107 020c 	add.w	r2, r7, #12
 801002e:	2314      	movs	r3, #20
 8010030:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010034:	c903      	ldmia	r1, {r0, r1}
 8010036:	f7ff fcf9 	bl	800fa2c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801003a:	f107 030c 	add.w	r3, r7, #12
 801003e:	2101      	movs	r1, #1
 8010040:	4618      	mov	r0, r3
 8010042:	f7ff ff25 	bl	800fe90 <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 8010046:	79fb      	ldrb	r3, [r7, #7]
 8010048:	2b01      	cmp	r3, #1
 801004a:	d106      	bne.n	801005a <fm_lcd_units_tim+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 801004c:	4b35      	ldr	r3, [pc, #212]	; (8010124 <fm_lcd_units_tim+0x130>)
 801004e:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 8010050:	2b01      	cmp	r3, #1
 8010052:	d005      	beq.n	8010060 <fm_lcd_units_tim+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	2b01      	cmp	r3, #1
 8010058:	d102      	bne.n	8010060 <fm_lcd_units_tim+0x6c>
    {
        blink = 0;
 801005a:	4b33      	ldr	r3, [pc, #204]	; (8010128 <fm_lcd_units_tim+0x134>)
 801005c:	2200      	movs	r2, #0
 801005e:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 8010060:	4b31      	ldr	r3, [pc, #196]	; (8010128 <fm_lcd_units_tim+0x134>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d146      	bne.n	80100f6 <fm_lcd_units_tim+0x102>
    {
        if(fm_factory_get_units_tim().res == 1)
 8010068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801006c:	4618      	mov	r0, r3
 801006e:	f7fe fda3 	bl	800ebb8 <fm_factory_get_units_tim>
 8010072:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010076:	2b01      	cmp	r3, #1
 8010078:	d109      	bne.n	801008e <fm_lcd_units_tim+0x9a>
        {
            resolution_modify = PNT_5;
 801007a:	2305      	movs	r3, #5
 801007c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 8010080:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010084:	4619      	mov	r1, r3
 8010086:	2001      	movs	r0, #1
 8010088:	f000 fc80 	bl	801098c <lcd_clear_point>
 801008c:	e024      	b.n	80100d8 <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 2)
 801008e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe fd90 	bl	800ebb8 <fm_factory_get_units_tim>
 8010098:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801009c:	2b02      	cmp	r3, #2
 801009e:	d109      	bne.n	80100b4 <fm_lcd_units_tim+0xc0>
        {
            resolution_modify = PNT_4;
 80100a0:	2304      	movs	r3, #4
 80100a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80100a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80100aa:	4619      	mov	r1, r3
 80100ac:	2001      	movs	r0, #1
 80100ae:	f000 fc6d 	bl	801098c <lcd_clear_point>
 80100b2:	e011      	b.n	80100d8 <fm_lcd_units_tim+0xe4>
        }
        else if(fm_factory_get_units_tim().res == 3)
 80100b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fe fd7d 	bl	800ebb8 <fm_factory_get_units_tim>
 80100be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80100c2:	2b03      	cmp	r3, #3
 80100c4:	d108      	bne.n	80100d8 <fm_lcd_units_tim+0xe4>
        {
            resolution_modify = PNT_3;
 80100c6:	2303      	movs	r3, #3
 80100c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(LOW_ROW, resolution_modify);
 80100cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80100d0:	4619      	mov	r1, r3
 80100d2:	2001      	movs	r0, #1
 80100d4:	f000 fc5a 	bl	801098c <lcd_clear_point>
        }

        lcd_clear_time_unit(fmc_get_rate().unit_time, 0x0);
 80100d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80100dc:	4618      	mov	r0, r3
 80100de:	f004 f9ef 	bl	80144c0 <fmc_get_rate>
 80100e2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80100e6:	2100      	movs	r1, #0
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 fcfb 	bl	8010ae4 <lcd_clear_time_unit>

        blink = 0;
 80100ee:	4b0e      	ldr	r3, [pc, #56]	; (8010128 <fm_lcd_units_tim+0x134>)
 80100f0:	2200      	movs	r2, #0
 80100f2:	601a      	str	r2, [r3, #0]
 80100f4:	e00d      	b.n	8010112 <fm_lcd_units_tim+0x11e>
    }
    else
    {
        lcd_set_time_unit(fmc_get_rate().unit_time, 0x0);
 80100f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80100fa:	4618      	mov	r0, r3
 80100fc:	f004 f9e0 	bl	80144c0 <fmc_get_rate>
 8010100:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8010104:	2100      	movs	r1, #0
 8010106:	4618      	mov	r0, r3
 8010108:	f001 fd20 	bl	8011b4c <lcd_set_time_unit>
        blink = 1;
 801010c:	4b06      	ldr	r3, [pc, #24]	; (8010128 <fm_lcd_units_tim+0x134>)
 801010e:	2201      	movs	r2, #1
 8010110:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(RATE, 0x00);
 8010112:	2100      	movs	r1, #0
 8010114:	2002      	movs	r0, #2
 8010116:	f001 f9d7 	bl	80114c8 <lcd_set_symbol>
}
 801011a:	bf00      	nop
 801011c:	3790      	adds	r7, #144	; 0x90
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	20001db7 	.word	0x20001db7
 8010128:	2000011c 	.word	0x2000011c

0801012c <fm_lcd_units_vol>:
 * TTL.
 * @param  None
 * @retval None
 */
void fm_lcd_units_vol(fm_event_t event_id)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b0a6      	sub	sp, #152	; 0x98
 8010130:	af02      	add	r7, sp, #8
 8010132:	4603      	mov	r3, r0
 8010134:	71fb      	strb	r3, [r7, #7]
    char lcd_msg[PCF8553_DATA_SIZE];
    point_t resolution_modify;

    fm_lcd_fp_to_str(fm_factory_get_units_vol(), '0', LINE_0_DIGITS,
 8010136:	f107 0320 	add.w	r3, r7, #32
 801013a:	4618      	mov	r0, r3
 801013c:	f7fe fd4e 	bl	800ebdc <fm_factory_get_units_vol>
 8010140:	2314      	movs	r3, #20
 8010142:	9301      	str	r3, [sp, #4]
 8010144:	f107 030c 	add.w	r3, r7, #12
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	2309      	movs	r3, #9
 801014c:	2230      	movs	r2, #48	; 0x30
 801014e:	f107 0120 	add.w	r1, r7, #32
 8010152:	c903      	ldmia	r1, {r0, r1}
 8010154:	f7ff fcae 	bl	800fab4 <fm_lcd_fp_to_str>
    lcd_msg, sizeof(lcd_msg));
    fm_lcd_fp_add_dot(fm_factory_get_units_vol(), lcd_msg, sizeof(lcd_msg));
 8010158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801015c:	4618      	mov	r0, r3
 801015e:	f7fe fd3d 	bl	800ebdc <fm_factory_get_units_vol>
 8010162:	f107 020c 	add.w	r2, r7, #12
 8010166:	2314      	movs	r3, #20
 8010168:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801016c:	c903      	ldmia	r1, {r0, r1}
 801016e:	f7ff fc5d 	bl	800fa2c <fm_lcd_fp_add_dot>
    fm_lcd_puts(lcd_msg, HIGH_ROW);
 8010172:	f107 030c 	add.w	r3, r7, #12
 8010176:	2100      	movs	r1, #0
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fe89 	bl	800fe90 <fm_lcd_puts>

    if(event_id != EVENT_LCD_REFRESH ||
 801017e:	79fb      	ldrb	r3, [r7, #7]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d106      	bne.n	8010192 <fm_lcd_units_vol+0x66>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 8010184:	4b37      	ldr	r3, [pc, #220]	; (8010264 <fm_lcd_units_vol+0x138>)
 8010186:	781b      	ldrb	r3, [r3, #0]
    if(event_id != EVENT_LCD_REFRESH ||
 8010188:	2b01      	cmp	r3, #1
 801018a:	d005      	beq.n	8010198 <fm_lcd_units_vol+0x6c>
    (previous_event != EVENT_LCD_REFRESH && event_id == EVENT_LCD_REFRESH))
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	2b01      	cmp	r3, #1
 8010190:	d102      	bne.n	8010198 <fm_lcd_units_vol+0x6c>
    {
        blink = 0;
 8010192:	4b35      	ldr	r3, [pc, #212]	; (8010268 <fm_lcd_units_vol+0x13c>)
 8010194:	2200      	movs	r2, #0
 8010196:	601a      	str	r2, [r3, #0]
    }

    if(blink == 1)
 8010198:	4b33      	ldr	r3, [pc, #204]	; (8010268 <fm_lcd_units_vol+0x13c>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d146      	bne.n	801022e <fm_lcd_units_vol+0x102>
    {
        if(fm_factory_get_units_vol().res == 1)
 80101a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fe fd19 	bl	800ebdc <fm_factory_get_units_vol>
 80101aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d109      	bne.n	80101c6 <fm_lcd_units_vol+0x9a>
        {
            resolution_modify = PNT_6;
 80101b2:	2306      	movs	r3, #6
 80101b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80101b8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80101bc:	4619      	mov	r1, r3
 80101be:	2000      	movs	r0, #0
 80101c0:	f000 fbe4 	bl	801098c <lcd_clear_point>
 80101c4:	e024      	b.n	8010210 <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 2)
 80101c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fe fd06 	bl	800ebdc <fm_factory_get_units_vol>
 80101d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d109      	bne.n	80101ec <fm_lcd_units_vol+0xc0>
        {
            resolution_modify = PNT_5;
 80101d8:	2305      	movs	r3, #5
 80101da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 80101de:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80101e2:	4619      	mov	r1, r3
 80101e4:	2000      	movs	r0, #0
 80101e6:	f000 fbd1 	bl	801098c <lcd_clear_point>
 80101ea:	e011      	b.n	8010210 <fm_lcd_units_vol+0xe4>
        }
        else if(fm_factory_get_units_vol().res == 3)
 80101ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fe fcf3 	bl	800ebdc <fm_factory_get_units_vol>
 80101f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80101fa:	2b03      	cmp	r3, #3
 80101fc:	d108      	bne.n	8010210 <fm_lcd_units_vol+0xe4>
        {
            resolution_modify = PNT_4;
 80101fe:	2304      	movs	r3, #4
 8010200:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            lcd_clear_point(HIGH_ROW, resolution_modify);
 8010204:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010208:	4619      	mov	r1, r3
 801020a:	2000      	movs	r0, #0
 801020c:	f000 fbbe 	bl	801098c <lcd_clear_point>
        }

        lcd_clear_vol_unit(fmc_get_acm().unit_volume, 0x0);
 8010210:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010214:	4618      	mov	r0, r3
 8010216:	f004 f8ed 	bl	80143f4 <fmc_get_acm>
 801021a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801021e:	2100      	movs	r1, #0
 8010220:	4618      	mov	r0, r3
 8010222:	f000 fca1 	bl	8010b68 <lcd_clear_vol_unit>

        blink = 0;
 8010226:	4b10      	ldr	r3, [pc, #64]	; (8010268 <fm_lcd_units_vol+0x13c>)
 8010228:	2200      	movs	r2, #0
 801022a:	601a      	str	r2, [r3, #0]
 801022c:	e00d      	b.n	801024a <fm_lcd_units_vol+0x11e>
    }
    else
    {
        lcd_set_vol_unit(fmc_get_acm().unit_volume, 0x0);
 801022e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010232:	4618      	mov	r0, r3
 8010234:	f004 f8de 	bl	80143f4 <fmc_get_acm>
 8010238:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801023c:	2100      	movs	r1, #0
 801023e:	4618      	mov	r0, r3
 8010240:	f001 fcc6 	bl	8011bd0 <lcd_set_vol_unit>
        blink = 1;
 8010244:	4b08      	ldr	r3, [pc, #32]	; (8010268 <fm_lcd_units_vol+0x13c>)
 8010246:	2201      	movs	r2, #1
 8010248:	601a      	str	r2, [r3, #0]
    }

    lcd_set_symbol(ACM, 0x00);
 801024a:	2100      	movs	r1, #0
 801024c:	2006      	movs	r0, #6
 801024e:	f001 f93b 	bl	80114c8 <lcd_set_symbol>
    lcd_set_symbol(TTL, 0x00);
 8010252:	2100      	movs	r1, #0
 8010254:	2005      	movs	r0, #5
 8010256:	f001 f937 	bl	80114c8 <lcd_set_symbol>
}
 801025a:	bf00      	nop
 801025c:	3790      	adds	r7, #144	; 0x90
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	20001db7 	.word	0x20001db7
 8010268:	2000011c 	.word	0x2000011c

0801026c <fm_lcd_version>:
 * según las opciones que se elijan.
 * @param puntos de la fila inferior a imprimir, de tipo point_t.
 * @retval None
 */
void fm_lcd_version(point_t low_point1, point_t low_point2)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	4603      	mov	r3, r0
 8010274:	460a      	mov	r2, r1
 8010276:	71fb      	strb	r3, [r7, #7]
 8010278:	4613      	mov	r3, r2
 801027a:	71bb      	strb	r3, [r7, #6]
    char lcd_msg[MSG_LENGTH];

    fm_lcd_format_number_in_line(LOW_ROW, fm_version_get(), lcd_msg,
 801027c:	f004 f8a0 	bl	80143c0 <fm_version_get>
 8010280:	4601      	mov	r1, r0
 8010282:	f107 020c 	add.w	r2, r7, #12
 8010286:	230c      	movs	r3, #12
 8010288:	2001      	movs	r0, #1
 801028a:	f7ff fbab 	bl	800f9e4 <fm_lcd_format_number_in_line>
    MSG_LENGTH);
    fm_lcd_puts(lcd_msg, LOW_ROW);
 801028e:	f107 030c 	add.w	r3, r7, #12
 8010292:	2101      	movs	r1, #1
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff fdfb 	bl	800fe90 <fm_lcd_puts>
    lcd_set_point(LOW_ROW, low_point1);
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	4619      	mov	r1, r3
 801029e:	2001      	movs	r0, #1
 80102a0:	f001 f866 	bl	8011370 <lcd_set_point>
    lcd_set_point(LOW_ROW, low_point2);
 80102a4:	79bb      	ldrb	r3, [r7, #6]
 80102a6:	4619      	mov	r1, r3
 80102a8:	2001      	movs	r0, #1
 80102aa:	f001 f861 	bl	8011370 <lcd_set_point>

    lcd_set_symbol(VE, 0x0);
 80102ae:	2100      	movs	r1, #0
 80102b0:	2009      	movs	r0, #9
 80102b2:	f001 f909 	bl	80114c8 <lcd_set_symbol>
}
 80102b6:	bf00      	nop
 80102b8:	3718      	adds	r7, #24
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
	...

080102c0 <lcd_clear_all>:
 * @brief Función que limpia toda la pantalla.
 * @param  None
 * @retval None
 */
void lcd_clear_all()
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
    pcf8553_clear_buff();
 80102c6:	f001 ffa3 	bl	8012210 <pcf8553_clear_buff>
     * Limpia el buffer intermedio de los números que aparecen en las filas HIGH
     * y LOW de la pantalla LCD. No es muy eficiente si se pretende usar al
     * refrescar la pantalla cada x tiempo, pero será necesario usarla por el
     * momento al pasar de una pantalla a otra.
     */
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80102ca:	2300      	movs	r3, #0
 80102cc:	607b      	str	r3, [r7, #4]
 80102ce:	e013      	b.n	80102f8 <lcd_clear_all+0x38>
    {
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80102d0:	2300      	movs	r3, #0
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	e00a      	b.n	80102ec <lcd_clear_all+0x2c>
        {
            g_buf[cont_buff_row][cont_buff_col] = 0;
 80102d6:	4a0d      	ldr	r2, [pc, #52]	; (801030c <lcd_clear_all+0x4c>)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	00db      	lsls	r3, r3, #3
 80102dc:	441a      	add	r2, r3
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	4413      	add	r3, r2
 80102e2:	2200      	movs	r2, #0
 80102e4:	701a      	strb	r2, [r3, #0]
        for (int cont_buff_col = 0; cont_buff_col < LCD_COLS; cont_buff_col++)
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	3301      	adds	r3, #1
 80102ea:	603b      	str	r3, [r7, #0]
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	2b07      	cmp	r3, #7
 80102f0:	ddf1      	ble.n	80102d6 <lcd_clear_all+0x16>
    for (int cont_buff_row = 0; cont_buff_row < LCD_ROWS; cont_buff_row++)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	3301      	adds	r3, #1
 80102f6:	607b      	str	r3, [r7, #4]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	dde8      	ble.n	80102d0 <lcd_clear_all+0x10>
        }
    }

    pcf8553_write_all(NONE_SEGMENTS);
 80102fe:	2000      	movs	r0, #0
 8010300:	f002 f816 	bl	8012330 <pcf8553_write_all>
}
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	20001cf8 	.word	0x20001cf8

08010310 <lcd_clear_digit>:

void lcd_clear_digit(screen_digits_t digit, rows_t line)
{
 8010310:	b480      	push	{r7}
 8010312:	b083      	sub	sp, #12
 8010314:	af00      	add	r7, sp, #0
 8010316:	4603      	mov	r3, r0
 8010318:	460a      	mov	r2, r1
 801031a:	71fb      	strb	r3, [r7, #7]
 801031c:	4613      	mov	r3, r2
 801031e:	71bb      	strb	r3, [r7, #6]
    if(line == HIGH_ROW)
 8010320:	79bb      	ldrb	r3, [r7, #6]
 8010322:	2b00      	cmp	r3, #0
 8010324:	f040 81aa 	bne.w	801067c <lcd_clear_digit+0x36c>
    {
        switch(digit)
 8010328:	79fb      	ldrb	r3, [r7, #7]
 801032a:	2b07      	cmp	r3, #7
 801032c:	f200 8320 	bhi.w	8010970 <lcd_clear_digit+0x660>
 8010330:	a201      	add	r2, pc, #4	; (adr r2, 8010338 <lcd_clear_digit+0x28>)
 8010332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010336:	bf00      	nop
 8010338:	08010359 	.word	0x08010359
 801033c:	080103bd 	.word	0x080103bd
 8010340:	08010421 	.word	0x08010421
 8010344:	08010485 	.word	0x08010485
 8010348:	080104e9 	.word	0x080104e9
 801034c:	0801054d 	.word	0x0801054d
 8010350:	080105b5 	.word	0x080105b5
 8010354:	08010619 	.word	0x08010619
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_7);
 8010358:	4b95      	ldr	r3, [pc, #596]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801035a:	7b1b      	ldrb	r3, [r3, #12]
 801035c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010360:	b2da      	uxtb	r2, r3
 8010362:	4b93      	ldr	r3, [pc, #588]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010364:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_6);
 8010366:	4b92      	ldr	r3, [pc, #584]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010368:	7b1b      	ldrb	r3, [r3, #12]
 801036a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801036e:	b2da      	uxtb	r2, r3
 8010370:	4b8f      	ldr	r3, [pc, #572]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010372:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_7);
 8010374:	4b8e      	ldr	r3, [pc, #568]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010376:	7c5b      	ldrb	r3, [r3, #17]
 8010378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801037c:	b2da      	uxtb	r2, r3
 801037e:	4b8c      	ldr	r3, [pc, #560]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010380:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_6);
 8010382:	4b8b      	ldr	r3, [pc, #556]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010384:	7c5b      	ldrb	r3, [r3, #17]
 8010386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801038a:	b2da      	uxtb	r2, r3
 801038c:	4b88      	ldr	r3, [pc, #544]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801038e:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_6);
 8010390:	4b87      	ldr	r3, [pc, #540]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010392:	789b      	ldrb	r3, [r3, #2]
 8010394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010398:	b2da      	uxtb	r2, r3
 801039a:	4b85      	ldr	r3, [pc, #532]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801039c:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_7);
 801039e:	4b84      	ldr	r3, [pc, #528]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103a0:	789b      	ldrb	r3, [r3, #2]
 80103a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103a6:	b2da      	uxtb	r2, r3
 80103a8:	4b81      	ldr	r3, [pc, #516]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103aa:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_6);
 80103ac:	4b80      	ldr	r3, [pc, #512]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103ae:	79db      	ldrb	r3, [r3, #7]
 80103b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	4b7e      	ldr	r3, [pc, #504]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103b8:	71da      	strb	r2, [r3, #7]
            break;
 80103ba:	e2de      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_13] &= ~(1 << BIT_1);
 80103bc:	4b7c      	ldr	r3, [pc, #496]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103be:	7b5b      	ldrb	r3, [r3, #13]
 80103c0:	f023 0302 	bic.w	r3, r3, #2
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	4b7a      	ldr	r3, [pc, #488]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103c8:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_0);
 80103ca:	4b79      	ldr	r3, [pc, #484]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103cc:	7b5b      	ldrb	r3, [r3, #13]
 80103ce:	f023 0301 	bic.w	r3, r3, #1
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	4b76      	ldr	r3, [pc, #472]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103d6:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_1);
 80103d8:	4b75      	ldr	r3, [pc, #468]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103da:	7c9b      	ldrb	r3, [r3, #18]
 80103dc:	f023 0302 	bic.w	r3, r3, #2
 80103e0:	b2da      	uxtb	r2, r3
 80103e2:	4b73      	ldr	r3, [pc, #460]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103e4:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_0);
 80103e6:	4b72      	ldr	r3, [pc, #456]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103e8:	7c9b      	ldrb	r3, [r3, #18]
 80103ea:	f023 0301 	bic.w	r3, r3, #1
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	4b6f      	ldr	r3, [pc, #444]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103f2:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_0);
 80103f4:	4b6e      	ldr	r3, [pc, #440]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80103f6:	78db      	ldrb	r3, [r3, #3]
 80103f8:	f023 0301 	bic.w	r3, r3, #1
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	4b6c      	ldr	r3, [pc, #432]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010400:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_1);
 8010402:	4b6b      	ldr	r3, [pc, #428]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010404:	78db      	ldrb	r3, [r3, #3]
 8010406:	f023 0302 	bic.w	r3, r3, #2
 801040a:	b2da      	uxtb	r2, r3
 801040c:	4b68      	ldr	r3, [pc, #416]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801040e:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_0);
 8010410:	4b67      	ldr	r3, [pc, #412]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010412:	7a1b      	ldrb	r3, [r3, #8]
 8010414:	f023 0301 	bic.w	r3, r3, #1
 8010418:	b2da      	uxtb	r2, r3
 801041a:	4b65      	ldr	r3, [pc, #404]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801041c:	721a      	strb	r2, [r3, #8]
            break;
 801041e:	e2ac      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_13] &= ~(1 << BIT_3);
 8010420:	4b63      	ldr	r3, [pc, #396]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010422:	7b5b      	ldrb	r3, [r3, #13]
 8010424:	f023 0308 	bic.w	r3, r3, #8
 8010428:	b2da      	uxtb	r2, r3
 801042a:	4b61      	ldr	r3, [pc, #388]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801042c:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_2);
 801042e:	4b60      	ldr	r3, [pc, #384]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010430:	7b5b      	ldrb	r3, [r3, #13]
 8010432:	f023 0304 	bic.w	r3, r3, #4
 8010436:	b2da      	uxtb	r2, r3
 8010438:	4b5d      	ldr	r3, [pc, #372]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801043a:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_3);
 801043c:	4b5c      	ldr	r3, [pc, #368]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801043e:	7c9b      	ldrb	r3, [r3, #18]
 8010440:	f023 0308 	bic.w	r3, r3, #8
 8010444:	b2da      	uxtb	r2, r3
 8010446:	4b5a      	ldr	r3, [pc, #360]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010448:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_2);
 801044a:	4b59      	ldr	r3, [pc, #356]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801044c:	7c9b      	ldrb	r3, [r3, #18]
 801044e:	f023 0304 	bic.w	r3, r3, #4
 8010452:	b2da      	uxtb	r2, r3
 8010454:	4b56      	ldr	r3, [pc, #344]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010456:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_2);
 8010458:	4b55      	ldr	r3, [pc, #340]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801045a:	78db      	ldrb	r3, [r3, #3]
 801045c:	f023 0304 	bic.w	r3, r3, #4
 8010460:	b2da      	uxtb	r2, r3
 8010462:	4b53      	ldr	r3, [pc, #332]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010464:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_3);
 8010466:	4b52      	ldr	r3, [pc, #328]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010468:	78db      	ldrb	r3, [r3, #3]
 801046a:	f023 0308 	bic.w	r3, r3, #8
 801046e:	b2da      	uxtb	r2, r3
 8010470:	4b4f      	ldr	r3, [pc, #316]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010472:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_2);
 8010474:	4b4e      	ldr	r3, [pc, #312]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010476:	7a1b      	ldrb	r3, [r3, #8]
 8010478:	f023 0304 	bic.w	r3, r3, #4
 801047c:	b2da      	uxtb	r2, r3
 801047e:	4b4c      	ldr	r3, [pc, #304]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010480:	721a      	strb	r2, [r3, #8]
            break;
 8010482:	e27a      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_13] &= ~(1 << BIT_5);
 8010484:	4b4a      	ldr	r3, [pc, #296]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010486:	7b5b      	ldrb	r3, [r3, #13]
 8010488:	f023 0320 	bic.w	r3, r3, #32
 801048c:	b2da      	uxtb	r2, r3
 801048e:	4b48      	ldr	r3, [pc, #288]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010490:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_4);
 8010492:	4b47      	ldr	r3, [pc, #284]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010494:	7b5b      	ldrb	r3, [r3, #13]
 8010496:	f023 0310 	bic.w	r3, r3, #16
 801049a:	b2da      	uxtb	r2, r3
 801049c:	4b44      	ldr	r3, [pc, #272]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801049e:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_5);
 80104a0:	4b43      	ldr	r3, [pc, #268]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104a2:	7c9b      	ldrb	r3, [r3, #18]
 80104a4:	f023 0320 	bic.w	r3, r3, #32
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	4b41      	ldr	r3, [pc, #260]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104ac:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_4);
 80104ae:	4b40      	ldr	r3, [pc, #256]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104b0:	7c9b      	ldrb	r3, [r3, #18]
 80104b2:	f023 0310 	bic.w	r3, r3, #16
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	4b3d      	ldr	r3, [pc, #244]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104ba:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_4);
 80104bc:	4b3c      	ldr	r3, [pc, #240]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104be:	78db      	ldrb	r3, [r3, #3]
 80104c0:	f023 0310 	bic.w	r3, r3, #16
 80104c4:	b2da      	uxtb	r2, r3
 80104c6:	4b3a      	ldr	r3, [pc, #232]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104c8:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_5);
 80104ca:	4b39      	ldr	r3, [pc, #228]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104cc:	78db      	ldrb	r3, [r3, #3]
 80104ce:	f023 0320 	bic.w	r3, r3, #32
 80104d2:	b2da      	uxtb	r2, r3
 80104d4:	4b36      	ldr	r3, [pc, #216]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104d6:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_4);
 80104d8:	4b35      	ldr	r3, [pc, #212]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104da:	7a1b      	ldrb	r3, [r3, #8]
 80104dc:	f023 0310 	bic.w	r3, r3, #16
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	4b33      	ldr	r3, [pc, #204]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104e4:	721a      	strb	r2, [r3, #8]
            break;
 80104e6:	e248      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_4:
                g_lcd_map[REG_13] &= ~(1 << BIT_7);
 80104e8:	4b31      	ldr	r3, [pc, #196]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104ea:	7b5b      	ldrb	r3, [r3, #13]
 80104ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	4b2f      	ldr	r3, [pc, #188]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104f4:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_13] &= ~(1 << BIT_6);
 80104f6:	4b2e      	ldr	r3, [pc, #184]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80104f8:	7b5b      	ldrb	r3, [r3, #13]
 80104fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	4b2b      	ldr	r3, [pc, #172]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010502:	735a      	strb	r2, [r3, #13]
                g_lcd_map[REG_18] &= ~(1 << BIT_7);
 8010504:	4b2a      	ldr	r3, [pc, #168]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010506:	7c9b      	ldrb	r3, [r3, #18]
 8010508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801050c:	b2da      	uxtb	r2, r3
 801050e:	4b28      	ldr	r3, [pc, #160]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010510:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_18] &= ~(1 << BIT_6);
 8010512:	4b27      	ldr	r3, [pc, #156]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010514:	7c9b      	ldrb	r3, [r3, #18]
 8010516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801051a:	b2da      	uxtb	r2, r3
 801051c:	4b24      	ldr	r3, [pc, #144]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801051e:	749a      	strb	r2, [r3, #18]
                g_lcd_map[REG_3] &= ~(1 << BIT_6);
 8010520:	4b23      	ldr	r3, [pc, #140]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010522:	78db      	ldrb	r3, [r3, #3]
 8010524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010528:	b2da      	uxtb	r2, r3
 801052a:	4b21      	ldr	r3, [pc, #132]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801052c:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_3] &= ~(1 << BIT_7);
 801052e:	4b20      	ldr	r3, [pc, #128]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010530:	78db      	ldrb	r3, [r3, #3]
 8010532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010536:	b2da      	uxtb	r2, r3
 8010538:	4b1d      	ldr	r3, [pc, #116]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801053a:	70da      	strb	r2, [r3, #3]
                g_lcd_map[REG_8] &= ~(1 << BIT_6);
 801053c:	4b1c      	ldr	r3, [pc, #112]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801053e:	7a1b      	ldrb	r3, [r3, #8]
 8010540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010544:	b2da      	uxtb	r2, r3
 8010546:	4b1a      	ldr	r3, [pc, #104]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010548:	721a      	strb	r2, [r3, #8]
            break;
 801054a:	e216      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_14] &= ~(1 << BIT_1);
 801054c:	4b18      	ldr	r3, [pc, #96]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801054e:	7b9b      	ldrb	r3, [r3, #14]
 8010550:	f023 0302 	bic.w	r3, r3, #2
 8010554:	b2da      	uxtb	r2, r3
 8010556:	4b16      	ldr	r3, [pc, #88]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010558:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_0);
 801055a:	4b15      	ldr	r3, [pc, #84]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801055c:	7b9b      	ldrb	r3, [r3, #14]
 801055e:	f023 0301 	bic.w	r3, r3, #1
 8010562:	b2da      	uxtb	r2, r3
 8010564:	4b12      	ldr	r3, [pc, #72]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010566:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_1);
 8010568:	4b11      	ldr	r3, [pc, #68]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801056a:	7cdb      	ldrb	r3, [r3, #19]
 801056c:	f023 0302 	bic.w	r3, r3, #2
 8010570:	b2da      	uxtb	r2, r3
 8010572:	4b0f      	ldr	r3, [pc, #60]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010574:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_0);
 8010576:	4b0e      	ldr	r3, [pc, #56]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010578:	7cdb      	ldrb	r3, [r3, #19]
 801057a:	f023 0301 	bic.w	r3, r3, #1
 801057e:	b2da      	uxtb	r2, r3
 8010580:	4b0b      	ldr	r3, [pc, #44]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010582:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_0);
 8010584:	4b0a      	ldr	r3, [pc, #40]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010586:	791b      	ldrb	r3, [r3, #4]
 8010588:	f023 0301 	bic.w	r3, r3, #1
 801058c:	b2da      	uxtb	r2, r3
 801058e:	4b08      	ldr	r3, [pc, #32]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010590:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_1);
 8010592:	4b07      	ldr	r3, [pc, #28]	; (80105b0 <lcd_clear_digit+0x2a0>)
 8010594:	791b      	ldrb	r3, [r3, #4]
 8010596:	f023 0302 	bic.w	r3, r3, #2
 801059a:	b2da      	uxtb	r2, r3
 801059c:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <lcd_clear_digit+0x2a0>)
 801059e:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_0);
 80105a0:	4b03      	ldr	r3, [pc, #12]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80105a2:	7a5b      	ldrb	r3, [r3, #9]
 80105a4:	f023 0301 	bic.w	r3, r3, #1
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	4b01      	ldr	r3, [pc, #4]	; (80105b0 <lcd_clear_digit+0x2a0>)
 80105ac:	725a      	strb	r2, [r3, #9]
            break;
 80105ae:	e1e4      	b.n	801097a <lcd_clear_digit+0x66a>
 80105b0:	20001d9c 	.word	0x20001d9c
            case DIGIT_6:
                g_lcd_map[REG_14] &= ~(1 << BIT_3);
 80105b4:	4ba2      	ldr	r3, [pc, #648]	; (8010840 <lcd_clear_digit+0x530>)
 80105b6:	7b9b      	ldrb	r3, [r3, #14]
 80105b8:	f023 0308 	bic.w	r3, r3, #8
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	4ba0      	ldr	r3, [pc, #640]	; (8010840 <lcd_clear_digit+0x530>)
 80105c0:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_2);
 80105c2:	4b9f      	ldr	r3, [pc, #636]	; (8010840 <lcd_clear_digit+0x530>)
 80105c4:	7b9b      	ldrb	r3, [r3, #14]
 80105c6:	f023 0304 	bic.w	r3, r3, #4
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	4b9c      	ldr	r3, [pc, #624]	; (8010840 <lcd_clear_digit+0x530>)
 80105ce:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_3);
 80105d0:	4b9b      	ldr	r3, [pc, #620]	; (8010840 <lcd_clear_digit+0x530>)
 80105d2:	7cdb      	ldrb	r3, [r3, #19]
 80105d4:	f023 0308 	bic.w	r3, r3, #8
 80105d8:	b2da      	uxtb	r2, r3
 80105da:	4b99      	ldr	r3, [pc, #612]	; (8010840 <lcd_clear_digit+0x530>)
 80105dc:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_2);
 80105de:	4b98      	ldr	r3, [pc, #608]	; (8010840 <lcd_clear_digit+0x530>)
 80105e0:	7cdb      	ldrb	r3, [r3, #19]
 80105e2:	f023 0304 	bic.w	r3, r3, #4
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	4b95      	ldr	r3, [pc, #596]	; (8010840 <lcd_clear_digit+0x530>)
 80105ea:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_2);
 80105ec:	4b94      	ldr	r3, [pc, #592]	; (8010840 <lcd_clear_digit+0x530>)
 80105ee:	791b      	ldrb	r3, [r3, #4]
 80105f0:	f023 0304 	bic.w	r3, r3, #4
 80105f4:	b2da      	uxtb	r2, r3
 80105f6:	4b92      	ldr	r3, [pc, #584]	; (8010840 <lcd_clear_digit+0x530>)
 80105f8:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_3);
 80105fa:	4b91      	ldr	r3, [pc, #580]	; (8010840 <lcd_clear_digit+0x530>)
 80105fc:	791b      	ldrb	r3, [r3, #4]
 80105fe:	f023 0308 	bic.w	r3, r3, #8
 8010602:	b2da      	uxtb	r2, r3
 8010604:	4b8e      	ldr	r3, [pc, #568]	; (8010840 <lcd_clear_digit+0x530>)
 8010606:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_2);
 8010608:	4b8d      	ldr	r3, [pc, #564]	; (8010840 <lcd_clear_digit+0x530>)
 801060a:	7a5b      	ldrb	r3, [r3, #9]
 801060c:	f023 0304 	bic.w	r3, r3, #4
 8010610:	b2da      	uxtb	r2, r3
 8010612:	4b8b      	ldr	r3, [pc, #556]	; (8010840 <lcd_clear_digit+0x530>)
 8010614:	725a      	strb	r2, [r3, #9]
            break;
 8010616:	e1b0      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_7:
                g_lcd_map[REG_14] &= ~(1 << BIT_5);
 8010618:	4b89      	ldr	r3, [pc, #548]	; (8010840 <lcd_clear_digit+0x530>)
 801061a:	7b9b      	ldrb	r3, [r3, #14]
 801061c:	f023 0320 	bic.w	r3, r3, #32
 8010620:	b2da      	uxtb	r2, r3
 8010622:	4b87      	ldr	r3, [pc, #540]	; (8010840 <lcd_clear_digit+0x530>)
 8010624:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_14] &= ~(1 << BIT_4);
 8010626:	4b86      	ldr	r3, [pc, #536]	; (8010840 <lcd_clear_digit+0x530>)
 8010628:	7b9b      	ldrb	r3, [r3, #14]
 801062a:	f023 0310 	bic.w	r3, r3, #16
 801062e:	b2da      	uxtb	r2, r3
 8010630:	4b83      	ldr	r3, [pc, #524]	; (8010840 <lcd_clear_digit+0x530>)
 8010632:	739a      	strb	r2, [r3, #14]
                g_lcd_map[REG_19] &= ~(1 << BIT_5);
 8010634:	4b82      	ldr	r3, [pc, #520]	; (8010840 <lcd_clear_digit+0x530>)
 8010636:	7cdb      	ldrb	r3, [r3, #19]
 8010638:	f023 0320 	bic.w	r3, r3, #32
 801063c:	b2da      	uxtb	r2, r3
 801063e:	4b80      	ldr	r3, [pc, #512]	; (8010840 <lcd_clear_digit+0x530>)
 8010640:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_19] &= ~(1 << BIT_4);
 8010642:	4b7f      	ldr	r3, [pc, #508]	; (8010840 <lcd_clear_digit+0x530>)
 8010644:	7cdb      	ldrb	r3, [r3, #19]
 8010646:	f023 0310 	bic.w	r3, r3, #16
 801064a:	b2da      	uxtb	r2, r3
 801064c:	4b7c      	ldr	r3, [pc, #496]	; (8010840 <lcd_clear_digit+0x530>)
 801064e:	74da      	strb	r2, [r3, #19]
                g_lcd_map[REG_4] &= ~(1 << BIT_4);
 8010650:	4b7b      	ldr	r3, [pc, #492]	; (8010840 <lcd_clear_digit+0x530>)
 8010652:	791b      	ldrb	r3, [r3, #4]
 8010654:	f023 0310 	bic.w	r3, r3, #16
 8010658:	b2da      	uxtb	r2, r3
 801065a:	4b79      	ldr	r3, [pc, #484]	; (8010840 <lcd_clear_digit+0x530>)
 801065c:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_4] &= ~(1 << BIT_5);
 801065e:	4b78      	ldr	r3, [pc, #480]	; (8010840 <lcd_clear_digit+0x530>)
 8010660:	791b      	ldrb	r3, [r3, #4]
 8010662:	f023 0320 	bic.w	r3, r3, #32
 8010666:	b2da      	uxtb	r2, r3
 8010668:	4b75      	ldr	r3, [pc, #468]	; (8010840 <lcd_clear_digit+0x530>)
 801066a:	711a      	strb	r2, [r3, #4]
                g_lcd_map[REG_9] &= ~(1 << BIT_4);
 801066c:	4b74      	ldr	r3, [pc, #464]	; (8010840 <lcd_clear_digit+0x530>)
 801066e:	7a5b      	ldrb	r3, [r3, #9]
 8010670:	f023 0310 	bic.w	r3, r3, #16
 8010674:	b2da      	uxtb	r2, r3
 8010676:	4b72      	ldr	r3, [pc, #456]	; (8010840 <lcd_clear_digit+0x530>)
 8010678:	725a      	strb	r2, [r3, #9]
            break;
 801067a:	e17e      	b.n	801097a <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
    else if(line == LOW_ROW)
 801067c:	79bb      	ldrb	r3, [r7, #6]
 801067e:	2b01      	cmp	r3, #1
 8010680:	f040 8178 	bne.w	8010974 <lcd_clear_digit+0x664>
    {
        switch(digit)
 8010684:	79fb      	ldrb	r3, [r7, #7]
 8010686:	2b06      	cmp	r3, #6
 8010688:	f200 8176 	bhi.w	8010978 <lcd_clear_digit+0x668>
 801068c:	a201      	add	r2, pc, #4	; (adr r2, 8010694 <lcd_clear_digit+0x384>)
 801068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010692:	bf00      	nop
 8010694:	080106b1 	.word	0x080106b1
 8010698:	08010715 	.word	0x08010715
 801069c:	08010779 	.word	0x08010779
 80106a0:	080107dd 	.word	0x080107dd
 80106a4:	08010845 	.word	0x08010845
 80106a8:	080108a9 	.word	0x080108a9
 80106ac:	0801090d 	.word	0x0801090d
        {
            case DIGIT_0:
                g_lcd_map[REG_12] &= ~(1 << BIT_2);
 80106b0:	4b63      	ldr	r3, [pc, #396]	; (8010840 <lcd_clear_digit+0x530>)
 80106b2:	7b1b      	ldrb	r3, [r3, #12]
 80106b4:	f023 0304 	bic.w	r3, r3, #4
 80106b8:	b2da      	uxtb	r2, r3
 80106ba:	4b61      	ldr	r3, [pc, #388]	; (8010840 <lcd_clear_digit+0x530>)
 80106bc:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_3);
 80106be:	4b60      	ldr	r3, [pc, #384]	; (8010840 <lcd_clear_digit+0x530>)
 80106c0:	7b1b      	ldrb	r3, [r3, #12]
 80106c2:	f023 0308 	bic.w	r3, r3, #8
 80106c6:	b2da      	uxtb	r2, r3
 80106c8:	4b5d      	ldr	r3, [pc, #372]	; (8010840 <lcd_clear_digit+0x530>)
 80106ca:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_2);
 80106cc:	4b5c      	ldr	r3, [pc, #368]	; (8010840 <lcd_clear_digit+0x530>)
 80106ce:	7c5b      	ldrb	r3, [r3, #17]
 80106d0:	f023 0304 	bic.w	r3, r3, #4
 80106d4:	b2da      	uxtb	r2, r3
 80106d6:	4b5a      	ldr	r3, [pc, #360]	; (8010840 <lcd_clear_digit+0x530>)
 80106d8:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_3);
 80106da:	4b59      	ldr	r3, [pc, #356]	; (8010840 <lcd_clear_digit+0x530>)
 80106dc:	7c5b      	ldrb	r3, [r3, #17]
 80106de:	f023 0308 	bic.w	r3, r3, #8
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	4b56      	ldr	r3, [pc, #344]	; (8010840 <lcd_clear_digit+0x530>)
 80106e6:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_2);
 80106e8:	4b55      	ldr	r3, [pc, #340]	; (8010840 <lcd_clear_digit+0x530>)
 80106ea:	789b      	ldrb	r3, [r3, #2]
 80106ec:	f023 0304 	bic.w	r3, r3, #4
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	4b53      	ldr	r3, [pc, #332]	; (8010840 <lcd_clear_digit+0x530>)
 80106f4:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_3);
 80106f6:	4b52      	ldr	r3, [pc, #328]	; (8010840 <lcd_clear_digit+0x530>)
 80106f8:	789b      	ldrb	r3, [r3, #2]
 80106fa:	f023 0308 	bic.w	r3, r3, #8
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	4b4f      	ldr	r3, [pc, #316]	; (8010840 <lcd_clear_digit+0x530>)
 8010702:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_3);
 8010704:	4b4e      	ldr	r3, [pc, #312]	; (8010840 <lcd_clear_digit+0x530>)
 8010706:	79db      	ldrb	r3, [r3, #7]
 8010708:	f023 0308 	bic.w	r3, r3, #8
 801070c:	b2da      	uxtb	r2, r3
 801070e:	4b4c      	ldr	r3, [pc, #304]	; (8010840 <lcd_clear_digit+0x530>)
 8010710:	71da      	strb	r2, [r3, #7]
            break;
 8010712:	e132      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_1:
                g_lcd_map[REG_12] &= ~(1 << BIT_0);
 8010714:	4b4a      	ldr	r3, [pc, #296]	; (8010840 <lcd_clear_digit+0x530>)
 8010716:	7b1b      	ldrb	r3, [r3, #12]
 8010718:	f023 0301 	bic.w	r3, r3, #1
 801071c:	b2da      	uxtb	r2, r3
 801071e:	4b48      	ldr	r3, [pc, #288]	; (8010840 <lcd_clear_digit+0x530>)
 8010720:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_12] &= ~(1 << BIT_1);
 8010722:	4b47      	ldr	r3, [pc, #284]	; (8010840 <lcd_clear_digit+0x530>)
 8010724:	7b1b      	ldrb	r3, [r3, #12]
 8010726:	f023 0302 	bic.w	r3, r3, #2
 801072a:	b2da      	uxtb	r2, r3
 801072c:	4b44      	ldr	r3, [pc, #272]	; (8010840 <lcd_clear_digit+0x530>)
 801072e:	731a      	strb	r2, [r3, #12]
                g_lcd_map[REG_17] &= ~(1 << BIT_0);
 8010730:	4b43      	ldr	r3, [pc, #268]	; (8010840 <lcd_clear_digit+0x530>)
 8010732:	7c5b      	ldrb	r3, [r3, #17]
 8010734:	f023 0301 	bic.w	r3, r3, #1
 8010738:	b2da      	uxtb	r2, r3
 801073a:	4b41      	ldr	r3, [pc, #260]	; (8010840 <lcd_clear_digit+0x530>)
 801073c:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_17] &= ~(1 << BIT_1);
 801073e:	4b40      	ldr	r3, [pc, #256]	; (8010840 <lcd_clear_digit+0x530>)
 8010740:	7c5b      	ldrb	r3, [r3, #17]
 8010742:	f023 0302 	bic.w	r3, r3, #2
 8010746:	b2da      	uxtb	r2, r3
 8010748:	4b3d      	ldr	r3, [pc, #244]	; (8010840 <lcd_clear_digit+0x530>)
 801074a:	745a      	strb	r2, [r3, #17]
                g_lcd_map[REG_2] &= ~(1 << BIT_0);
 801074c:	4b3c      	ldr	r3, [pc, #240]	; (8010840 <lcd_clear_digit+0x530>)
 801074e:	789b      	ldrb	r3, [r3, #2]
 8010750:	f023 0301 	bic.w	r3, r3, #1
 8010754:	b2da      	uxtb	r2, r3
 8010756:	4b3a      	ldr	r3, [pc, #232]	; (8010840 <lcd_clear_digit+0x530>)
 8010758:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_2] &= ~(1 << BIT_1);
 801075a:	4b39      	ldr	r3, [pc, #228]	; (8010840 <lcd_clear_digit+0x530>)
 801075c:	789b      	ldrb	r3, [r3, #2]
 801075e:	f023 0302 	bic.w	r3, r3, #2
 8010762:	b2da      	uxtb	r2, r3
 8010764:	4b36      	ldr	r3, [pc, #216]	; (8010840 <lcd_clear_digit+0x530>)
 8010766:	709a      	strb	r2, [r3, #2]
                g_lcd_map[REG_7] &= ~(1 << BIT_1);
 8010768:	4b35      	ldr	r3, [pc, #212]	; (8010840 <lcd_clear_digit+0x530>)
 801076a:	79db      	ldrb	r3, [r3, #7]
 801076c:	f023 0302 	bic.w	r3, r3, #2
 8010770:	b2da      	uxtb	r2, r3
 8010772:	4b33      	ldr	r3, [pc, #204]	; (8010840 <lcd_clear_digit+0x530>)
 8010774:	71da      	strb	r2, [r3, #7]
            break;
 8010776:	e100      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_2:
                g_lcd_map[REG_11] &= ~(1 << BIT_6);
 8010778:	4b31      	ldr	r3, [pc, #196]	; (8010840 <lcd_clear_digit+0x530>)
 801077a:	7adb      	ldrb	r3, [r3, #11]
 801077c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010780:	b2da      	uxtb	r2, r3
 8010782:	4b2f      	ldr	r3, [pc, #188]	; (8010840 <lcd_clear_digit+0x530>)
 8010784:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_7);
 8010786:	4b2e      	ldr	r3, [pc, #184]	; (8010840 <lcd_clear_digit+0x530>)
 8010788:	7adb      	ldrb	r3, [r3, #11]
 801078a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801078e:	b2da      	uxtb	r2, r3
 8010790:	4b2b      	ldr	r3, [pc, #172]	; (8010840 <lcd_clear_digit+0x530>)
 8010792:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_6);
 8010794:	4b2a      	ldr	r3, [pc, #168]	; (8010840 <lcd_clear_digit+0x530>)
 8010796:	7c1b      	ldrb	r3, [r3, #16]
 8010798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801079c:	b2da      	uxtb	r2, r3
 801079e:	4b28      	ldr	r3, [pc, #160]	; (8010840 <lcd_clear_digit+0x530>)
 80107a0:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_7);
 80107a2:	4b27      	ldr	r3, [pc, #156]	; (8010840 <lcd_clear_digit+0x530>)
 80107a4:	7c1b      	ldrb	r3, [r3, #16]
 80107a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107aa:	b2da      	uxtb	r2, r3
 80107ac:	4b24      	ldr	r3, [pc, #144]	; (8010840 <lcd_clear_digit+0x530>)
 80107ae:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_6);
 80107b0:	4b23      	ldr	r3, [pc, #140]	; (8010840 <lcd_clear_digit+0x530>)
 80107b2:	785b      	ldrb	r3, [r3, #1]
 80107b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	4b21      	ldr	r3, [pc, #132]	; (8010840 <lcd_clear_digit+0x530>)
 80107bc:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_7);
 80107be:	4b20      	ldr	r3, [pc, #128]	; (8010840 <lcd_clear_digit+0x530>)
 80107c0:	785b      	ldrb	r3, [r3, #1]
 80107c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107c6:	b2da      	uxtb	r2, r3
 80107c8:	4b1d      	ldr	r3, [pc, #116]	; (8010840 <lcd_clear_digit+0x530>)
 80107ca:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_7);
 80107cc:	4b1c      	ldr	r3, [pc, #112]	; (8010840 <lcd_clear_digit+0x530>)
 80107ce:	799b      	ldrb	r3, [r3, #6]
 80107d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	4b1a      	ldr	r3, [pc, #104]	; (8010840 <lcd_clear_digit+0x530>)
 80107d8:	719a      	strb	r2, [r3, #6]
            break;
 80107da:	e0ce      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_3:
                g_lcd_map[REG_11] &= ~(1 << BIT_4);
 80107dc:	4b18      	ldr	r3, [pc, #96]	; (8010840 <lcd_clear_digit+0x530>)
 80107de:	7adb      	ldrb	r3, [r3, #11]
 80107e0:	f023 0310 	bic.w	r3, r3, #16
 80107e4:	b2da      	uxtb	r2, r3
 80107e6:	4b16      	ldr	r3, [pc, #88]	; (8010840 <lcd_clear_digit+0x530>)
 80107e8:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_5);
 80107ea:	4b15      	ldr	r3, [pc, #84]	; (8010840 <lcd_clear_digit+0x530>)
 80107ec:	7adb      	ldrb	r3, [r3, #11]
 80107ee:	f023 0320 	bic.w	r3, r3, #32
 80107f2:	b2da      	uxtb	r2, r3
 80107f4:	4b12      	ldr	r3, [pc, #72]	; (8010840 <lcd_clear_digit+0x530>)
 80107f6:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_4);
 80107f8:	4b11      	ldr	r3, [pc, #68]	; (8010840 <lcd_clear_digit+0x530>)
 80107fa:	7c1b      	ldrb	r3, [r3, #16]
 80107fc:	f023 0310 	bic.w	r3, r3, #16
 8010800:	b2da      	uxtb	r2, r3
 8010802:	4b0f      	ldr	r3, [pc, #60]	; (8010840 <lcd_clear_digit+0x530>)
 8010804:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_5);
 8010806:	4b0e      	ldr	r3, [pc, #56]	; (8010840 <lcd_clear_digit+0x530>)
 8010808:	7c1b      	ldrb	r3, [r3, #16]
 801080a:	f023 0320 	bic.w	r3, r3, #32
 801080e:	b2da      	uxtb	r2, r3
 8010810:	4b0b      	ldr	r3, [pc, #44]	; (8010840 <lcd_clear_digit+0x530>)
 8010812:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_4);
 8010814:	4b0a      	ldr	r3, [pc, #40]	; (8010840 <lcd_clear_digit+0x530>)
 8010816:	785b      	ldrb	r3, [r3, #1]
 8010818:	f023 0310 	bic.w	r3, r3, #16
 801081c:	b2da      	uxtb	r2, r3
 801081e:	4b08      	ldr	r3, [pc, #32]	; (8010840 <lcd_clear_digit+0x530>)
 8010820:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_5);
 8010822:	4b07      	ldr	r3, [pc, #28]	; (8010840 <lcd_clear_digit+0x530>)
 8010824:	785b      	ldrb	r3, [r3, #1]
 8010826:	f023 0320 	bic.w	r3, r3, #32
 801082a:	b2da      	uxtb	r2, r3
 801082c:	4b04      	ldr	r3, [pc, #16]	; (8010840 <lcd_clear_digit+0x530>)
 801082e:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_5);
 8010830:	4b03      	ldr	r3, [pc, #12]	; (8010840 <lcd_clear_digit+0x530>)
 8010832:	799b      	ldrb	r3, [r3, #6]
 8010834:	f023 0320 	bic.w	r3, r3, #32
 8010838:	b2da      	uxtb	r2, r3
 801083a:	4b01      	ldr	r3, [pc, #4]	; (8010840 <lcd_clear_digit+0x530>)
 801083c:	719a      	strb	r2, [r3, #6]
            break;
 801083e:	e09c      	b.n	801097a <lcd_clear_digit+0x66a>
 8010840:	20001d9c 	.word	0x20001d9c
            case DIGIT_4:
                g_lcd_map[REG_11] &= ~(1 << BIT_2);
 8010844:	4b50      	ldr	r3, [pc, #320]	; (8010988 <lcd_clear_digit+0x678>)
 8010846:	7adb      	ldrb	r3, [r3, #11]
 8010848:	f023 0304 	bic.w	r3, r3, #4
 801084c:	b2da      	uxtb	r2, r3
 801084e:	4b4e      	ldr	r3, [pc, #312]	; (8010988 <lcd_clear_digit+0x678>)
 8010850:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_3);
 8010852:	4b4d      	ldr	r3, [pc, #308]	; (8010988 <lcd_clear_digit+0x678>)
 8010854:	7adb      	ldrb	r3, [r3, #11]
 8010856:	f023 0308 	bic.w	r3, r3, #8
 801085a:	b2da      	uxtb	r2, r3
 801085c:	4b4a      	ldr	r3, [pc, #296]	; (8010988 <lcd_clear_digit+0x678>)
 801085e:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_2);
 8010860:	4b49      	ldr	r3, [pc, #292]	; (8010988 <lcd_clear_digit+0x678>)
 8010862:	7c1b      	ldrb	r3, [r3, #16]
 8010864:	f023 0304 	bic.w	r3, r3, #4
 8010868:	b2da      	uxtb	r2, r3
 801086a:	4b47      	ldr	r3, [pc, #284]	; (8010988 <lcd_clear_digit+0x678>)
 801086c:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_3);
 801086e:	4b46      	ldr	r3, [pc, #280]	; (8010988 <lcd_clear_digit+0x678>)
 8010870:	7c1b      	ldrb	r3, [r3, #16]
 8010872:	f023 0308 	bic.w	r3, r3, #8
 8010876:	b2da      	uxtb	r2, r3
 8010878:	4b43      	ldr	r3, [pc, #268]	; (8010988 <lcd_clear_digit+0x678>)
 801087a:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_2);
 801087c:	4b42      	ldr	r3, [pc, #264]	; (8010988 <lcd_clear_digit+0x678>)
 801087e:	785b      	ldrb	r3, [r3, #1]
 8010880:	f023 0304 	bic.w	r3, r3, #4
 8010884:	b2da      	uxtb	r2, r3
 8010886:	4b40      	ldr	r3, [pc, #256]	; (8010988 <lcd_clear_digit+0x678>)
 8010888:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_3);
 801088a:	4b3f      	ldr	r3, [pc, #252]	; (8010988 <lcd_clear_digit+0x678>)
 801088c:	785b      	ldrb	r3, [r3, #1]
 801088e:	f023 0308 	bic.w	r3, r3, #8
 8010892:	b2da      	uxtb	r2, r3
 8010894:	4b3c      	ldr	r3, [pc, #240]	; (8010988 <lcd_clear_digit+0x678>)
 8010896:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_3);
 8010898:	4b3b      	ldr	r3, [pc, #236]	; (8010988 <lcd_clear_digit+0x678>)
 801089a:	799b      	ldrb	r3, [r3, #6]
 801089c:	f023 0308 	bic.w	r3, r3, #8
 80108a0:	b2da      	uxtb	r2, r3
 80108a2:	4b39      	ldr	r3, [pc, #228]	; (8010988 <lcd_clear_digit+0x678>)
 80108a4:	719a      	strb	r2, [r3, #6]
            break;
 80108a6:	e068      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_5:
                g_lcd_map[REG_11] &= ~(1 << BIT_0);
 80108a8:	4b37      	ldr	r3, [pc, #220]	; (8010988 <lcd_clear_digit+0x678>)
 80108aa:	7adb      	ldrb	r3, [r3, #11]
 80108ac:	f023 0301 	bic.w	r3, r3, #1
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	4b35      	ldr	r3, [pc, #212]	; (8010988 <lcd_clear_digit+0x678>)
 80108b4:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_11] &= ~(1 << BIT_1);
 80108b6:	4b34      	ldr	r3, [pc, #208]	; (8010988 <lcd_clear_digit+0x678>)
 80108b8:	7adb      	ldrb	r3, [r3, #11]
 80108ba:	f023 0302 	bic.w	r3, r3, #2
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	4b31      	ldr	r3, [pc, #196]	; (8010988 <lcd_clear_digit+0x678>)
 80108c2:	72da      	strb	r2, [r3, #11]
                g_lcd_map[REG_16] &= ~(1 << BIT_0);
 80108c4:	4b30      	ldr	r3, [pc, #192]	; (8010988 <lcd_clear_digit+0x678>)
 80108c6:	7c1b      	ldrb	r3, [r3, #16]
 80108c8:	f023 0301 	bic.w	r3, r3, #1
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	4b2e      	ldr	r3, [pc, #184]	; (8010988 <lcd_clear_digit+0x678>)
 80108d0:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_16] &= ~(1 << BIT_1);
 80108d2:	4b2d      	ldr	r3, [pc, #180]	; (8010988 <lcd_clear_digit+0x678>)
 80108d4:	7c1b      	ldrb	r3, [r3, #16]
 80108d6:	f023 0302 	bic.w	r3, r3, #2
 80108da:	b2da      	uxtb	r2, r3
 80108dc:	4b2a      	ldr	r3, [pc, #168]	; (8010988 <lcd_clear_digit+0x678>)
 80108de:	741a      	strb	r2, [r3, #16]
                g_lcd_map[REG_1] &= ~(1 << BIT_0);
 80108e0:	4b29      	ldr	r3, [pc, #164]	; (8010988 <lcd_clear_digit+0x678>)
 80108e2:	785b      	ldrb	r3, [r3, #1]
 80108e4:	f023 0301 	bic.w	r3, r3, #1
 80108e8:	b2da      	uxtb	r2, r3
 80108ea:	4b27      	ldr	r3, [pc, #156]	; (8010988 <lcd_clear_digit+0x678>)
 80108ec:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_1] &= ~(1 << BIT_1);
 80108ee:	4b26      	ldr	r3, [pc, #152]	; (8010988 <lcd_clear_digit+0x678>)
 80108f0:	785b      	ldrb	r3, [r3, #1]
 80108f2:	f023 0302 	bic.w	r3, r3, #2
 80108f6:	b2da      	uxtb	r2, r3
 80108f8:	4b23      	ldr	r3, [pc, #140]	; (8010988 <lcd_clear_digit+0x678>)
 80108fa:	705a      	strb	r2, [r3, #1]
                g_lcd_map[REG_6] &= ~(1 << BIT_1);
 80108fc:	4b22      	ldr	r3, [pc, #136]	; (8010988 <lcd_clear_digit+0x678>)
 80108fe:	799b      	ldrb	r3, [r3, #6]
 8010900:	f023 0302 	bic.w	r3, r3, #2
 8010904:	b2da      	uxtb	r2, r3
 8010906:	4b20      	ldr	r3, [pc, #128]	; (8010988 <lcd_clear_digit+0x678>)
 8010908:	719a      	strb	r2, [r3, #6]
            break;
 801090a:	e036      	b.n	801097a <lcd_clear_digit+0x66a>
            case DIGIT_6:
                g_lcd_map[REG_10] &= ~(1 << BIT_6);
 801090c:	4b1e      	ldr	r3, [pc, #120]	; (8010988 <lcd_clear_digit+0x678>)
 801090e:	7a9b      	ldrb	r3, [r3, #10]
 8010910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010914:	b2da      	uxtb	r2, r3
 8010916:	4b1c      	ldr	r3, [pc, #112]	; (8010988 <lcd_clear_digit+0x678>)
 8010918:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_10] &= ~(1 << BIT_7);
 801091a:	4b1b      	ldr	r3, [pc, #108]	; (8010988 <lcd_clear_digit+0x678>)
 801091c:	7a9b      	ldrb	r3, [r3, #10]
 801091e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010922:	b2da      	uxtb	r2, r3
 8010924:	4b18      	ldr	r3, [pc, #96]	; (8010988 <lcd_clear_digit+0x678>)
 8010926:	729a      	strb	r2, [r3, #10]
                g_lcd_map[REG_15] &= ~(1 << BIT_6);
 8010928:	4b17      	ldr	r3, [pc, #92]	; (8010988 <lcd_clear_digit+0x678>)
 801092a:	7bdb      	ldrb	r3, [r3, #15]
 801092c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010930:	b2da      	uxtb	r2, r3
 8010932:	4b15      	ldr	r3, [pc, #84]	; (8010988 <lcd_clear_digit+0x678>)
 8010934:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_15] &= ~(1 << BIT_7);
 8010936:	4b14      	ldr	r3, [pc, #80]	; (8010988 <lcd_clear_digit+0x678>)
 8010938:	7bdb      	ldrb	r3, [r3, #15]
 801093a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801093e:	b2da      	uxtb	r2, r3
 8010940:	4b11      	ldr	r3, [pc, #68]	; (8010988 <lcd_clear_digit+0x678>)
 8010942:	73da      	strb	r2, [r3, #15]
                g_lcd_map[REG_0] &= ~(1 << BIT_6);
 8010944:	4b10      	ldr	r3, [pc, #64]	; (8010988 <lcd_clear_digit+0x678>)
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801094c:	b2da      	uxtb	r2, r3
 801094e:	4b0e      	ldr	r3, [pc, #56]	; (8010988 <lcd_clear_digit+0x678>)
 8010950:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_0] &= ~(1 << BIT_7);
 8010952:	4b0d      	ldr	r3, [pc, #52]	; (8010988 <lcd_clear_digit+0x678>)
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801095a:	b2da      	uxtb	r2, r3
 801095c:	4b0a      	ldr	r3, [pc, #40]	; (8010988 <lcd_clear_digit+0x678>)
 801095e:	701a      	strb	r2, [r3, #0]
                g_lcd_map[REG_5] &= ~(1 << BIT_7);
 8010960:	4b09      	ldr	r3, [pc, #36]	; (8010988 <lcd_clear_digit+0x678>)
 8010962:	795b      	ldrb	r3, [r3, #5]
 8010964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010968:	b2da      	uxtb	r2, r3
 801096a:	4b07      	ldr	r3, [pc, #28]	; (8010988 <lcd_clear_digit+0x678>)
 801096c:	715a      	strb	r2, [r3, #5]
            break;
 801096e:	e004      	b.n	801097a <lcd_clear_digit+0x66a>
            break;
 8010970:	bf00      	nop
 8010972:	e002      	b.n	801097a <lcd_clear_digit+0x66a>
            default:
            break;
        }
    }
 8010974:	bf00      	nop
 8010976:	e000      	b.n	801097a <lcd_clear_digit+0x66a>
            break;
 8010978:	bf00      	nop
}
 801097a:	bf00      	nop
 801097c:	370c      	adds	r7, #12
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	20001d9c 	.word	0x20001d9c

0801098c <lcd_clear_point>:
 * pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_clear_point(rows_t line, point_t point)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	4603      	mov	r3, r0
 8010994:	460a      	mov	r2, r1
 8010996:	71fb      	strb	r3, [r7, #7]
 8010998:	4613      	mov	r3, r2
 801099a:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 801099c:	79fb      	ldrb	r3, [r7, #7]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d14c      	bne.n	8010a3c <lcd_clear_point+0xb0>
    {
        switch (point)
 80109a2:	79bb      	ldrb	r3, [r7, #6]
 80109a4:	2b06      	cmp	r3, #6
 80109a6:	f200 808f 	bhi.w	8010ac8 <lcd_clear_point+0x13c>
 80109aa:	a201      	add	r2, pc, #4	; (adr r2, 80109b0 <lcd_clear_point+0x24>)
 80109ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b0:	080109cd 	.word	0x080109cd
 80109b4:	080109dd 	.word	0x080109dd
 80109b8:	080109ed 	.word	0x080109ed
 80109bc:	080109fd 	.word	0x080109fd
 80109c0:	08010a0d 	.word	0x08010a0d
 80109c4:	08010a1d 	.word	0x08010a1d
 80109c8:	08010a2d 	.word	0x08010a2d
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_7);
 80109cc:	4b44      	ldr	r3, [pc, #272]	; (8010ae0 <lcd_clear_point+0x154>)
 80109ce:	79db      	ldrb	r3, [r3, #7]
 80109d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	4b42      	ldr	r3, [pc, #264]	; (8010ae0 <lcd_clear_point+0x154>)
 80109d8:	71da      	strb	r2, [r3, #7]
            break;
 80109da:	e07a      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] &= ~(1 << BIT_1);
 80109dc:	4b40      	ldr	r3, [pc, #256]	; (8010ae0 <lcd_clear_point+0x154>)
 80109de:	7a1b      	ldrb	r3, [r3, #8]
 80109e0:	f023 0302 	bic.w	r3, r3, #2
 80109e4:	b2da      	uxtb	r2, r3
 80109e6:	4b3e      	ldr	r3, [pc, #248]	; (8010ae0 <lcd_clear_point+0x154>)
 80109e8:	721a      	strb	r2, [r3, #8]
            break;
 80109ea:	e072      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] &= ~(1 << BIT_3);
 80109ec:	4b3c      	ldr	r3, [pc, #240]	; (8010ae0 <lcd_clear_point+0x154>)
 80109ee:	7a1b      	ldrb	r3, [r3, #8]
 80109f0:	f023 0308 	bic.w	r3, r3, #8
 80109f4:	b2da      	uxtb	r2, r3
 80109f6:	4b3a      	ldr	r3, [pc, #232]	; (8010ae0 <lcd_clear_point+0x154>)
 80109f8:	721a      	strb	r2, [r3, #8]
            break;
 80109fa:	e06a      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] &= ~(1 << BIT_5);
 80109fc:	4b38      	ldr	r3, [pc, #224]	; (8010ae0 <lcd_clear_point+0x154>)
 80109fe:	7a1b      	ldrb	r3, [r3, #8]
 8010a00:	f023 0320 	bic.w	r3, r3, #32
 8010a04:	b2da      	uxtb	r2, r3
 8010a06:	4b36      	ldr	r3, [pc, #216]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a08:	721a      	strb	r2, [r3, #8]
            break;
 8010a0a:	e062      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] &= ~(1 << BIT_7);
 8010a0c:	4b34      	ldr	r3, [pc, #208]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a0e:	7a1b      	ldrb	r3, [r3, #8]
 8010a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a14:	b2da      	uxtb	r2, r3
 8010a16:	4b32      	ldr	r3, [pc, #200]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a18:	721a      	strb	r2, [r3, #8]
            break;
 8010a1a:	e05a      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] &= ~(1 << BIT_1);
 8010a1c:	4b30      	ldr	r3, [pc, #192]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a1e:	7a5b      	ldrb	r3, [r3, #9]
 8010a20:	f023 0302 	bic.w	r3, r3, #2
 8010a24:	b2da      	uxtb	r2, r3
 8010a26:	4b2e      	ldr	r3, [pc, #184]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a28:	725a      	strb	r2, [r3, #9]
            break;
 8010a2a:	e052      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] &= ~(1 << BIT_3);
 8010a2c:	4b2c      	ldr	r3, [pc, #176]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a2e:	7a5b      	ldrb	r3, [r3, #9]
 8010a30:	f023 0308 	bic.w	r3, r3, #8
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	4b2a      	ldr	r3, [pc, #168]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a38:	725a      	strb	r2, [r3, #9]
            break;
 8010a3a:	e04a      	b.n	8010ad2 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8010a3c:	79fb      	ldrb	r3, [r7, #7]
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d144      	bne.n	8010acc <lcd_clear_point+0x140>
    {
        switch (point)
 8010a42:	79bb      	ldrb	r3, [r7, #6]
 8010a44:	2b05      	cmp	r3, #5
 8010a46:	d843      	bhi.n	8010ad0 <lcd_clear_point+0x144>
 8010a48:	a201      	add	r2, pc, #4	; (adr r2, 8010a50 <lcd_clear_point+0xc4>)
 8010a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4e:	bf00      	nop
 8010a50:	08010a69 	.word	0x08010a69
 8010a54:	08010a79 	.word	0x08010a79
 8010a58:	08010a89 	.word	0x08010a89
 8010a5c:	08010a99 	.word	0x08010a99
 8010a60:	08010aa9 	.word	0x08010aa9
 8010a64:	08010ab9 	.word	0x08010ab9
        {
            case PNT_0:
                g_lcd_map[REG_7] &= ~(1 << BIT_2);
 8010a68:	4b1d      	ldr	r3, [pc, #116]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a6a:	79db      	ldrb	r3, [r3, #7]
 8010a6c:	f023 0304 	bic.w	r3, r3, #4
 8010a70:	b2da      	uxtb	r2, r3
 8010a72:	4b1b      	ldr	r3, [pc, #108]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a74:	71da      	strb	r2, [r3, #7]
            break;
 8010a76:	e02c      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] &= ~(1 << BIT_0);
 8010a78:	4b19      	ldr	r3, [pc, #100]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a7a:	79db      	ldrb	r3, [r3, #7]
 8010a7c:	f023 0301 	bic.w	r3, r3, #1
 8010a80:	b2da      	uxtb	r2, r3
 8010a82:	4b17      	ldr	r3, [pc, #92]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a84:	71da      	strb	r2, [r3, #7]
            break;
 8010a86:	e024      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] &= ~(1 << BIT_6);
 8010a88:	4b15      	ldr	r3, [pc, #84]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a8a:	799b      	ldrb	r3, [r3, #6]
 8010a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	4b13      	ldr	r3, [pc, #76]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a94:	719a      	strb	r2, [r3, #6]
            break;
 8010a96:	e01c      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] &= ~(1 << BIT_4);
 8010a98:	4b11      	ldr	r3, [pc, #68]	; (8010ae0 <lcd_clear_point+0x154>)
 8010a9a:	799b      	ldrb	r3, [r3, #6]
 8010a9c:	f023 0310 	bic.w	r3, r3, #16
 8010aa0:	b2da      	uxtb	r2, r3
 8010aa2:	4b0f      	ldr	r3, [pc, #60]	; (8010ae0 <lcd_clear_point+0x154>)
 8010aa4:	719a      	strb	r2, [r3, #6]
            break;
 8010aa6:	e014      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] &= ~(1 << BIT_2);
 8010aa8:	4b0d      	ldr	r3, [pc, #52]	; (8010ae0 <lcd_clear_point+0x154>)
 8010aaa:	799b      	ldrb	r3, [r3, #6]
 8010aac:	f023 0304 	bic.w	r3, r3, #4
 8010ab0:	b2da      	uxtb	r2, r3
 8010ab2:	4b0b      	ldr	r3, [pc, #44]	; (8010ae0 <lcd_clear_point+0x154>)
 8010ab4:	719a      	strb	r2, [r3, #6]
            break;
 8010ab6:	e00c      	b.n	8010ad2 <lcd_clear_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] &= ~(1 << BIT_0);
 8010ab8:	4b09      	ldr	r3, [pc, #36]	; (8010ae0 <lcd_clear_point+0x154>)
 8010aba:	799b      	ldrb	r3, [r3, #6]
 8010abc:	f023 0301 	bic.w	r3, r3, #1
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	4b07      	ldr	r3, [pc, #28]	; (8010ae0 <lcd_clear_point+0x154>)
 8010ac4:	719a      	strb	r2, [r3, #6]
            break;
 8010ac6:	e004      	b.n	8010ad2 <lcd_clear_point+0x146>
            break;
 8010ac8:	bf00      	nop
 8010aca:	e002      	b.n	8010ad2 <lcd_clear_point+0x146>
            default:
            break;
        }
    }
 8010acc:	bf00      	nop
 8010ace:	e000      	b.n	8010ad2 <lcd_clear_point+0x146>
            break;
 8010ad0:	bf00      	nop
}
 8010ad2:	bf00      	nop
 8010ad4:	370c      	adds	r7, #12
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr
 8010ade:	bf00      	nop
 8010ae0:	20001d9c 	.word	0x20001d9c

08010ae4 <lcd_clear_time_unit>:

    pcf8553_blink(blink_speed);
}

void lcd_clear_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	4603      	mov	r3, r0
 8010aec:	460a      	mov	r2, r1
 8010aee:	71fb      	strb	r3, [r7, #7]
 8010af0:	4613      	mov	r3, r2
 8010af2:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8010af4:	79fb      	ldrb	r3, [r7, #7]
 8010af6:	2b03      	cmp	r3, #3
 8010af8:	d82a      	bhi.n	8010b50 <lcd_clear_time_unit+0x6c>
 8010afa:	a201      	add	r2, pc, #4	; (adr r2, 8010b00 <lcd_clear_time_unit+0x1c>)
 8010afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b00:	08010b11 	.word	0x08010b11
 8010b04:	08010b21 	.word	0x08010b21
 8010b08:	08010b31 	.word	0x08010b31
 8010b0c:	08010b41 	.word	0x08010b41
    {
        case H:
            g_lcd_map[REG_5] &= ~(1 << BIT_6);
 8010b10:	4b14      	ldr	r3, [pc, #80]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b12:	795b      	ldrb	r3, [r3, #5]
 8010b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	4b12      	ldr	r3, [pc, #72]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b1c:	715a      	strb	r2, [r3, #5]
        break;
 8010b1e:	e018      	b.n	8010b52 <lcd_clear_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] &= ~(1 << BIT_5);
 8010b20:	4b10      	ldr	r3, [pc, #64]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b22:	7a5b      	ldrb	r3, [r3, #9]
 8010b24:	f023 0320 	bic.w	r3, r3, #32
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	4b0e      	ldr	r3, [pc, #56]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b2c:	725a      	strb	r2, [r3, #9]
        break;
 8010b2e:	e010      	b.n	8010b52 <lcd_clear_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] &= ~(1 << BIT_5);
 8010b30:	4b0c      	ldr	r3, [pc, #48]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b32:	7a9b      	ldrb	r3, [r3, #10]
 8010b34:	f023 0320 	bic.w	r3, r3, #32
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	4b0a      	ldr	r3, [pc, #40]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b3c:	729a      	strb	r2, [r3, #10]
        break;
 8010b3e:	e008      	b.n	8010b52 <lcd_clear_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] &= ~(1 << BIT_7);
 8010b40:	4b08      	ldr	r3, [pc, #32]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b42:	7a5b      	ldrb	r3, [r3, #9]
 8010b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	4b06      	ldr	r3, [pc, #24]	; (8010b64 <lcd_clear_time_unit+0x80>)
 8010b4c:	725a      	strb	r2, [r3, #9]
        break;
 8010b4e:	e000      	b.n	8010b52 <lcd_clear_time_unit+0x6e>
        default:
        break;
 8010b50:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010b52:	79bb      	ldrb	r3, [r7, #6]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f001 fb2f 	bl	80121b8 <pcf8553_blink>
}
 8010b5a:	bf00      	nop
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20001d9c 	.word	0x20001d9c

08010b68 <lcd_clear_vol_unit>:

void lcd_clear_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	4603      	mov	r3, r0
 8010b70:	460a      	mov	r2, r1
 8010b72:	71fb      	strb	r3, [r7, #7]
 8010b74:	4613      	mov	r3, r2
 8010b76:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8010b78:	79fb      	ldrb	r3, [r7, #7]
 8010b7a:	2b06      	cmp	r3, #6
 8010b7c:	f200 81e3 	bhi.w	8010f46 <lcd_clear_vol_unit+0x3de>
 8010b80:	a201      	add	r2, pc, #4	; (adr r2, 8010b88 <lcd_clear_vol_unit+0x20>)
 8010b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b86:	bf00      	nop
 8010b88:	08010ba5 	.word	0x08010ba5
 8010b8c:	08010c97 	.word	0x08010c97
 8010b90:	08010bfb 	.word	0x08010bfb
 8010b94:	08010e0d 	.word	0x08010e0d
 8010b98:	08010d41 	.word	0x08010d41
 8010b9c:	08010e8d 	.word	0x08010e8d
 8010ba0:	08010f0d 	.word	0x08010f0d
    {
        case LT:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010ba4:	4b98      	ldr	r3, [pc, #608]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010ba6:	7bdb      	ldrb	r3, [r3, #15]
 8010ba8:	f023 0320 	bic.w	r3, r3, #32
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	4b96      	ldr	r3, [pc, #600]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bb0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010bb2:	4b95      	ldr	r3, [pc, #596]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	f023 0320 	bic.w	r3, r3, #32
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	4b92      	ldr	r3, [pc, #584]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bbe:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010bc0:	4b91      	ldr	r3, [pc, #580]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bc2:	795b      	ldrb	r3, [r3, #5]
 8010bc4:	f023 0320 	bic.w	r3, r3, #32
 8010bc8:	b2da      	uxtb	r2, r3
 8010bca:	4b8f      	ldr	r3, [pc, #572]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bcc:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010bce:	4b8e      	ldr	r3, [pc, #568]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bd0:	7b9b      	ldrb	r3, [r3, #14]
 8010bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	4b8b      	ldr	r3, [pc, #556]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bda:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] &= ~(1 << BIT_0);
 8010bdc:	4b8a      	ldr	r3, [pc, #552]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bde:	7a9b      	ldrb	r3, [r3, #10]
 8010be0:	f023 0301 	bic.w	r3, r3, #1
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	4b88      	ldr	r3, [pc, #544]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010be8:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] &= ~(1 << BIT_6);
 8010bea:	4b87      	ldr	r3, [pc, #540]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bec:	7a5b      	ldrb	r3, [r3, #9]
 8010bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	4b84      	ldr	r3, [pc, #528]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bf6:	725a      	strb	r2, [r3, #9]
        break;
 8010bf8:	e1a6      	b.n	8010f48 <lcd_clear_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010bfa:	4b83      	ldr	r3, [pc, #524]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010bfc:	7bdb      	ldrb	r3, [r3, #15]
 8010bfe:	f023 0320 	bic.w	r3, r3, #32
 8010c02:	b2da      	uxtb	r2, r3
 8010c04:	4b80      	ldr	r3, [pc, #512]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c06:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010c08:	4b7f      	ldr	r3, [pc, #508]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c0a:	7bdb      	ldrb	r3, [r3, #15]
 8010c0c:	f023 0310 	bic.w	r3, r3, #16
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	4b7d      	ldr	r3, [pc, #500]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c14:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010c16:	4b7c      	ldr	r3, [pc, #496]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c18:	7bdb      	ldrb	r3, [r3, #15]
 8010c1a:	f023 0304 	bic.w	r3, r3, #4
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	4b79      	ldr	r3, [pc, #484]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c22:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010c24:	4b78      	ldr	r3, [pc, #480]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	f023 0320 	bic.w	r3, r3, #32
 8010c2c:	b2da      	uxtb	r2, r3
 8010c2e:	4b76      	ldr	r3, [pc, #472]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c30:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_4);
 8010c32:	4b75      	ldr	r3, [pc, #468]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c34:	795b      	ldrb	r3, [r3, #5]
 8010c36:	f023 0310 	bic.w	r3, r3, #16
 8010c3a:	b2da      	uxtb	r2, r3
 8010c3c:	4b72      	ldr	r3, [pc, #456]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c3e:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010c40:	4b71      	ldr	r3, [pc, #452]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c42:	7b9b      	ldrb	r3, [r3, #14]
 8010c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	4b6f      	ldr	r3, [pc, #444]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c4c:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010c4e:	4b6e      	ldr	r3, [pc, #440]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c50:	7bdb      	ldrb	r3, [r3, #15]
 8010c52:	f023 0302 	bic.w	r3, r3, #2
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	4b6b      	ldr	r3, [pc, #428]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c5a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010c5c:	4b6a      	ldr	r3, [pc, #424]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	f023 0301 	bic.w	r3, r3, #1
 8010c64:	b2da      	uxtb	r2, r3
 8010c66:	4b68      	ldr	r3, [pc, #416]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c68:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010c6a:	4b67      	ldr	r3, [pc, #412]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	f023 0302 	bic.w	r3, r3, #2
 8010c72:	b2da      	uxtb	r2, r3
 8010c74:	4b64      	ldr	r3, [pc, #400]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c76:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010c78:	4b63      	ldr	r3, [pc, #396]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c7a:	791b      	ldrb	r3, [r3, #4]
 8010c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	4b61      	ldr	r3, [pc, #388]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c84:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010c86:	4b60      	ldr	r3, [pc, #384]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c88:	795b      	ldrb	r3, [r3, #5]
 8010c8a:	f023 0302 	bic.w	r3, r3, #2
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	4b5d      	ldr	r3, [pc, #372]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c92:	715a      	strb	r2, [r3, #5]
        break;
 8010c94:	e158      	b.n	8010f48 <lcd_clear_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010c96:	4b5c      	ldr	r3, [pc, #368]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010c98:	7bdb      	ldrb	r3, [r3, #15]
 8010c9a:	f023 0320 	bic.w	r3, r3, #32
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	4b59      	ldr	r3, [pc, #356]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010ca2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] &= ~(1 << BIT_2);
 8010ca4:	4b58      	ldr	r3, [pc, #352]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010ca6:	7a9b      	ldrb	r3, [r3, #10]
 8010ca8:	f023 0304 	bic.w	r3, r3, #4
 8010cac:	b2da      	uxtb	r2, r3
 8010cae:	4b56      	ldr	r3, [pc, #344]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cb0:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_4);
 8010cb2:	4b55      	ldr	r3, [pc, #340]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cb4:	7bdb      	ldrb	r3, [r3, #15]
 8010cb6:	f023 0310 	bic.w	r3, r3, #16
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	4b52      	ldr	r3, [pc, #328]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cbe:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010cc0:	4b51      	ldr	r3, [pc, #324]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cc2:	7bdb      	ldrb	r3, [r3, #15]
 8010cc4:	f023 0308 	bic.w	r3, r3, #8
 8010cc8:	b2da      	uxtb	r2, r3
 8010cca:	4b4f      	ldr	r3, [pc, #316]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010ccc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010cce:	4b4e      	ldr	r3, [pc, #312]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	f023 0320 	bic.w	r3, r3, #32
 8010cd6:	b2da      	uxtb	r2, r3
 8010cd8:	4b4b      	ldr	r3, [pc, #300]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cda:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010cdc:	4b4a      	ldr	r3, [pc, #296]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	f023 0308 	bic.w	r3, r3, #8
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	4b48      	ldr	r3, [pc, #288]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010ce8:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010cea:	4b47      	ldr	r3, [pc, #284]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cec:	7b9b      	ldrb	r3, [r3, #14]
 8010cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	4b44      	ldr	r3, [pc, #272]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cf6:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010cf8:	4b43      	ldr	r3, [pc, #268]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010cfa:	7cdb      	ldrb	r3, [r3, #19]
 8010cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	4b41      	ldr	r3, [pc, #260]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d04:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010d06:	4b40      	ldr	r3, [pc, #256]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d08:	7cdb      	ldrb	r3, [r3, #19]
 8010d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	4b3d      	ldr	r3, [pc, #244]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d12:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010d14:	4b3c      	ldr	r3, [pc, #240]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	f023 0301 	bic.w	r3, r3, #1
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	4b3a      	ldr	r3, [pc, #232]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d20:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] &= ~(1 << BIT_7);
 8010d22:	4b39      	ldr	r3, [pc, #228]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d24:	791b      	ldrb	r3, [r3, #4]
 8010d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	4b36      	ldr	r3, [pc, #216]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d2e:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010d30:	4b35      	ldr	r3, [pc, #212]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d32:	795b      	ldrb	r3, [r3, #5]
 8010d34:	f023 0302 	bic.w	r3, r3, #2
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	4b33      	ldr	r3, [pc, #204]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d3c:	715a      	strb	r2, [r3, #5]
        break;
 8010d3e:	e103      	b.n	8010f48 <lcd_clear_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010d40:	4b31      	ldr	r3, [pc, #196]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d42:	7a9b      	ldrb	r3, [r3, #10]
 8010d44:	f023 0308 	bic.w	r3, r3, #8
 8010d48:	b2da      	uxtb	r2, r3
 8010d4a:	4b2f      	ldr	r3, [pc, #188]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d4c:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] &= ~(1 << BIT_4);
 8010d4e:	4b2e      	ldr	r3, [pc, #184]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d50:	7a9b      	ldrb	r3, [r3, #10]
 8010d52:	f023 0310 	bic.w	r3, r3, #16
 8010d56:	b2da      	uxtb	r2, r3
 8010d58:	4b2b      	ldr	r3, [pc, #172]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d5a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010d5c:	4b2a      	ldr	r3, [pc, #168]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d5e:	7bdb      	ldrb	r3, [r3, #15]
 8010d60:	f023 0308 	bic.w	r3, r3, #8
 8010d64:	b2da      	uxtb	r2, r3
 8010d66:	4b28      	ldr	r3, [pc, #160]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d68:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010d6a:	4b27      	ldr	r3, [pc, #156]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	f023 0310 	bic.w	r3, r3, #16
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	4b24      	ldr	r3, [pc, #144]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d76:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_2);
 8010d78:	4b23      	ldr	r3, [pc, #140]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d7a:	795b      	ldrb	r3, [r3, #5]
 8010d7c:	f023 0304 	bic.w	r3, r3, #4
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	4b21      	ldr	r3, [pc, #132]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d84:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010d86:	4b20      	ldr	r3, [pc, #128]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	f023 0308 	bic.w	r3, r3, #8
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	4b1d      	ldr	r3, [pc, #116]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d92:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010d94:	4b1c      	ldr	r3, [pc, #112]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010d96:	795b      	ldrb	r3, [r3, #5]
 8010d98:	f023 0320 	bic.w	r3, r3, #32
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	4b1a      	ldr	r3, [pc, #104]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010da0:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010da2:	4b19      	ldr	r3, [pc, #100]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010da4:	7b9b      	ldrb	r3, [r3, #14]
 8010da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	4b16      	ldr	r3, [pc, #88]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010dae:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010db0:	4b15      	ldr	r3, [pc, #84]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010db2:	7bdb      	ldrb	r3, [r3, #15]
 8010db4:	f023 0302 	bic.w	r3, r3, #2
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	4b13      	ldr	r3, [pc, #76]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010dbc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] &= ~(1 << BIT_7);
 8010dbe:	4b12      	ldr	r3, [pc, #72]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010dc0:	7cdb      	ldrb	r3, [r3, #19]
 8010dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	4b0f      	ldr	r3, [pc, #60]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010dca:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010dcc:	4b0e      	ldr	r3, [pc, #56]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010dce:	7cdb      	ldrb	r3, [r3, #19]
 8010dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	4b0c      	ldr	r3, [pc, #48]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010dd8:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010dda:	4b0b      	ldr	r3, [pc, #44]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	f023 0301 	bic.w	r3, r3, #1
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	4b08      	ldr	r3, [pc, #32]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010de6:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010de8:	4b07      	ldr	r3, [pc, #28]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f023 0302 	bic.w	r3, r3, #2
 8010df0:	b2da      	uxtb	r2, r3
 8010df2:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010df4:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_0);
 8010df6:	4b04      	ldr	r3, [pc, #16]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010df8:	795b      	ldrb	r3, [r3, #5]
 8010dfa:	f023 0301 	bic.w	r3, r3, #1
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	4b01      	ldr	r3, [pc, #4]	; (8010e08 <lcd_clear_vol_unit+0x2a0>)
 8010e02:	715a      	strb	r2, [r3, #5]
        break;
 8010e04:	e0a0      	b.n	8010f48 <lcd_clear_vol_unit+0x3e0>
 8010e06:	bf00      	nop
 8010e08:	20001d9c 	.word	0x20001d9c
        case GL:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010e0c:	4b52      	ldr	r3, [pc, #328]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e0e:	7a9b      	ldrb	r3, [r3, #10]
 8010e10:	f023 0308 	bic.w	r3, r3, #8
 8010e14:	b2da      	uxtb	r2, r3
 8010e16:	4b50      	ldr	r3, [pc, #320]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e18:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e1a:	4b4f      	ldr	r3, [pc, #316]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e1c:	7bdb      	ldrb	r3, [r3, #15]
 8010e1e:	f023 0320 	bic.w	r3, r3, #32
 8010e22:	b2da      	uxtb	r2, r3
 8010e24:	4b4c      	ldr	r3, [pc, #304]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e26:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010e28:	4b4b      	ldr	r3, [pc, #300]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	f023 0310 	bic.w	r3, r3, #16
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	4b49      	ldr	r3, [pc, #292]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e34:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_5);
 8010e36:	4b48      	ldr	r3, [pc, #288]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	f023 0320 	bic.w	r3, r3, #32
 8010e3e:	b2da      	uxtb	r2, r3
 8010e40:	4b45      	ldr	r3, [pc, #276]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e42:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] &= ~(1 << BIT_3);
 8010e44:	4b44      	ldr	r3, [pc, #272]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	f023 0308 	bic.w	r3, r3, #8
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	4b42      	ldr	r3, [pc, #264]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e50:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_5);
 8010e52:	4b41      	ldr	r3, [pc, #260]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e54:	795b      	ldrb	r3, [r3, #5]
 8010e56:	f023 0320 	bic.w	r3, r3, #32
 8010e5a:	b2da      	uxtb	r2, r3
 8010e5c:	4b3e      	ldr	r3, [pc, #248]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e5e:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010e60:	4b3d      	ldr	r3, [pc, #244]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e62:	7bdb      	ldrb	r3, [r3, #15]
 8010e64:	f023 0302 	bic.w	r3, r3, #2
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	4b3b      	ldr	r3, [pc, #236]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e6c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010e6e:	4b3a      	ldr	r3, [pc, #232]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	f023 0302 	bic.w	r3, r3, #2
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	4b37      	ldr	r3, [pc, #220]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e7a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010e7c:	4b36      	ldr	r3, [pc, #216]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e7e:	795b      	ldrb	r3, [r3, #5]
 8010e80:	f023 0302 	bic.w	r3, r3, #2
 8010e84:	b2da      	uxtb	r2, r3
 8010e86:	4b34      	ldr	r3, [pc, #208]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e88:	715a      	strb	r2, [r3, #5]
        break;
 8010e8a:	e05d      	b.n	8010f48 <lcd_clear_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] &= ~(1 << BIT_3);
 8010e8c:	4b32      	ldr	r3, [pc, #200]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e8e:	7a9b      	ldrb	r3, [r3, #10]
 8010e90:	f023 0308 	bic.w	r3, r3, #8
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	4b30      	ldr	r3, [pc, #192]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e98:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] &= ~(1 << BIT_5);
 8010e9a:	4b2f      	ldr	r3, [pc, #188]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010e9c:	7bdb      	ldrb	r3, [r3, #15]
 8010e9e:	f023 0320 	bic.w	r3, r3, #32
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	4b2c      	ldr	r3, [pc, #176]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ea6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_3);
 8010ea8:	4b2b      	ldr	r3, [pc, #172]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010eaa:	7bdb      	ldrb	r3, [r3, #15]
 8010eac:	f023 0308 	bic.w	r3, r3, #8
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	4b29      	ldr	r3, [pc, #164]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010eb4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010eb6:	4b28      	ldr	r3, [pc, #160]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010eb8:	7bdb      	ldrb	r3, [r3, #15]
 8010eba:	f023 0304 	bic.w	r3, r3, #4
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	4b25      	ldr	r3, [pc, #148]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ec2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010ec4:	4b24      	ldr	r3, [pc, #144]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	f023 0310 	bic.w	r3, r3, #16
 8010ecc:	b2da      	uxtb	r2, r3
 8010ece:	4b22      	ldr	r3, [pc, #136]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ed0:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] &= ~(1 << BIT_7);
 8010ed2:	4b21      	ldr	r3, [pc, #132]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ed4:	7b9b      	ldrb	r3, [r3, #14]
 8010ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010eda:	b2da      	uxtb	r2, r3
 8010edc:	4b1e      	ldr	r3, [pc, #120]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ede:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] &= ~(1 << BIT_1);
 8010ee0:	4b1d      	ldr	r3, [pc, #116]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ee2:	7bdb      	ldrb	r3, [r3, #15]
 8010ee4:	f023 0302 	bic.w	r3, r3, #2
 8010ee8:	b2da      	uxtb	r2, r3
 8010eea:	4b1b      	ldr	r3, [pc, #108]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010eec:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_1);
 8010eee:	4b1a      	ldr	r3, [pc, #104]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	f023 0302 	bic.w	r3, r3, #2
 8010ef6:	b2da      	uxtb	r2, r3
 8010ef8:	4b17      	ldr	r3, [pc, #92]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010efa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] &= ~(1 << BIT_1);
 8010efc:	4b16      	ldr	r3, [pc, #88]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010efe:	795b      	ldrb	r3, [r3, #5]
 8010f00:	f023 0302 	bic.w	r3, r3, #2
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	4b14      	ldr	r3, [pc, #80]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f08:	715a      	strb	r2, [r3, #5]
        break;
 8010f0a:	e01d      	b.n	8010f48 <lcd_clear_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] &= ~(1 << BIT_2);
 8010f0c:	4b12      	ldr	r3, [pc, #72]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f0e:	7bdb      	ldrb	r3, [r3, #15]
 8010f10:	f023 0304 	bic.w	r3, r3, #4
 8010f14:	b2da      	uxtb	r2, r3
 8010f16:	4b10      	ldr	r3, [pc, #64]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f18:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] &= ~(1 << BIT_4);
 8010f1a:	4b0f      	ldr	r3, [pc, #60]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	f023 0310 	bic.w	r3, r3, #16
 8010f22:	b2da      	uxtb	r2, r3
 8010f24:	4b0c      	ldr	r3, [pc, #48]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f26:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] &= ~(1 << BIT_6);
 8010f28:	4b0b      	ldr	r3, [pc, #44]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f2a:	7cdb      	ldrb	r3, [r3, #19]
 8010f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f30:	b2da      	uxtb	r2, r3
 8010f32:	4b09      	ldr	r3, [pc, #36]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f34:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] &= ~(1 << BIT_0);
 8010f36:	4b08      	ldr	r3, [pc, #32]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	f023 0301 	bic.w	r3, r3, #1
 8010f3e:	b2da      	uxtb	r2, r3
 8010f40:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <lcd_clear_vol_unit+0x3f0>)
 8010f42:	701a      	strb	r2, [r3, #0]
        break;
 8010f44:	e000      	b.n	8010f48 <lcd_clear_vol_unit+0x3e0>
        default:
        break;
 8010f46:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8010f48:	79bb      	ldrb	r3, [r7, #6]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f001 f934 	bl	80121b8 <pcf8553_blink>
}
 8010f50:	bf00      	nop
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	20001d9c 	.word	0x20001d9c

08010f5c <lcd_init>:
 * borrándola.
 * @param  None
 * @retval None
 */
void lcd_init()
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	af00      	add	r7, sp, #0
    pcf8553_init();
 8010f60:	f001 f99c 	bl	801229c <pcf8553_init>
}
 8010f64:	bf00      	nop
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <lcd_put_char>:
 * elegida.
 * @param caracter a escribir tipo char, columna y fila de tipo uint8_t
 * @retval None
 */
void lcd_put_char(char c, uint8_t col, uint8_t row)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	4603      	mov	r3, r0
 8010f70:	71fb      	strb	r3, [r7, #7]
 8010f72:	460b      	mov	r3, r1
 8010f74:	71bb      	strb	r3, [r7, #6]
 8010f76:	4613      	mov	r3, r2
 8010f78:	717b      	strb	r3, [r7, #5]
    g_row = row + 1;
 8010f7a:	797b      	ldrb	r3, [r7, #5]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	b2da      	uxtb	r2, r3
 8010f80:	4bde      	ldr	r3, [pc, #888]	; (80112fc <lcd_put_char+0x394>)
 8010f82:	701a      	strb	r2, [r3, #0]
     *
     * No se activa esta funcionalidad si se está en el menú de configuración,
     * debido a que entra en conflicto con la funcionalidad del parpadeo de los
     * campos a modificar.
     */
    if(in_configuration == 0)
 8010f84:	4bde      	ldr	r3, [pc, #888]	; (8011300 <lcd_put_char+0x398>)
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10a      	bne.n	8010fa2 <lcd_put_char+0x3a>
    {
        if (g_buf[row][col] == c)
 8010f8c:	797a      	ldrb	r2, [r7, #5]
 8010f8e:	79bb      	ldrb	r3, [r7, #6]
 8010f90:	49dc      	ldr	r1, [pc, #880]	; (8011304 <lcd_put_char+0x39c>)
 8010f92:	00d2      	lsls	r2, r2, #3
 8010f94:	440a      	add	r2, r1
 8010f96:	4413      	add	r3, r2
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	79fa      	ldrb	r2, [r7, #7]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	f000 81d6 	beq.w	801134e <lcd_put_char+0x3e6>
        {
            return;
        }
    }

    g_buf[row][col] = c;
 8010fa2:	797a      	ldrb	r2, [r7, #5]
 8010fa4:	79bb      	ldrb	r3, [r7, #6]
 8010fa6:	49d7      	ldr	r1, [pc, #860]	; (8011304 <lcd_put_char+0x39c>)
 8010fa8:	00d2      	lsls	r2, r2, #3
 8010faa:	440a      	add	r2, r1
 8010fac:	4413      	add	r3, r2
 8010fae:	79fa      	ldrb	r2, [r7, #7]
 8010fb0:	701a      	strb	r2, [r3, #0]

    switch (row)
 8010fb2:	797b      	ldrb	r3, [r7, #5]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d002      	beq.n	8010fbe <lcd_put_char+0x56>
 8010fb8:	2b01      	cmp	r3, #1
 8010fba:	d008      	beq.n	8010fce <lcd_put_char+0x66>
                return;
            }

        break;
        default:
            return;
 8010fbc:	e1ce      	b.n	801135c <lcd_put_char+0x3f4>
            if (col < LINE_0_DIGITS - 1)
 8010fbe:	79bb      	ldrb	r3, [r7, #6]
 8010fc0:	2b07      	cmp	r3, #7
 8010fc2:	f200 81c6 	bhi.w	8011352 <lcd_put_char+0x3ea>
                g_col = col;
 8010fc6:	4ad0      	ldr	r2, [pc, #832]	; (8011308 <lcd_put_char+0x3a0>)
 8010fc8:	79bb      	ldrb	r3, [r7, #6]
 8010fca:	7013      	strb	r3, [r2, #0]
        break;
 8010fcc:	e00a      	b.n	8010fe4 <lcd_put_char+0x7c>
            if (col < LINE_1_DIGITS - 1)
 8010fce:	79bb      	ldrb	r3, [r7, #6]
 8010fd0:	2b06      	cmp	r3, #6
 8010fd2:	f200 81c0 	bhi.w	8011356 <lcd_put_char+0x3ee>
                g_col = 6 - col; // @suppress("Avoid magic numbers")
 8010fd6:	79bb      	ldrb	r3, [r7, #6]
 8010fd8:	f1c3 0306 	rsb	r3, r3, #6
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	4bca      	ldr	r3, [pc, #808]	; (8011308 <lcd_put_char+0x3a0>)
 8010fe0:	701a      	strb	r2, [r3, #0]
        break;
 8010fe2:	bf00      	nop
        break;
    }

    switch (c)
 8010fe4:	79fb      	ldrb	r3, [r7, #7]
 8010fe6:	3b20      	subs	r3, #32
 8010fe8:	2b19      	cmp	r3, #25
 8010fea:	f200 81b6 	bhi.w	801135a <lcd_put_char+0x3f2>
 8010fee:	a201      	add	r2, pc, #4	; (adr r2, 8010ff4 <lcd_put_char+0x8c>)
 8010ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff4:	0801105d 	.word	0x0801105d
 8010ff8:	0801135b 	.word	0x0801135b
 8010ffc:	0801135b 	.word	0x0801135b
 8011000:	0801135b 	.word	0x0801135b
 8011004:	0801135b 	.word	0x0801135b
 8011008:	0801135b 	.word	0x0801135b
 801100c:	0801135b 	.word	0x0801135b
 8011010:	0801135b 	.word	0x0801135b
 8011014:	0801135b 	.word	0x0801135b
 8011018:	0801135b 	.word	0x0801135b
 801101c:	0801135b 	.word	0x0801135b
 8011020:	0801135b 	.word	0x0801135b
 8011024:	0801135b 	.word	0x0801135b
 8011028:	0801135b 	.word	0x0801135b
 801102c:	0801109f 	.word	0x0801109f
 8011030:	0801135b 	.word	0x0801135b
 8011034:	080110a9 	.word	0x080110a9
 8011038:	080110eb 	.word	0x080110eb
 801103c:	0801112d 	.word	0x0801112d
 8011040:	0801116f 	.word	0x0801116f
 8011044:	080111b1 	.word	0x080111b1
 8011048:	080111f3 	.word	0x080111f3
 801104c:	08011235 	.word	0x08011235
 8011050:	08011277 	.word	0x08011277
 8011054:	080112b9 	.word	0x080112b9
 8011058:	0801130d 	.word	0x0801130d
    {
        case ' ':
            lcd_write_line(SEG_A, 0);
 801105c:	2100      	movs	r1, #0
 801105e:	2000      	movs	r0, #0
 8011060:	f000 ffb0 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011064:	2100      	movs	r1, #0
 8011066:	2001      	movs	r0, #1
 8011068:	f000 ffac 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 801106c:	2100      	movs	r1, #0
 801106e:	2002      	movs	r0, #2
 8011070:	f000 ffa8 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011074:	2100      	movs	r1, #0
 8011076:	2003      	movs	r0, #3
 8011078:	f000 ffa4 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801107c:	2100      	movs	r1, #0
 801107e:	2004      	movs	r0, #4
 8011080:	f000 ffa0 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 8011084:	2100      	movs	r1, #0
 8011086:	2005      	movs	r0, #5
 8011088:	f000 ff9c 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801108c:	2100      	movs	r1, #0
 801108e:	2006      	movs	r0, #6
 8011090:	f000 ff98 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011094:	2100      	movs	r1, #0
 8011096:	2007      	movs	r0, #7
 8011098:	f000 ff94 	bl	8011fc4 <lcd_write_line>
        break;
 801109c:	e15e      	b.n	801135c <lcd_put_char+0x3f4>
        case '.':
            lcd_write_line(SEG_H, 1);
 801109e:	2101      	movs	r1, #1
 80110a0:	2007      	movs	r0, #7
 80110a2:	f000 ff8f 	bl	8011fc4 <lcd_write_line>
        break;
 80110a6:	e159      	b.n	801135c <lcd_put_char+0x3f4>
        case '0':
            lcd_write_line(SEG_A, 1);
 80110a8:	2101      	movs	r1, #1
 80110aa:	2000      	movs	r0, #0
 80110ac:	f000 ff8a 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80110b0:	2101      	movs	r1, #1
 80110b2:	2001      	movs	r0, #1
 80110b4:	f000 ff86 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80110b8:	2101      	movs	r1, #1
 80110ba:	2002      	movs	r0, #2
 80110bc:	f000 ff82 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 80110c0:	2100      	movs	r1, #0
 80110c2:	2003      	movs	r0, #3
 80110c4:	f000 ff7e 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80110c8:	2101      	movs	r1, #1
 80110ca:	2004      	movs	r0, #4
 80110cc:	f000 ff7a 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80110d0:	2101      	movs	r1, #1
 80110d2:	2005      	movs	r0, #5
 80110d4:	f000 ff76 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80110d8:	2101      	movs	r1, #1
 80110da:	2006      	movs	r0, #6
 80110dc:	f000 ff72 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80110e0:	2100      	movs	r1, #0
 80110e2:	2007      	movs	r0, #7
 80110e4:	f000 ff6e 	bl	8011fc4 <lcd_write_line>
        break;
 80110e8:	e138      	b.n	801135c <lcd_put_char+0x3f4>
        case '1':
            lcd_write_line(SEG_A, 0);
 80110ea:	2100      	movs	r1, #0
 80110ec:	2000      	movs	r0, #0
 80110ee:	f000 ff69 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80110f2:	2100      	movs	r1, #0
 80110f4:	2001      	movs	r0, #1
 80110f6:	f000 ff65 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80110fa:	2101      	movs	r1, #1
 80110fc:	2002      	movs	r0, #2
 80110fe:	f000 ff61 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 8011102:	2100      	movs	r1, #0
 8011104:	2003      	movs	r0, #3
 8011106:	f000 ff5d 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801110a:	2100      	movs	r1, #0
 801110c:	2004      	movs	r0, #4
 801110e:	f000 ff59 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011112:	2101      	movs	r1, #1
 8011114:	2005      	movs	r0, #5
 8011116:	f000 ff55 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 801111a:	2100      	movs	r1, #0
 801111c:	2006      	movs	r0, #6
 801111e:	f000 ff51 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011122:	2100      	movs	r1, #0
 8011124:	2007      	movs	r0, #7
 8011126:	f000 ff4d 	bl	8011fc4 <lcd_write_line>
        break;
 801112a:	e117      	b.n	801135c <lcd_put_char+0x3f4>
        case '2':
            lcd_write_line(SEG_A, 1);
 801112c:	2101      	movs	r1, #1
 801112e:	2000      	movs	r0, #0
 8011130:	f000 ff48 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 8011134:	2101      	movs	r1, #1
 8011136:	2001      	movs	r0, #1
 8011138:	f000 ff44 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 0);
 801113c:	2100      	movs	r1, #0
 801113e:	2002      	movs	r0, #2
 8011140:	f000 ff40 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011144:	2101      	movs	r1, #1
 8011146:	2003      	movs	r0, #3
 8011148:	f000 ff3c 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801114c:	2100      	movs	r1, #0
 801114e:	2004      	movs	r0, #4
 8011150:	f000 ff38 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011154:	2101      	movs	r1, #1
 8011156:	2005      	movs	r0, #5
 8011158:	f000 ff34 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801115c:	2101      	movs	r1, #1
 801115e:	2006      	movs	r0, #6
 8011160:	f000 ff30 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011164:	2100      	movs	r1, #0
 8011166:	2007      	movs	r0, #7
 8011168:	f000 ff2c 	bl	8011fc4 <lcd_write_line>
        break;
 801116c:	e0f6      	b.n	801135c <lcd_put_char+0x3f4>
        case '3':
            lcd_write_line(SEG_A, 1);
 801116e:	2101      	movs	r1, #1
 8011170:	2000      	movs	r0, #0
 8011172:	f000 ff27 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011176:	2100      	movs	r1, #0
 8011178:	2001      	movs	r0, #1
 801117a:	f000 ff23 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801117e:	2101      	movs	r1, #1
 8011180:	2002      	movs	r0, #2
 8011182:	f000 ff1f 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011186:	2101      	movs	r1, #1
 8011188:	2003      	movs	r0, #3
 801118a:	f000 ff1b 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 801118e:	2100      	movs	r1, #0
 8011190:	2004      	movs	r0, #4
 8011192:	f000 ff17 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011196:	2101      	movs	r1, #1
 8011198:	2005      	movs	r0, #5
 801119a:	f000 ff13 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801119e:	2101      	movs	r1, #1
 80111a0:	2006      	movs	r0, #6
 80111a2:	f000 ff0f 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80111a6:	2100      	movs	r1, #0
 80111a8:	2007      	movs	r0, #7
 80111aa:	f000 ff0b 	bl	8011fc4 <lcd_write_line>
        break;
 80111ae:	e0d5      	b.n	801135c <lcd_put_char+0x3f4>
        case '4':
            lcd_write_line(SEG_A, 0);
 80111b0:	2100      	movs	r1, #0
 80111b2:	2000      	movs	r0, #0
 80111b4:	f000 ff06 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80111b8:	2100      	movs	r1, #0
 80111ba:	2001      	movs	r0, #1
 80111bc:	f000 ff02 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80111c0:	2101      	movs	r1, #1
 80111c2:	2002      	movs	r0, #2
 80111c4:	f000 fefe 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80111c8:	2101      	movs	r1, #1
 80111ca:	2003      	movs	r0, #3
 80111cc:	f000 fefa 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80111d0:	2101      	movs	r1, #1
 80111d2:	2004      	movs	r0, #4
 80111d4:	f000 fef6 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80111d8:	2101      	movs	r1, #1
 80111da:	2005      	movs	r0, #5
 80111dc:	f000 fef2 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 0);
 80111e0:	2100      	movs	r1, #0
 80111e2:	2006      	movs	r0, #6
 80111e4:	f000 feee 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80111e8:	2100      	movs	r1, #0
 80111ea:	2007      	movs	r0, #7
 80111ec:	f000 feea 	bl	8011fc4 <lcd_write_line>
        break;
 80111f0:	e0b4      	b.n	801135c <lcd_put_char+0x3f4>
        case '5':
            lcd_write_line(SEG_A, 1);
 80111f2:	2101      	movs	r1, #1
 80111f4:	2000      	movs	r0, #0
 80111f6:	f000 fee5 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 80111fa:	2100      	movs	r1, #0
 80111fc:	2001      	movs	r0, #1
 80111fe:	f000 fee1 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011202:	2101      	movs	r1, #1
 8011204:	2002      	movs	r0, #2
 8011206:	f000 fedd 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801120a:	2101      	movs	r1, #1
 801120c:	2003      	movs	r0, #3
 801120e:	f000 fed9 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011212:	2101      	movs	r1, #1
 8011214:	2004      	movs	r0, #4
 8011216:	f000 fed5 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801121a:	2100      	movs	r1, #0
 801121c:	2005      	movs	r0, #5
 801121e:	f000 fed1 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011222:	2101      	movs	r1, #1
 8011224:	2006      	movs	r0, #6
 8011226:	f000 fecd 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801122a:	2100      	movs	r1, #0
 801122c:	2007      	movs	r0, #7
 801122e:	f000 fec9 	bl	8011fc4 <lcd_write_line>
        break;
 8011232:	e093      	b.n	801135c <lcd_put_char+0x3f4>
        case '6':
            lcd_write_line(SEG_A, 1);
 8011234:	2101      	movs	r1, #1
 8011236:	2000      	movs	r0, #0
 8011238:	f000 fec4 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 801123c:	2101      	movs	r1, #1
 801123e:	2001      	movs	r0, #1
 8011240:	f000 fec0 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011244:	2101      	movs	r1, #1
 8011246:	2002      	movs	r0, #2
 8011248:	f000 febc 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 801124c:	2101      	movs	r1, #1
 801124e:	2003      	movs	r0, #3
 8011250:	f000 feb8 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 8011254:	2101      	movs	r1, #1
 8011256:	2004      	movs	r0, #4
 8011258:	f000 feb4 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 0);
 801125c:	2100      	movs	r1, #0
 801125e:	2005      	movs	r0, #5
 8011260:	f000 feb0 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 8011264:	2101      	movs	r1, #1
 8011266:	2006      	movs	r0, #6
 8011268:	f000 feac 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 801126c:	2100      	movs	r1, #0
 801126e:	2007      	movs	r0, #7
 8011270:	f000 fea8 	bl	8011fc4 <lcd_write_line>
        break;
 8011274:	e072      	b.n	801135c <lcd_put_char+0x3f4>
        case '7':
            lcd_write_line(SEG_A, 0);
 8011276:	2100      	movs	r1, #0
 8011278:	2000      	movs	r0, #0
 801127a:	f000 fea3 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 801127e:	2100      	movs	r1, #0
 8011280:	2001      	movs	r0, #1
 8011282:	f000 fe9f 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 8011286:	2101      	movs	r1, #1
 8011288:	2002      	movs	r0, #2
 801128a:	f000 fe9b 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 0);
 801128e:	2100      	movs	r1, #0
 8011290:	2003      	movs	r0, #3
 8011292:	f000 fe97 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 0);
 8011296:	2100      	movs	r1, #0
 8011298:	2004      	movs	r0, #4
 801129a:	f000 fe93 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 801129e:	2101      	movs	r1, #1
 80112a0:	2005      	movs	r0, #5
 80112a2:	f000 fe8f 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80112a6:	2101      	movs	r1, #1
 80112a8:	2006      	movs	r0, #6
 80112aa:	f000 fe8b 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80112ae:	2100      	movs	r1, #0
 80112b0:	2007      	movs	r0, #7
 80112b2:	f000 fe87 	bl	8011fc4 <lcd_write_line>
        break;
 80112b6:	e051      	b.n	801135c <lcd_put_char+0x3f4>
        case '8':
            lcd_write_line(SEG_A, 1);
 80112b8:	2101      	movs	r1, #1
 80112ba:	2000      	movs	r0, #0
 80112bc:	f000 fe82 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 1);
 80112c0:	2101      	movs	r1, #1
 80112c2:	2001      	movs	r0, #1
 80112c4:	f000 fe7e 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 80112c8:	2101      	movs	r1, #1
 80112ca:	2002      	movs	r0, #2
 80112cc:	f000 fe7a 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 80112d0:	2101      	movs	r1, #1
 80112d2:	2003      	movs	r0, #3
 80112d4:	f000 fe76 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 80112d8:	2101      	movs	r1, #1
 80112da:	2004      	movs	r0, #4
 80112dc:	f000 fe72 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 80112e0:	2101      	movs	r1, #1
 80112e2:	2005      	movs	r0, #5
 80112e4:	f000 fe6e 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 80112e8:	2101      	movs	r1, #1
 80112ea:	2006      	movs	r0, #6
 80112ec:	f000 fe6a 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 80112f0:	2100      	movs	r1, #0
 80112f2:	2007      	movs	r0, #7
 80112f4:	f000 fe66 	bl	8011fc4 <lcd_write_line>
        break;
 80112f8:	e030      	b.n	801135c <lcd_put_char+0x3f4>
 80112fa:	bf00      	nop
 80112fc:	20001d09 	.word	0x20001d09
 8011300:	20001db8 	.word	0x20001db8
 8011304:	20001cf8 	.word	0x20001cf8
 8011308:	20001d08 	.word	0x20001d08
        case '9':
            lcd_write_line(SEG_A, 0);
 801130c:	2100      	movs	r1, #0
 801130e:	2000      	movs	r0, #0
 8011310:	f000 fe58 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_B, 0);
 8011314:	2100      	movs	r1, #0
 8011316:	2001      	movs	r0, #1
 8011318:	f000 fe54 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_C, 1);
 801131c:	2101      	movs	r1, #1
 801131e:	2002      	movs	r0, #2
 8011320:	f000 fe50 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_D, 1);
 8011324:	2101      	movs	r1, #1
 8011326:	2003      	movs	r0, #3
 8011328:	f000 fe4c 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_E, 1);
 801132c:	2101      	movs	r1, #1
 801132e:	2004      	movs	r0, #4
 8011330:	f000 fe48 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_F, 1);
 8011334:	2101      	movs	r1, #1
 8011336:	2005      	movs	r0, #5
 8011338:	f000 fe44 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_G, 1);
 801133c:	2101      	movs	r1, #1
 801133e:	2006      	movs	r0, #6
 8011340:	f000 fe40 	bl	8011fc4 <lcd_write_line>
            lcd_write_line(SEG_H, 0);
 8011344:	2100      	movs	r1, #0
 8011346:	2007      	movs	r0, #7
 8011348:	f000 fe3c 	bl	8011fc4 <lcd_write_line>
        break;
 801134c:	e006      	b.n	801135c <lcd_put_char+0x3f4>
            return;
 801134e:	bf00      	nop
 8011350:	e004      	b.n	801135c <lcd_put_char+0x3f4>
                return;
 8011352:	bf00      	nop
 8011354:	e002      	b.n	801135c <lcd_put_char+0x3f4>
                return;
 8011356:	bf00      	nop
 8011358:	e000      	b.n	801135c <lcd_put_char+0x3f4>
        default:
        break;
 801135a:	bf00      	nop
    }
}
 801135c:	3708      	adds	r7, #8
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop

08011364 <lcd_refresh>:
 * enviar en dicho buffer y luego escribir todo junto.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_refresh()
{
 8011364:	b580      	push	{r7, lr}
 8011366:	af00      	add	r7, sp, #0
    pcf8553_dump();
 8011368:	f000 ff6c 	bl	8012244 <pcf8553_dump>
}
 801136c:	bf00      	nop
 801136e:	bd80      	pop	{r7, pc}

08011370 <lcd_set_point>:
 * @brief Función que escribe un punto en específico en la pantalla.
 * @param Enumeraciones rows_t y point_t de lcd.h
 * @retval None
 */
void lcd_set_point(rows_t line, point_t point)
{
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	4603      	mov	r3, r0
 8011378:	460a      	mov	r2, r1
 801137a:	71fb      	strb	r3, [r7, #7]
 801137c:	4613      	mov	r3, r2
 801137e:	71bb      	strb	r3, [r7, #6]
    if (line == HIGH_ROW)
 8011380:	79fb      	ldrb	r3, [r7, #7]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d14c      	bne.n	8011420 <lcd_set_point+0xb0>
    {
        switch (point)
 8011386:	79bb      	ldrb	r3, [r7, #6]
 8011388:	2b06      	cmp	r3, #6
 801138a:	f200 808f 	bhi.w	80114ac <lcd_set_point+0x13c>
 801138e:	a201      	add	r2, pc, #4	; (adr r2, 8011394 <lcd_set_point+0x24>)
 8011390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011394:	080113b1 	.word	0x080113b1
 8011398:	080113c1 	.word	0x080113c1
 801139c:	080113d1 	.word	0x080113d1
 80113a0:	080113e1 	.word	0x080113e1
 80113a4:	080113f1 	.word	0x080113f1
 80113a8:	08011401 	.word	0x08011401
 80113ac:	08011411 	.word	0x08011411
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_7);
 80113b0:	4b44      	ldr	r3, [pc, #272]	; (80114c4 <lcd_set_point+0x154>)
 80113b2:	79db      	ldrb	r3, [r3, #7]
 80113b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	4b42      	ldr	r3, [pc, #264]	; (80114c4 <lcd_set_point+0x154>)
 80113bc:	71da      	strb	r2, [r3, #7]
            break;
 80113be:	e07a      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_8] |= (1 << BIT_1);
 80113c0:	4b40      	ldr	r3, [pc, #256]	; (80114c4 <lcd_set_point+0x154>)
 80113c2:	7a1b      	ldrb	r3, [r3, #8]
 80113c4:	f043 0302 	orr.w	r3, r3, #2
 80113c8:	b2da      	uxtb	r2, r3
 80113ca:	4b3e      	ldr	r3, [pc, #248]	; (80114c4 <lcd_set_point+0x154>)
 80113cc:	721a      	strb	r2, [r3, #8]
            break;
 80113ce:	e072      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_8] |= (1 << BIT_3);
 80113d0:	4b3c      	ldr	r3, [pc, #240]	; (80114c4 <lcd_set_point+0x154>)
 80113d2:	7a1b      	ldrb	r3, [r3, #8]
 80113d4:	f043 0308 	orr.w	r3, r3, #8
 80113d8:	b2da      	uxtb	r2, r3
 80113da:	4b3a      	ldr	r3, [pc, #232]	; (80114c4 <lcd_set_point+0x154>)
 80113dc:	721a      	strb	r2, [r3, #8]
            break;
 80113de:	e06a      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_8] |= (1 << BIT_5);
 80113e0:	4b38      	ldr	r3, [pc, #224]	; (80114c4 <lcd_set_point+0x154>)
 80113e2:	7a1b      	ldrb	r3, [r3, #8]
 80113e4:	f043 0320 	orr.w	r3, r3, #32
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	4b36      	ldr	r3, [pc, #216]	; (80114c4 <lcd_set_point+0x154>)
 80113ec:	721a      	strb	r2, [r3, #8]
            break;
 80113ee:	e062      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_8] |= (1 << BIT_7);
 80113f0:	4b34      	ldr	r3, [pc, #208]	; (80114c4 <lcd_set_point+0x154>)
 80113f2:	7a1b      	ldrb	r3, [r3, #8]
 80113f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	4b32      	ldr	r3, [pc, #200]	; (80114c4 <lcd_set_point+0x154>)
 80113fc:	721a      	strb	r2, [r3, #8]
            break;
 80113fe:	e05a      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_9] |= (1 << BIT_1);
 8011400:	4b30      	ldr	r3, [pc, #192]	; (80114c4 <lcd_set_point+0x154>)
 8011402:	7a5b      	ldrb	r3, [r3, #9]
 8011404:	f043 0302 	orr.w	r3, r3, #2
 8011408:	b2da      	uxtb	r2, r3
 801140a:	4b2e      	ldr	r3, [pc, #184]	; (80114c4 <lcd_set_point+0x154>)
 801140c:	725a      	strb	r2, [r3, #9]
            break;
 801140e:	e052      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_6:
                g_lcd_map[REG_9] |= (1 << BIT_3);
 8011410:	4b2c      	ldr	r3, [pc, #176]	; (80114c4 <lcd_set_point+0x154>)
 8011412:	7a5b      	ldrb	r3, [r3, #9]
 8011414:	f043 0308 	orr.w	r3, r3, #8
 8011418:	b2da      	uxtb	r2, r3
 801141a:	4b2a      	ldr	r3, [pc, #168]	; (80114c4 <lcd_set_point+0x154>)
 801141c:	725a      	strb	r2, [r3, #9]
            break;
 801141e:	e04a      	b.n	80114b6 <lcd_set_point+0x146>
            default:
            break;
        }
    }
    else if (line == LOW_ROW)
 8011420:	79fb      	ldrb	r3, [r7, #7]
 8011422:	2b01      	cmp	r3, #1
 8011424:	d144      	bne.n	80114b0 <lcd_set_point+0x140>
    {
        switch (point)
 8011426:	79bb      	ldrb	r3, [r7, #6]
 8011428:	2b05      	cmp	r3, #5
 801142a:	d843      	bhi.n	80114b4 <lcd_set_point+0x144>
 801142c:	a201      	add	r2, pc, #4	; (adr r2, 8011434 <lcd_set_point+0xc4>)
 801142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011432:	bf00      	nop
 8011434:	0801144d 	.word	0x0801144d
 8011438:	0801145d 	.word	0x0801145d
 801143c:	0801146d 	.word	0x0801146d
 8011440:	0801147d 	.word	0x0801147d
 8011444:	0801148d 	.word	0x0801148d
 8011448:	0801149d 	.word	0x0801149d
        {
            case PNT_0:
                g_lcd_map[REG_7] |= (1 << BIT_2);
 801144c:	4b1d      	ldr	r3, [pc, #116]	; (80114c4 <lcd_set_point+0x154>)
 801144e:	79db      	ldrb	r3, [r3, #7]
 8011450:	f043 0304 	orr.w	r3, r3, #4
 8011454:	b2da      	uxtb	r2, r3
 8011456:	4b1b      	ldr	r3, [pc, #108]	; (80114c4 <lcd_set_point+0x154>)
 8011458:	71da      	strb	r2, [r3, #7]
            break;
 801145a:	e02c      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_1:
                g_lcd_map[REG_7] |= (1 << BIT_0);
 801145c:	4b19      	ldr	r3, [pc, #100]	; (80114c4 <lcd_set_point+0x154>)
 801145e:	79db      	ldrb	r3, [r3, #7]
 8011460:	f043 0301 	orr.w	r3, r3, #1
 8011464:	b2da      	uxtb	r2, r3
 8011466:	4b17      	ldr	r3, [pc, #92]	; (80114c4 <lcd_set_point+0x154>)
 8011468:	71da      	strb	r2, [r3, #7]
            break;
 801146a:	e024      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_2:
                g_lcd_map[REG_6] |= (1 << BIT_6);
 801146c:	4b15      	ldr	r3, [pc, #84]	; (80114c4 <lcd_set_point+0x154>)
 801146e:	799b      	ldrb	r3, [r3, #6]
 8011470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011474:	b2da      	uxtb	r2, r3
 8011476:	4b13      	ldr	r3, [pc, #76]	; (80114c4 <lcd_set_point+0x154>)
 8011478:	719a      	strb	r2, [r3, #6]
            break;
 801147a:	e01c      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_3:
                g_lcd_map[REG_6] |= (1 << BIT_4);
 801147c:	4b11      	ldr	r3, [pc, #68]	; (80114c4 <lcd_set_point+0x154>)
 801147e:	799b      	ldrb	r3, [r3, #6]
 8011480:	f043 0310 	orr.w	r3, r3, #16
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b0f      	ldr	r3, [pc, #60]	; (80114c4 <lcd_set_point+0x154>)
 8011488:	719a      	strb	r2, [r3, #6]
            break;
 801148a:	e014      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_4:
                g_lcd_map[REG_6] |= (1 << BIT_2);
 801148c:	4b0d      	ldr	r3, [pc, #52]	; (80114c4 <lcd_set_point+0x154>)
 801148e:	799b      	ldrb	r3, [r3, #6]
 8011490:	f043 0304 	orr.w	r3, r3, #4
 8011494:	b2da      	uxtb	r2, r3
 8011496:	4b0b      	ldr	r3, [pc, #44]	; (80114c4 <lcd_set_point+0x154>)
 8011498:	719a      	strb	r2, [r3, #6]
            break;
 801149a:	e00c      	b.n	80114b6 <lcd_set_point+0x146>
            case PNT_5:
                g_lcd_map[REG_6] |= (1 << BIT_0);
 801149c:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <lcd_set_point+0x154>)
 801149e:	799b      	ldrb	r3, [r3, #6]
 80114a0:	f043 0301 	orr.w	r3, r3, #1
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	4b07      	ldr	r3, [pc, #28]	; (80114c4 <lcd_set_point+0x154>)
 80114a8:	719a      	strb	r2, [r3, #6]
            break;
 80114aa:	e004      	b.n	80114b6 <lcd_set_point+0x146>
            break;
 80114ac:	bf00      	nop
 80114ae:	e002      	b.n	80114b6 <lcd_set_point+0x146>
            default:
            break;
        }
    }
 80114b0:	bf00      	nop
 80114b2:	e000      	b.n	80114b6 <lcd_set_point+0x146>
            break;
 80114b4:	bf00      	nop
}
 80114b6:	bf00      	nop
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	20001d9c 	.word	0x20001d9c

080114c8 <lcd_set_symbol>:
 * @brief Función que escribe un símbolo en específico en la pantalla.
 * @param Enumeraciones symbols_t y blink_t de lcd.h
 * @retval None
 */
void lcd_set_symbol(symbols_t symbol, blink_t blink_speed)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	4603      	mov	r3, r0
 80114d0:	460a      	mov	r2, r1
 80114d2:	71fb      	strb	r3, [r7, #7]
 80114d4:	4613      	mov	r3, r2
 80114d6:	71bb      	strb	r3, [r7, #6]
    switch (symbol)
 80114d8:	79fb      	ldrb	r3, [r7, #7]
 80114da:	2b15      	cmp	r3, #21
 80114dc:	f200 832b 	bhi.w	8011b36 <lcd_set_symbol+0x66e>
 80114e0:	a201      	add	r2, pc, #4	; (adr r2, 80114e8 <lcd_set_symbol+0x20>)
 80114e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e6:	bf00      	nop
 80114e8:	08011551 	.word	0x08011551
 80114ec:	08011541 	.word	0x08011541
 80114f0:	08011571 	.word	0x08011571
 80114f4:	08011581 	.word	0x08011581
 80114f8:	08011561 	.word	0x08011561
 80114fc:	080115b1 	.word	0x080115b1
 8011500:	080115a1 	.word	0x080115a1
 8011504:	080115c1 	.word	0x080115c1
 8011508:	08011591 	.word	0x08011591
 801150c:	080115d1 	.word	0x080115d1
 8011510:	0801165f 	.word	0x0801165f
 8011514:	0801178d 	.word	0x0801178d
 8011518:	080117d5 	.word	0x080117d5
 801151c:	08011863 	.word	0x08011863
 8011520:	080118c7 	.word	0x080118c7
 8011524:	0801192b 	.word	0x0801192b
 8011528:	0801198f 	.word	0x0801198f
 801152c:	080119c9 	.word	0x080119c9
 8011530:	080119ed 	.word	0x080119ed
 8011534:	08011a43 	.word	0x08011a43
 8011538:	08011a99 	.word	0x08011a99
 801153c:	08011ae1 	.word	0x08011ae1
    {
        case POWER:
            g_lcd_map[REG_2] |= (1 << BIT_5);
 8011540:	4b91      	ldr	r3, [pc, #580]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011542:	789b      	ldrb	r3, [r3, #2]
 8011544:	f043 0320 	orr.w	r3, r3, #32
 8011548:	b2da      	uxtb	r2, r3
 801154a:	4b8f      	ldr	r3, [pc, #572]	; (8011788 <lcd_set_symbol+0x2c0>)
 801154c:	709a      	strb	r2, [r3, #2]
        break;
 801154e:	e2f3      	b.n	8011b38 <lcd_set_symbol+0x670>
        case BATTERY:
            g_lcd_map[REG_7] |= (1 << BIT_5);
 8011550:	4b8d      	ldr	r3, [pc, #564]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011552:	79db      	ldrb	r3, [r3, #7]
 8011554:	f043 0320 	orr.w	r3, r3, #32
 8011558:	b2da      	uxtb	r2, r3
 801155a:	4b8b      	ldr	r3, [pc, #556]	; (8011788 <lcd_set_symbol+0x2c0>)
 801155c:	71da      	strb	r2, [r3, #7]
        break;
 801155e:	e2eb      	b.n	8011b38 <lcd_set_symbol+0x670>
        case BATCH:
            g_lcd_map[REG_12] |= (1 << BIT_5);
 8011560:	4b89      	ldr	r3, [pc, #548]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011562:	7b1b      	ldrb	r3, [r3, #12]
 8011564:	f043 0320 	orr.w	r3, r3, #32
 8011568:	b2da      	uxtb	r2, r3
 801156a:	4b87      	ldr	r3, [pc, #540]	; (8011788 <lcd_set_symbol+0x2c0>)
 801156c:	731a      	strb	r2, [r3, #12]
        break;
 801156e:	e2e3      	b.n	8011b38 <lcd_set_symbol+0x670>
        case RATE:
            g_lcd_map[REG_17] |= (1 << BIT_5);
 8011570:	4b85      	ldr	r3, [pc, #532]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011572:	7c5b      	ldrb	r3, [r3, #17]
 8011574:	f043 0320 	orr.w	r3, r3, #32
 8011578:	b2da      	uxtb	r2, r3
 801157a:	4b83      	ldr	r3, [pc, #524]	; (8011788 <lcd_set_symbol+0x2c0>)
 801157c:	745a      	strb	r2, [r3, #17]
        break;
 801157e:	e2db      	b.n	8011b38 <lcd_set_symbol+0x670>
        case E:
            g_lcd_map[REG_2] |= (1 << BIT_4);
 8011580:	4b81      	ldr	r3, [pc, #516]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011582:	789b      	ldrb	r3, [r3, #2]
 8011584:	f043 0310 	orr.w	r3, r3, #16
 8011588:	b2da      	uxtb	r2, r3
 801158a:	4b7f      	ldr	r3, [pc, #508]	; (8011788 <lcd_set_symbol+0x2c0>)
 801158c:	709a      	strb	r2, [r3, #2]
        break;
 801158e:	e2d3      	b.n	8011b38 <lcd_set_symbol+0x670>
        case POINT:
            g_lcd_map[REG_7] |= (1 << BIT_4);
 8011590:	4b7d      	ldr	r3, [pc, #500]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011592:	79db      	ldrb	r3, [r3, #7]
 8011594:	f043 0310 	orr.w	r3, r3, #16
 8011598:	b2da      	uxtb	r2, r3
 801159a:	4b7b      	ldr	r3, [pc, #492]	; (8011788 <lcd_set_symbol+0x2c0>)
 801159c:	71da      	strb	r2, [r3, #7]
        break;
 801159e:	e2cb      	b.n	8011b38 <lcd_set_symbol+0x670>
        case ACM:
            g_lcd_map[REG_12] |= (1 << BIT_4);
 80115a0:	4b79      	ldr	r3, [pc, #484]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115a2:	7b1b      	ldrb	r3, [r3, #12]
 80115a4:	f043 0310 	orr.w	r3, r3, #16
 80115a8:	b2da      	uxtb	r2, r3
 80115aa:	4b77      	ldr	r3, [pc, #476]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115ac:	731a      	strb	r2, [r3, #12]
        break;
 80115ae:	e2c3      	b.n	8011b38 <lcd_set_symbol+0x670>
        case TTL:
            g_lcd_map[REG_17] |= (1 << BIT_4);
 80115b0:	4b75      	ldr	r3, [pc, #468]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115b2:	7c5b      	ldrb	r3, [r3, #17]
 80115b4:	f043 0310 	orr.w	r3, r3, #16
 80115b8:	b2da      	uxtb	r2, r3
 80115ba:	4b73      	ldr	r3, [pc, #460]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115bc:	745a      	strb	r2, [r3, #17]
        break;
 80115be:	e2bb      	b.n	8011b38 <lcd_set_symbol+0x670>
        case BACKSLASH:
            g_lcd_map[REG_10] |= (1 << BIT_1);
 80115c0:	4b71      	ldr	r3, [pc, #452]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115c2:	7a9b      	ldrb	r3, [r3, #10]
 80115c4:	f043 0302 	orr.w	r3, r3, #2
 80115c8:	b2da      	uxtb	r2, r3
 80115ca:	4b6f      	ldr	r3, [pc, #444]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115cc:	729a      	strb	r2, [r3, #10]
        break;
 80115ce:	e2b3      	b.n	8011b38 <lcd_set_symbol+0x670>
        case VE:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80115d0:	4b6d      	ldr	r3, [pc, #436]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115d2:	7bdb      	ldrb	r3, [r3, #15]
 80115d4:	f043 0320 	orr.w	r3, r3, #32
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	4b6b      	ldr	r3, [pc, #428]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115dc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80115de:	4b6a      	ldr	r3, [pc, #424]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115e0:	7bdb      	ldrb	r3, [r3, #15]
 80115e2:	f043 0310 	orr.w	r3, r3, #16
 80115e6:	b2da      	uxtb	r2, r3
 80115e8:	4b67      	ldr	r3, [pc, #412]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115ea:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80115ec:	4b66      	ldr	r3, [pc, #408]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	f043 0320 	orr.w	r3, r3, #32
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	4b64      	ldr	r3, [pc, #400]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115f8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_2);
 80115fa:	4b63      	ldr	r3, [pc, #396]	; (8011788 <lcd_set_symbol+0x2c0>)
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	f043 0304 	orr.w	r3, r3, #4
 8011602:	b2da      	uxtb	r2, r3
 8011604:	4b60      	ldr	r3, [pc, #384]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011606:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011608:	4b5f      	ldr	r3, [pc, #380]	; (8011788 <lcd_set_symbol+0x2c0>)
 801160a:	7b9b      	ldrb	r3, [r3, #14]
 801160c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011610:	b2da      	uxtb	r2, r3
 8011612:	4b5d      	ldr	r3, [pc, #372]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011614:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011616:	4b5c      	ldr	r3, [pc, #368]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011618:	7bdb      	ldrb	r3, [r3, #15]
 801161a:	f043 0302 	orr.w	r3, r3, #2
 801161e:	b2da      	uxtb	r2, r3
 8011620:	4b59      	ldr	r3, [pc, #356]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011622:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011624:	4b58      	ldr	r3, [pc, #352]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011626:	7cdb      	ldrb	r3, [r3, #19]
 8011628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801162c:	b2da      	uxtb	r2, r3
 801162e:	4b56      	ldr	r3, [pc, #344]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011630:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011632:	4b55      	ldr	r3, [pc, #340]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	f043 0301 	orr.w	r3, r3, #1
 801163a:	b2da      	uxtb	r2, r3
 801163c:	4b52      	ldr	r3, [pc, #328]	; (8011788 <lcd_set_symbol+0x2c0>)
 801163e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011640:	4b51      	ldr	r3, [pc, #324]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	f043 0302 	orr.w	r3, r3, #2
 8011648:	b2da      	uxtb	r2, r3
 801164a:	4b4f      	ldr	r3, [pc, #316]	; (8011788 <lcd_set_symbol+0x2c0>)
 801164c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 801164e:	4b4e      	ldr	r3, [pc, #312]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011650:	795b      	ldrb	r3, [r3, #5]
 8011652:	f043 0302 	orr.w	r3, r3, #2
 8011656:	b2da      	uxtb	r2, r3
 8011658:	4b4b      	ldr	r3, [pc, #300]	; (8011788 <lcd_set_symbol+0x2c0>)
 801165a:	715a      	strb	r2, [r3, #5]
        break;
 801165c:	e26c      	b.n	8011b38 <lcd_set_symbol+0x670>
        case PASS:
            g_lcd_map[REG_13] |= (1 << BIT_1);
 801165e:	4b4a      	ldr	r3, [pc, #296]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011660:	7b5b      	ldrb	r3, [r3, #13]
 8011662:	f043 0302 	orr.w	r3, r3, #2
 8011666:	b2da      	uxtb	r2, r3
 8011668:	4b47      	ldr	r3, [pc, #284]	; (8011788 <lcd_set_symbol+0x2c0>)
 801166a:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_0);
 801166c:	4b46      	ldr	r3, [pc, #280]	; (8011788 <lcd_set_symbol+0x2c0>)
 801166e:	7b5b      	ldrb	r3, [r3, #13]
 8011670:	f043 0301 	orr.w	r3, r3, #1
 8011674:	b2da      	uxtb	r2, r3
 8011676:	4b44      	ldr	r3, [pc, #272]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011678:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_1);
 801167a:	4b43      	ldr	r3, [pc, #268]	; (8011788 <lcd_set_symbol+0x2c0>)
 801167c:	7c9b      	ldrb	r3, [r3, #18]
 801167e:	f043 0302 	orr.w	r3, r3, #2
 8011682:	b2da      	uxtb	r2, r3
 8011684:	4b40      	ldr	r3, [pc, #256]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011686:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_0);
 8011688:	4b3f      	ldr	r3, [pc, #252]	; (8011788 <lcd_set_symbol+0x2c0>)
 801168a:	7c9b      	ldrb	r3, [r3, #18]
 801168c:	f043 0301 	orr.w	r3, r3, #1
 8011690:	b2da      	uxtb	r2, r3
 8011692:	4b3d      	ldr	r3, [pc, #244]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011694:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_0);
 8011696:	4b3c      	ldr	r3, [pc, #240]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011698:	78db      	ldrb	r3, [r3, #3]
 801169a:	f043 0301 	orr.w	r3, r3, #1
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	4b39      	ldr	r3, [pc, #228]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116a2:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_3);
 80116a4:	4b38      	ldr	r3, [pc, #224]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116a6:	7b5b      	ldrb	r3, [r3, #13]
 80116a8:	f043 0308 	orr.w	r3, r3, #8
 80116ac:	b2da      	uxtb	r2, r3
 80116ae:	4b36      	ldr	r3, [pc, #216]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116b0:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_2);
 80116b2:	4b35      	ldr	r3, [pc, #212]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116b4:	7b5b      	ldrb	r3, [r3, #13]
 80116b6:	f043 0304 	orr.w	r3, r3, #4
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	4b32      	ldr	r3, [pc, #200]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116be:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_3);
 80116c0:	4b31      	ldr	r3, [pc, #196]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116c2:	7c9b      	ldrb	r3, [r3, #18]
 80116c4:	f043 0308 	orr.w	r3, r3, #8
 80116c8:	b2da      	uxtb	r2, r3
 80116ca:	4b2f      	ldr	r3, [pc, #188]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116cc:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_18] |= (1 << BIT_2);
 80116ce:	4b2e      	ldr	r3, [pc, #184]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116d0:	7c9b      	ldrb	r3, [r3, #18]
 80116d2:	f043 0304 	orr.w	r3, r3, #4
 80116d6:	b2da      	uxtb	r2, r3
 80116d8:	4b2b      	ldr	r3, [pc, #172]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116da:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_2);
 80116dc:	4b2a      	ldr	r3, [pc, #168]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116de:	78db      	ldrb	r3, [r3, #3]
 80116e0:	f043 0304 	orr.w	r3, r3, #4
 80116e4:	b2da      	uxtb	r2, r3
 80116e6:	4b28      	ldr	r3, [pc, #160]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116e8:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_3] |= (1 << BIT_3);
 80116ea:	4b27      	ldr	r3, [pc, #156]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116ec:	78db      	ldrb	r3, [r3, #3]
 80116ee:	f043 0308 	orr.w	r3, r3, #8
 80116f2:	b2da      	uxtb	r2, r3
 80116f4:	4b24      	ldr	r3, [pc, #144]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116f6:	70da      	strb	r2, [r3, #3]

            g_lcd_map[REG_13] |= (1 << BIT_5);
 80116f8:	4b23      	ldr	r3, [pc, #140]	; (8011788 <lcd_set_symbol+0x2c0>)
 80116fa:	7b5b      	ldrb	r3, [r3, #13]
 80116fc:	f043 0320 	orr.w	r3, r3, #32
 8011700:	b2da      	uxtb	r2, r3
 8011702:	4b21      	ldr	r3, [pc, #132]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011704:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_4);
 8011706:	4b20      	ldr	r3, [pc, #128]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011708:	7b5b      	ldrb	r3, [r3, #13]
 801170a:	f043 0310 	orr.w	r3, r3, #16
 801170e:	b2da      	uxtb	r2, r3
 8011710:	4b1d      	ldr	r3, [pc, #116]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011712:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_4);
 8011714:	4b1c      	ldr	r3, [pc, #112]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011716:	7c9b      	ldrb	r3, [r3, #18]
 8011718:	f043 0310 	orr.w	r3, r3, #16
 801171c:	b2da      	uxtb	r2, r3
 801171e:	4b1a      	ldr	r3, [pc, #104]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011720:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_5);
 8011722:	4b19      	ldr	r3, [pc, #100]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011724:	78db      	ldrb	r3, [r3, #3]
 8011726:	f043 0320 	orr.w	r3, r3, #32
 801172a:	b2da      	uxtb	r2, r3
 801172c:	4b16      	ldr	r3, [pc, #88]	; (8011788 <lcd_set_symbol+0x2c0>)
 801172e:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_4);
 8011730:	4b15      	ldr	r3, [pc, #84]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011732:	7a1b      	ldrb	r3, [r3, #8]
 8011734:	f043 0310 	orr.w	r3, r3, #16
 8011738:	b2da      	uxtb	r2, r3
 801173a:	4b13      	ldr	r3, [pc, #76]	; (8011788 <lcd_set_symbol+0x2c0>)
 801173c:	721a      	strb	r2, [r3, #8]

            g_lcd_map[REG_13] |= (1 << BIT_7);
 801173e:	4b12      	ldr	r3, [pc, #72]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011740:	7b5b      	ldrb	r3, [r3, #13]
 8011742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011746:	b2da      	uxtb	r2, r3
 8011748:	4b0f      	ldr	r3, [pc, #60]	; (8011788 <lcd_set_symbol+0x2c0>)
 801174a:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_13] |= (1 << BIT_6);
 801174c:	4b0e      	ldr	r3, [pc, #56]	; (8011788 <lcd_set_symbol+0x2c0>)
 801174e:	7b5b      	ldrb	r3, [r3, #13]
 8011750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011754:	b2da      	uxtb	r2, r3
 8011756:	4b0c      	ldr	r3, [pc, #48]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011758:	735a      	strb	r2, [r3, #13]
            g_lcd_map[REG_18] |= (1 << BIT_6);
 801175a:	4b0b      	ldr	r3, [pc, #44]	; (8011788 <lcd_set_symbol+0x2c0>)
 801175c:	7c9b      	ldrb	r3, [r3, #18]
 801175e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011762:	b2da      	uxtb	r2, r3
 8011764:	4b08      	ldr	r3, [pc, #32]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011766:	749a      	strb	r2, [r3, #18]
            g_lcd_map[REG_3] |= (1 << BIT_7);
 8011768:	4b07      	ldr	r3, [pc, #28]	; (8011788 <lcd_set_symbol+0x2c0>)
 801176a:	78db      	ldrb	r3, [r3, #3]
 801176c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011770:	b2da      	uxtb	r2, r3
 8011772:	4b05      	ldr	r3, [pc, #20]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011774:	70da      	strb	r2, [r3, #3]
            g_lcd_map[REG_8] |= (1 << BIT_6);
 8011776:	4b04      	ldr	r3, [pc, #16]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011778:	7a1b      	ldrb	r3, [r3, #8]
 801177a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801177e:	b2da      	uxtb	r2, r3
 8011780:	4b01      	ldr	r3, [pc, #4]	; (8011788 <lcd_set_symbol+0x2c0>)
 8011782:	721a      	strb	r2, [r3, #8]

        break;
 8011784:	e1d8      	b.n	8011b38 <lcd_set_symbol+0x670>
 8011786:	bf00      	nop
 8011788:	20001d9c 	.word	0x20001d9c
        case K:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801178c:	4b96      	ldr	r3, [pc, #600]	; (80119e8 <lcd_set_symbol+0x520>)
 801178e:	7bdb      	ldrb	r3, [r3, #15]
 8011790:	f043 0320 	orr.w	r3, r3, #32
 8011794:	b2da      	uxtb	r2, r3
 8011796:	4b94      	ldr	r3, [pc, #592]	; (80119e8 <lcd_set_symbol+0x520>)
 8011798:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 801179a:	4b93      	ldr	r3, [pc, #588]	; (80119e8 <lcd_set_symbol+0x520>)
 801179c:	7bdb      	ldrb	r3, [r3, #15]
 801179e:	f043 0310 	orr.w	r3, r3, #16
 80117a2:	b2da      	uxtb	r2, r3
 80117a4:	4b90      	ldr	r3, [pc, #576]	; (80119e8 <lcd_set_symbol+0x520>)
 80117a6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80117a8:	4b8f      	ldr	r3, [pc, #572]	; (80119e8 <lcd_set_symbol+0x520>)
 80117aa:	7bdb      	ldrb	r3, [r3, #15]
 80117ac:	f043 0304 	orr.w	r3, r3, #4
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	4b8d      	ldr	r3, [pc, #564]	; (80119e8 <lcd_set_symbol+0x520>)
 80117b4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80117b6:	4b8c      	ldr	r3, [pc, #560]	; (80119e8 <lcd_set_symbol+0x520>)
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	f043 0320 	orr.w	r3, r3, #32
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	4b89      	ldr	r3, [pc, #548]	; (80119e8 <lcd_set_symbol+0x520>)
 80117c2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 80117c4:	4b88      	ldr	r3, [pc, #544]	; (80119e8 <lcd_set_symbol+0x520>)
 80117c6:	795b      	ldrb	r3, [r3, #5]
 80117c8:	f043 0310 	orr.w	r3, r3, #16
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	4b86      	ldr	r3, [pc, #536]	; (80119e8 <lcd_set_symbol+0x520>)
 80117d0:	715a      	strb	r2, [r3, #5]
        break;
 80117d2:	e1b1      	b.n	8011b38 <lcd_set_symbol+0x670>
        case KO:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 80117d4:	4b84      	ldr	r3, [pc, #528]	; (80119e8 <lcd_set_symbol+0x520>)
 80117d6:	7bdb      	ldrb	r3, [r3, #15]
 80117d8:	f043 0320 	orr.w	r3, r3, #32
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	4b82      	ldr	r3, [pc, #520]	; (80119e8 <lcd_set_symbol+0x520>)
 80117e0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 80117e2:	4b81      	ldr	r3, [pc, #516]	; (80119e8 <lcd_set_symbol+0x520>)
 80117e4:	7bdb      	ldrb	r3, [r3, #15]
 80117e6:	f043 0310 	orr.w	r3, r3, #16
 80117ea:	b2da      	uxtb	r2, r3
 80117ec:	4b7e      	ldr	r3, [pc, #504]	; (80119e8 <lcd_set_symbol+0x520>)
 80117ee:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80117f0:	4b7d      	ldr	r3, [pc, #500]	; (80119e8 <lcd_set_symbol+0x520>)
 80117f2:	7bdb      	ldrb	r3, [r3, #15]
 80117f4:	f043 0304 	orr.w	r3, r3, #4
 80117f8:	b2da      	uxtb	r2, r3
 80117fa:	4b7b      	ldr	r3, [pc, #492]	; (80119e8 <lcd_set_symbol+0x520>)
 80117fc:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 80117fe:	4b7a      	ldr	r3, [pc, #488]	; (80119e8 <lcd_set_symbol+0x520>)
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	f043 0320 	orr.w	r3, r3, #32
 8011806:	b2da      	uxtb	r2, r3
 8011808:	4b77      	ldr	r3, [pc, #476]	; (80119e8 <lcd_set_symbol+0x520>)
 801180a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 801180c:	4b76      	ldr	r3, [pc, #472]	; (80119e8 <lcd_set_symbol+0x520>)
 801180e:	795b      	ldrb	r3, [r3, #5]
 8011810:	f043 0310 	orr.w	r3, r3, #16
 8011814:	b2da      	uxtb	r2, r3
 8011816:	4b74      	ldr	r3, [pc, #464]	; (80119e8 <lcd_set_symbol+0x520>)
 8011818:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_19] |= (1 << BIT_6);
 801181a:	4b73      	ldr	r3, [pc, #460]	; (80119e8 <lcd_set_symbol+0x520>)
 801181c:	7cdb      	ldrb	r3, [r3, #19]
 801181e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011822:	b2da      	uxtb	r2, r3
 8011824:	4b70      	ldr	r3, [pc, #448]	; (80119e8 <lcd_set_symbol+0x520>)
 8011826:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011828:	4b6f      	ldr	r3, [pc, #444]	; (80119e8 <lcd_set_symbol+0x520>)
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	f043 0301 	orr.w	r3, r3, #1
 8011830:	b2da      	uxtb	r2, r3
 8011832:	4b6d      	ldr	r3, [pc, #436]	; (80119e8 <lcd_set_symbol+0x520>)
 8011834:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011836:	4b6c      	ldr	r3, [pc, #432]	; (80119e8 <lcd_set_symbol+0x520>)
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	f043 0302 	orr.w	r3, r3, #2
 801183e:	b2da      	uxtb	r2, r3
 8011840:	4b69      	ldr	r3, [pc, #420]	; (80119e8 <lcd_set_symbol+0x520>)
 8011842:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011844:	4b68      	ldr	r3, [pc, #416]	; (80119e8 <lcd_set_symbol+0x520>)
 8011846:	791b      	ldrb	r3, [r3, #4]
 8011848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801184c:	b2da      	uxtb	r2, r3
 801184e:	4b66      	ldr	r3, [pc, #408]	; (80119e8 <lcd_set_symbol+0x520>)
 8011850:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011852:	4b65      	ldr	r3, [pc, #404]	; (80119e8 <lcd_set_symbol+0x520>)
 8011854:	795b      	ldrb	r3, [r3, #5]
 8011856:	f043 0302 	orr.w	r3, r3, #2
 801185a:	b2da      	uxtb	r2, r3
 801185c:	4b62      	ldr	r3, [pc, #392]	; (80119e8 <lcd_set_symbol+0x520>)
 801185e:	715a      	strb	r2, [r3, #5]
        break;
 8011860:	e16a      	b.n	8011b38 <lcd_set_symbol+0x670>
        case PASS1:
            g_lcd_map[REG_12] |= (1 << BIT_0);
 8011862:	4b61      	ldr	r3, [pc, #388]	; (80119e8 <lcd_set_symbol+0x520>)
 8011864:	7b1b      	ldrb	r3, [r3, #12]
 8011866:	f043 0301 	orr.w	r3, r3, #1
 801186a:	b2da      	uxtb	r2, r3
 801186c:	4b5e      	ldr	r3, [pc, #376]	; (80119e8 <lcd_set_symbol+0x520>)
 801186e:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_12] |= (1 << BIT_1);
 8011870:	4b5d      	ldr	r3, [pc, #372]	; (80119e8 <lcd_set_symbol+0x520>)
 8011872:	7b1b      	ldrb	r3, [r3, #12]
 8011874:	f043 0302 	orr.w	r3, r3, #2
 8011878:	b2da      	uxtb	r2, r3
 801187a:	4b5b      	ldr	r3, [pc, #364]	; (80119e8 <lcd_set_symbol+0x520>)
 801187c:	731a      	strb	r2, [r3, #12]
            g_lcd_map[REG_17] |= (1 << BIT_0);
 801187e:	4b5a      	ldr	r3, [pc, #360]	; (80119e8 <lcd_set_symbol+0x520>)
 8011880:	7c5b      	ldrb	r3, [r3, #17]
 8011882:	f043 0301 	orr.w	r3, r3, #1
 8011886:	b2da      	uxtb	r2, r3
 8011888:	4b57      	ldr	r3, [pc, #348]	; (80119e8 <lcd_set_symbol+0x520>)
 801188a:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_17] |= (1 << BIT_1);
 801188c:	4b56      	ldr	r3, [pc, #344]	; (80119e8 <lcd_set_symbol+0x520>)
 801188e:	7c5b      	ldrb	r3, [r3, #17]
 8011890:	f043 0302 	orr.w	r3, r3, #2
 8011894:	b2da      	uxtb	r2, r3
 8011896:	4b54      	ldr	r3, [pc, #336]	; (80119e8 <lcd_set_symbol+0x520>)
 8011898:	745a      	strb	r2, [r3, #17]
            g_lcd_map[REG_2] |= (1 << BIT_1);
 801189a:	4b53      	ldr	r3, [pc, #332]	; (80119e8 <lcd_set_symbol+0x520>)
 801189c:	789b      	ldrb	r3, [r3, #2]
 801189e:	f043 0302 	orr.w	r3, r3, #2
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	4b50      	ldr	r3, [pc, #320]	; (80119e8 <lcd_set_symbol+0x520>)
 80118a6:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_2] |= (1 << BIT_0);
 80118a8:	4b4f      	ldr	r3, [pc, #316]	; (80119e8 <lcd_set_symbol+0x520>)
 80118aa:	789b      	ldrb	r3, [r3, #2]
 80118ac:	f043 0301 	orr.w	r3, r3, #1
 80118b0:	b2da      	uxtb	r2, r3
 80118b2:	4b4d      	ldr	r3, [pc, #308]	; (80119e8 <lcd_set_symbol+0x520>)
 80118b4:	709a      	strb	r2, [r3, #2]
            g_lcd_map[REG_7] |= (1 << BIT_1);
 80118b6:	4b4c      	ldr	r3, [pc, #304]	; (80119e8 <lcd_set_symbol+0x520>)
 80118b8:	79db      	ldrb	r3, [r3, #7]
 80118ba:	f043 0302 	orr.w	r3, r3, #2
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	4b49      	ldr	r3, [pc, #292]	; (80119e8 <lcd_set_symbol+0x520>)
 80118c2:	71da      	strb	r2, [r3, #7]
        break;
 80118c4:	e138      	b.n	8011b38 <lcd_set_symbol+0x670>
        case PASS2:
            g_lcd_map[REG_11] |= (1 << BIT_6);
 80118c6:	4b48      	ldr	r3, [pc, #288]	; (80119e8 <lcd_set_symbol+0x520>)
 80118c8:	7adb      	ldrb	r3, [r3, #11]
 80118ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ce:	b2da      	uxtb	r2, r3
 80118d0:	4b45      	ldr	r3, [pc, #276]	; (80119e8 <lcd_set_symbol+0x520>)
 80118d2:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_7);
 80118d4:	4b44      	ldr	r3, [pc, #272]	; (80119e8 <lcd_set_symbol+0x520>)
 80118d6:	7adb      	ldrb	r3, [r3, #11]
 80118d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	4b42      	ldr	r3, [pc, #264]	; (80119e8 <lcd_set_symbol+0x520>)
 80118e0:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_6);
 80118e2:	4b41      	ldr	r3, [pc, #260]	; (80119e8 <lcd_set_symbol+0x520>)
 80118e4:	7c1b      	ldrb	r3, [r3, #16]
 80118e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ea:	b2da      	uxtb	r2, r3
 80118ec:	4b3e      	ldr	r3, [pc, #248]	; (80119e8 <lcd_set_symbol+0x520>)
 80118ee:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_7);
 80118f0:	4b3d      	ldr	r3, [pc, #244]	; (80119e8 <lcd_set_symbol+0x520>)
 80118f2:	7c1b      	ldrb	r3, [r3, #16]
 80118f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	4b3b      	ldr	r3, [pc, #236]	; (80119e8 <lcd_set_symbol+0x520>)
 80118fc:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_7);
 80118fe:	4b3a      	ldr	r3, [pc, #232]	; (80119e8 <lcd_set_symbol+0x520>)
 8011900:	785b      	ldrb	r3, [r3, #1]
 8011902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011906:	b2da      	uxtb	r2, r3
 8011908:	4b37      	ldr	r3, [pc, #220]	; (80119e8 <lcd_set_symbol+0x520>)
 801190a:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_6);
 801190c:	4b36      	ldr	r3, [pc, #216]	; (80119e8 <lcd_set_symbol+0x520>)
 801190e:	785b      	ldrb	r3, [r3, #1]
 8011910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011914:	b2da      	uxtb	r2, r3
 8011916:	4b34      	ldr	r3, [pc, #208]	; (80119e8 <lcd_set_symbol+0x520>)
 8011918:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_7);
 801191a:	4b33      	ldr	r3, [pc, #204]	; (80119e8 <lcd_set_symbol+0x520>)
 801191c:	799b      	ldrb	r3, [r3, #6]
 801191e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011922:	b2da      	uxtb	r2, r3
 8011924:	4b30      	ldr	r3, [pc, #192]	; (80119e8 <lcd_set_symbol+0x520>)
 8011926:	719a      	strb	r2, [r3, #6]
        break;
 8011928:	e106      	b.n	8011b38 <lcd_set_symbol+0x670>
        case PASS3:
            g_lcd_map[REG_11] |= (1 << BIT_4);
 801192a:	4b2f      	ldr	r3, [pc, #188]	; (80119e8 <lcd_set_symbol+0x520>)
 801192c:	7adb      	ldrb	r3, [r3, #11]
 801192e:	f043 0310 	orr.w	r3, r3, #16
 8011932:	b2da      	uxtb	r2, r3
 8011934:	4b2c      	ldr	r3, [pc, #176]	; (80119e8 <lcd_set_symbol+0x520>)
 8011936:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_11] |= (1 << BIT_5);
 8011938:	4b2b      	ldr	r3, [pc, #172]	; (80119e8 <lcd_set_symbol+0x520>)
 801193a:	7adb      	ldrb	r3, [r3, #11]
 801193c:	f043 0320 	orr.w	r3, r3, #32
 8011940:	b2da      	uxtb	r2, r3
 8011942:	4b29      	ldr	r3, [pc, #164]	; (80119e8 <lcd_set_symbol+0x520>)
 8011944:	72da      	strb	r2, [r3, #11]
            g_lcd_map[REG_16] |= (1 << BIT_4);
 8011946:	4b28      	ldr	r3, [pc, #160]	; (80119e8 <lcd_set_symbol+0x520>)
 8011948:	7c1b      	ldrb	r3, [r3, #16]
 801194a:	f043 0310 	orr.w	r3, r3, #16
 801194e:	b2da      	uxtb	r2, r3
 8011950:	4b25      	ldr	r3, [pc, #148]	; (80119e8 <lcd_set_symbol+0x520>)
 8011952:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_16] |= (1 << BIT_5);
 8011954:	4b24      	ldr	r3, [pc, #144]	; (80119e8 <lcd_set_symbol+0x520>)
 8011956:	7c1b      	ldrb	r3, [r3, #16]
 8011958:	f043 0320 	orr.w	r3, r3, #32
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b22      	ldr	r3, [pc, #136]	; (80119e8 <lcd_set_symbol+0x520>)
 8011960:	741a      	strb	r2, [r3, #16]
            g_lcd_map[REG_1] |= (1 << BIT_5);
 8011962:	4b21      	ldr	r3, [pc, #132]	; (80119e8 <lcd_set_symbol+0x520>)
 8011964:	785b      	ldrb	r3, [r3, #1]
 8011966:	f043 0320 	orr.w	r3, r3, #32
 801196a:	b2da      	uxtb	r2, r3
 801196c:	4b1e      	ldr	r3, [pc, #120]	; (80119e8 <lcd_set_symbol+0x520>)
 801196e:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_1] |= (1 << BIT_4);
 8011970:	4b1d      	ldr	r3, [pc, #116]	; (80119e8 <lcd_set_symbol+0x520>)
 8011972:	785b      	ldrb	r3, [r3, #1]
 8011974:	f043 0310 	orr.w	r3, r3, #16
 8011978:	b2da      	uxtb	r2, r3
 801197a:	4b1b      	ldr	r3, [pc, #108]	; (80119e8 <lcd_set_symbol+0x520>)
 801197c:	705a      	strb	r2, [r3, #1]
            g_lcd_map[REG_6] |= (1 << BIT_5);
 801197e:	4b1a      	ldr	r3, [pc, #104]	; (80119e8 <lcd_set_symbol+0x520>)
 8011980:	799b      	ldrb	r3, [r3, #6]
 8011982:	f043 0320 	orr.w	r3, r3, #32
 8011986:	b2da      	uxtb	r2, r3
 8011988:	4b17      	ldr	r3, [pc, #92]	; (80119e8 <lcd_set_symbol+0x520>)
 801198a:	719a      	strb	r2, [r3, #6]
        break;
 801198c:	e0d4      	b.n	8011b38 <lcd_set_symbol+0x670>
        case F:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 801198e:	4b16      	ldr	r3, [pc, #88]	; (80119e8 <lcd_set_symbol+0x520>)
 8011990:	7a9b      	ldrb	r3, [r3, #10]
 8011992:	f043 0308 	orr.w	r3, r3, #8
 8011996:	b2da      	uxtb	r2, r3
 8011998:	4b13      	ldr	r3, [pc, #76]	; (80119e8 <lcd_set_symbol+0x520>)
 801199a:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 801199c:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <lcd_set_symbol+0x520>)
 801199e:	7bdb      	ldrb	r3, [r3, #15]
 80119a0:	f043 0320 	orr.w	r3, r3, #32
 80119a4:	b2da      	uxtb	r2, r3
 80119a6:	4b10      	ldr	r3, [pc, #64]	; (80119e8 <lcd_set_symbol+0x520>)
 80119a8:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 80119aa:	4b0f      	ldr	r3, [pc, #60]	; (80119e8 <lcd_set_symbol+0x520>)
 80119ac:	7bdb      	ldrb	r3, [r3, #15]
 80119ae:	f043 0304 	orr.w	r3, r3, #4
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	4b0c      	ldr	r3, [pc, #48]	; (80119e8 <lcd_set_symbol+0x520>)
 80119b6:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_5);
 80119b8:	4b0b      	ldr	r3, [pc, #44]	; (80119e8 <lcd_set_symbol+0x520>)
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	f043 0320 	orr.w	r3, r3, #32
 80119c0:	b2da      	uxtb	r2, r3
 80119c2:	4b09      	ldr	r3, [pc, #36]	; (80119e8 <lcd_set_symbol+0x520>)
 80119c4:	701a      	strb	r2, [r3, #0]
        break;
 80119c6:	e0b7      	b.n	8011b38 <lcd_set_symbol+0x670>
        case LIN_1:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 80119c8:	4b07      	ldr	r3, [pc, #28]	; (80119e8 <lcd_set_symbol+0x520>)
 80119ca:	7bdb      	ldrb	r3, [r3, #15]
 80119cc:	f043 0302 	orr.w	r3, r3, #2
 80119d0:	b2da      	uxtb	r2, r3
 80119d2:	4b05      	ldr	r3, [pc, #20]	; (80119e8 <lcd_set_symbol+0x520>)
 80119d4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 80119d6:	4b04      	ldr	r3, [pc, #16]	; (80119e8 <lcd_set_symbol+0x520>)
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	f043 0302 	orr.w	r3, r3, #2
 80119de:	b2da      	uxtb	r2, r3
 80119e0:	4b01      	ldr	r3, [pc, #4]	; (80119e8 <lcd_set_symbol+0x520>)
 80119e2:	701a      	strb	r2, [r3, #0]
        break;
 80119e4:	e0a8      	b.n	8011b38 <lcd_set_symbol+0x670>
 80119e6:	bf00      	nop
 80119e8:	20001d9c 	.word	0x20001d9c
        case LIN_2:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 80119ec:	4b56      	ldr	r3, [pc, #344]	; (8011b48 <lcd_set_symbol+0x680>)
 80119ee:	7b9b      	ldrb	r3, [r3, #14]
 80119f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	4b54      	ldr	r3, [pc, #336]	; (8011b48 <lcd_set_symbol+0x680>)
 80119f8:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 80119fa:	4b53      	ldr	r3, [pc, #332]	; (8011b48 <lcd_set_symbol+0x680>)
 80119fc:	7cdb      	ldrb	r3, [r3, #19]
 80119fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a02:	b2da      	uxtb	r2, r3
 8011a04:	4b50      	ldr	r3, [pc, #320]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a06:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011a08:	4b4f      	ldr	r3, [pc, #316]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	f043 0301 	orr.w	r3, r3, #1
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	4b4d      	ldr	r3, [pc, #308]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a14:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011a16:	4b4c      	ldr	r3, [pc, #304]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a18:	7cdb      	ldrb	r3, [r3, #19]
 8011a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	4b49      	ldr	r3, [pc, #292]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a22:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_1);
 8011a24:	4b48      	ldr	r3, [pc, #288]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	f043 0302 	orr.w	r3, r3, #2
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	4b46      	ldr	r3, [pc, #280]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a30:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011a32:	4b45      	ldr	r3, [pc, #276]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a34:	795b      	ldrb	r3, [r3, #5]
 8011a36:	f043 0302 	orr.w	r3, r3, #2
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	4b42      	ldr	r3, [pc, #264]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a3e:	715a      	strb	r2, [r3, #5]
        break;
 8011a40:	e07a      	b.n	8011b38 <lcd_set_symbol+0x670>
        case LIN_3:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011a42:	4b41      	ldr	r3, [pc, #260]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a44:	7b9b      	ldrb	r3, [r3, #14]
 8011a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a4a:	b2da      	uxtb	r2, r3
 8011a4c:	4b3e      	ldr	r3, [pc, #248]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a4e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011a50:	4b3d      	ldr	r3, [pc, #244]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a52:	7cdb      	ldrb	r3, [r3, #19]
 8011a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a58:	b2da      	uxtb	r2, r3
 8011a5a:	4b3b      	ldr	r3, [pc, #236]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a5c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011a5e:	4b3a      	ldr	r3, [pc, #232]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	4b37      	ldr	r3, [pc, #220]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a6a:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011a6c:	4b36      	ldr	r3, [pc, #216]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a6e:	7cdb      	ldrb	r3, [r3, #19]
 8011a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	4b34      	ldr	r3, [pc, #208]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a78:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 8011a7a:	4b33      	ldr	r3, [pc, #204]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a7c:	791b      	ldrb	r3, [r3, #4]
 8011a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a82:	b2da      	uxtb	r2, r3
 8011a84:	4b30      	ldr	r3, [pc, #192]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a86:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011a88:	4b2f      	ldr	r3, [pc, #188]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a8a:	795b      	ldrb	r3, [r3, #5]
 8011a8c:	f043 0302 	orr.w	r3, r3, #2
 8011a90:	b2da      	uxtb	r2, r3
 8011a92:	4b2d      	ldr	r3, [pc, #180]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a94:	715a      	strb	r2, [r3, #5]
        break;
 8011a96:	e04f      	b.n	8011b38 <lcd_set_symbol+0x670>
        case LIN_4:
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011a98:	4b2b      	ldr	r3, [pc, #172]	; (8011b48 <lcd_set_symbol+0x680>)
 8011a9a:	7bdb      	ldrb	r3, [r3, #15]
 8011a9c:	f043 0302 	orr.w	r3, r3, #2
 8011aa0:	b2da      	uxtb	r2, r3
 8011aa2:	4b29      	ldr	r3, [pc, #164]	; (8011b48 <lcd_set_symbol+0x680>)
 8011aa4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011aa6:	4b28      	ldr	r3, [pc, #160]	; (8011b48 <lcd_set_symbol+0x680>)
 8011aa8:	7cdb      	ldrb	r3, [r3, #19]
 8011aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011aae:	b2da      	uxtb	r2, r3
 8011ab0:	4b25      	ldr	r3, [pc, #148]	; (8011b48 <lcd_set_symbol+0x680>)
 8011ab2:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011ab4:	4b24      	ldr	r3, [pc, #144]	; (8011b48 <lcd_set_symbol+0x680>)
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	f043 0301 	orr.w	r3, r3, #1
 8011abc:	b2da      	uxtb	r2, r3
 8011abe:	4b22      	ldr	r3, [pc, #136]	; (8011b48 <lcd_set_symbol+0x680>)
 8011ac0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011ac2:	4b21      	ldr	r3, [pc, #132]	; (8011b48 <lcd_set_symbol+0x680>)
 8011ac4:	7cdb      	ldrb	r3, [r3, #19]
 8011ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	4b1e      	ldr	r3, [pc, #120]	; (8011b48 <lcd_set_symbol+0x680>)
 8011ace:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 8011ad0:	4b1d      	ldr	r3, [pc, #116]	; (8011b48 <lcd_set_symbol+0x680>)
 8011ad2:	791b      	ldrb	r3, [r3, #4]
 8011ad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ad8:	b2da      	uxtb	r2, r3
 8011ada:	4b1b      	ldr	r3, [pc, #108]	; (8011b48 <lcd_set_symbol+0x680>)
 8011adc:	711a      	strb	r2, [r3, #4]
        break;
 8011ade:	e02b      	b.n	8011b38 <lcd_set_symbol+0x670>
        case LIN_5:
            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011ae0:	4b19      	ldr	r3, [pc, #100]	; (8011b48 <lcd_set_symbol+0x680>)
 8011ae2:	7b9b      	ldrb	r3, [r3, #14]
 8011ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	4b17      	ldr	r3, [pc, #92]	; (8011b48 <lcd_set_symbol+0x680>)
 8011aec:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011aee:	4b16      	ldr	r3, [pc, #88]	; (8011b48 <lcd_set_symbol+0x680>)
 8011af0:	7bdb      	ldrb	r3, [r3, #15]
 8011af2:	f043 0302 	orr.w	r3, r3, #2
 8011af6:	b2da      	uxtb	r2, r3
 8011af8:	4b13      	ldr	r3, [pc, #76]	; (8011b48 <lcd_set_symbol+0x680>)
 8011afa:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0]  |= (1 << BIT_0);
 8011afc:	4b12      	ldr	r3, [pc, #72]	; (8011b48 <lcd_set_symbol+0x680>)
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	f043 0301 	orr.w	r3, r3, #1
 8011b04:	b2da      	uxtb	r2, r3
 8011b06:	4b10      	ldr	r3, [pc, #64]	; (8011b48 <lcd_set_symbol+0x680>)
 8011b08:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011b0a:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <lcd_set_symbol+0x680>)
 8011b0c:	7cdb      	ldrb	r3, [r3, #19]
 8011b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	4b0c      	ldr	r3, [pc, #48]	; (8011b48 <lcd_set_symbol+0x680>)
 8011b16:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_4]  |= (1 << BIT_7);
 8011b18:	4b0b      	ldr	r3, [pc, #44]	; (8011b48 <lcd_set_symbol+0x680>)
 8011b1a:	791b      	ldrb	r3, [r3, #4]
 8011b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <lcd_set_symbol+0x680>)
 8011b24:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5]  |= (1 << BIT_1);
 8011b26:	4b08      	ldr	r3, [pc, #32]	; (8011b48 <lcd_set_symbol+0x680>)
 8011b28:	795b      	ldrb	r3, [r3, #5]
 8011b2a:	f043 0302 	orr.w	r3, r3, #2
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	4b05      	ldr	r3, [pc, #20]	; (8011b48 <lcd_set_symbol+0x680>)
 8011b32:	715a      	strb	r2, [r3, #5]
        break;
 8011b34:	e000      	b.n	8011b38 <lcd_set_symbol+0x670>
        default:
        break;
 8011b36:	bf00      	nop
    }

    pcf8553_blink(blink_speed);
 8011b38:	79bb      	ldrb	r3, [r7, #6]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f000 fb3c 	bl	80121b8 <pcf8553_blink>
}
 8011b40:	bf00      	nop
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	20001d9c 	.word	0x20001d9c

08011b4c <lcd_set_time_unit>:
 * pantalla LCD custom.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_time_unit(fmc_unit_time_t time_unit, blink_t blink_speed)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	4603      	mov	r3, r0
 8011b54:	460a      	mov	r2, r1
 8011b56:	71fb      	strb	r3, [r7, #7]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	71bb      	strb	r3, [r7, #6]
    switch (time_unit)
 8011b5c:	79fb      	ldrb	r3, [r7, #7]
 8011b5e:	2b03      	cmp	r3, #3
 8011b60:	d82a      	bhi.n	8011bb8 <lcd_set_time_unit+0x6c>
 8011b62:	a201      	add	r2, pc, #4	; (adr r2, 8011b68 <lcd_set_time_unit+0x1c>)
 8011b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b68:	08011b79 	.word	0x08011b79
 8011b6c:	08011b89 	.word	0x08011b89
 8011b70:	08011b99 	.word	0x08011b99
 8011b74:	08011ba9 	.word	0x08011ba9
    {
        case H:
            g_lcd_map[REG_5] |= (1 << BIT_6);
 8011b78:	4b14      	ldr	r3, [pc, #80]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011b7a:	795b      	ldrb	r3, [r3, #5]
 8011b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	4b12      	ldr	r3, [pc, #72]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011b84:	715a      	strb	r2, [r3, #5]
        break;
 8011b86:	e018      	b.n	8011bba <lcd_set_time_unit+0x6e>
        case D:
            g_lcd_map[REG_9] |= (1 << BIT_5);
 8011b88:	4b10      	ldr	r3, [pc, #64]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011b8a:	7a5b      	ldrb	r3, [r3, #9]
 8011b8c:	f043 0320 	orr.w	r3, r3, #32
 8011b90:	b2da      	uxtb	r2, r3
 8011b92:	4b0e      	ldr	r3, [pc, #56]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011b94:	725a      	strb	r2, [r3, #9]
        break;
 8011b96:	e010      	b.n	8011bba <lcd_set_time_unit+0x6e>
        case S:
            g_lcd_map[REG_10] |= (1 << BIT_5);
 8011b98:	4b0c      	ldr	r3, [pc, #48]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011b9a:	7a9b      	ldrb	r3, [r3, #10]
 8011b9c:	f043 0320 	orr.w	r3, r3, #32
 8011ba0:	b2da      	uxtb	r2, r3
 8011ba2:	4b0a      	ldr	r3, [pc, #40]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011ba4:	729a      	strb	r2, [r3, #10]
        break;
 8011ba6:	e008      	b.n	8011bba <lcd_set_time_unit+0x6e>
        case M:
            g_lcd_map[REG_9] |= (1 << BIT_7);
 8011ba8:	4b08      	ldr	r3, [pc, #32]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011baa:	7a5b      	ldrb	r3, [r3, #9]
 8011bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	4b06      	ldr	r3, [pc, #24]	; (8011bcc <lcd_set_time_unit+0x80>)
 8011bb4:	725a      	strb	r2, [r3, #9]
        break;
 8011bb6:	e000      	b.n	8011bba <lcd_set_time_unit+0x6e>
        default:
        break;
 8011bb8:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011bba:	79bb      	ldrb	r3, [r7, #6]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f000 fafb 	bl	80121b8 <pcf8553_blink>
}
 8011bc2:	bf00      	nop
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	20001d9c 	.word	0x20001d9c

08011bd0 <lcd_set_vol_unit>:
 * @brief Función que imprime la unidad de volumen a utilizar.
 * @param Unidad a imprimir y velocidad de parpadeo.
 * @retval None
 */
void lcd_set_vol_unit(fmc_unit_volume_t vol_unit, blink_t blink_speed)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	460a      	mov	r2, r1
 8011bda:	71fb      	strb	r3, [r7, #7]
 8011bdc:	4613      	mov	r3, r2
 8011bde:	71bb      	strb	r3, [r7, #6]
    switch (vol_unit)
 8011be0:	79fb      	ldrb	r3, [r7, #7]
 8011be2:	2b06      	cmp	r3, #6
 8011be4:	f200 81e3 	bhi.w	8011fae <lcd_set_vol_unit+0x3de>
 8011be8:	a201      	add	r2, pc, #4	; (adr r2, 8011bf0 <lcd_set_vol_unit+0x20>)
 8011bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bee:	bf00      	nop
 8011bf0:	08011c0d 	.word	0x08011c0d
 8011bf4:	08011cff 	.word	0x08011cff
 8011bf8:	08011c63 	.word	0x08011c63
 8011bfc:	08011e75 	.word	0x08011e75
 8011c00:	08011da9 	.word	0x08011da9
 8011c04:	08011ef5 	.word	0x08011ef5
 8011c08:	08011f75 	.word	0x08011f75
    {
        case LT:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011c0c:	4b98      	ldr	r3, [pc, #608]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c0e:	7bdb      	ldrb	r3, [r3, #15]
 8011c10:	f043 0320 	orr.w	r3, r3, #32
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	4b96      	ldr	r3, [pc, #600]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c18:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011c1a:	4b95      	ldr	r3, [pc, #596]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	f043 0320 	orr.w	r3, r3, #32
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	4b92      	ldr	r3, [pc, #584]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c26:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011c28:	4b91      	ldr	r3, [pc, #580]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c2a:	795b      	ldrb	r3, [r3, #5]
 8011c2c:	f043 0320 	orr.w	r3, r3, #32
 8011c30:	b2da      	uxtb	r2, r3
 8011c32:	4b8f      	ldr	r3, [pc, #572]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c34:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011c36:	4b8e      	ldr	r3, [pc, #568]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c38:	7b9b      	ldrb	r3, [r3, #14]
 8011c3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c3e:	b2da      	uxtb	r2, r3
 8011c40:	4b8b      	ldr	r3, [pc, #556]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c42:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_10] |= (1 << BIT_0);
 8011c44:	4b8a      	ldr	r3, [pc, #552]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c46:	7a9b      	ldrb	r3, [r3, #10]
 8011c48:	f043 0301 	orr.w	r3, r3, #1
 8011c4c:	b2da      	uxtb	r2, r3
 8011c4e:	4b88      	ldr	r3, [pc, #544]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c50:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_9] |= (1 << BIT_6);
 8011c52:	4b87      	ldr	r3, [pc, #540]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c54:	7a5b      	ldrb	r3, [r3, #9]
 8011c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c5a:	b2da      	uxtb	r2, r3
 8011c5c:	4b84      	ldr	r3, [pc, #528]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c5e:	725a      	strb	r2, [r3, #9]
        break;
 8011c60:	e1a6      	b.n	8011fb0 <lcd_set_vol_unit+0x3e0>
        case KG:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011c62:	4b83      	ldr	r3, [pc, #524]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c64:	7bdb      	ldrb	r3, [r3, #15]
 8011c66:	f043 0320 	orr.w	r3, r3, #32
 8011c6a:	b2da      	uxtb	r2, r3
 8011c6c:	4b80      	ldr	r3, [pc, #512]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c6e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011c70:	4b7f      	ldr	r3, [pc, #508]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c72:	7bdb      	ldrb	r3, [r3, #15]
 8011c74:	f043 0310 	orr.w	r3, r3, #16
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	4b7d      	ldr	r3, [pc, #500]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c7c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011c7e:	4b7c      	ldr	r3, [pc, #496]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c80:	7bdb      	ldrb	r3, [r3, #15]
 8011c82:	f043 0304 	orr.w	r3, r3, #4
 8011c86:	b2da      	uxtb	r2, r3
 8011c88:	4b79      	ldr	r3, [pc, #484]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c8a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011c8c:	4b78      	ldr	r3, [pc, #480]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	f043 0320 	orr.w	r3, r3, #32
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	4b76      	ldr	r3, [pc, #472]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c98:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_4);
 8011c9a:	4b75      	ldr	r3, [pc, #468]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011c9c:	795b      	ldrb	r3, [r3, #5]
 8011c9e:	f043 0310 	orr.w	r3, r3, #16
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	4b72      	ldr	r3, [pc, #456]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011ca6:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011ca8:	4b71      	ldr	r3, [pc, #452]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011caa:	7b9b      	ldrb	r3, [r3, #14]
 8011cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	4b6f      	ldr	r3, [pc, #444]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cb4:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011cb6:	4b6e      	ldr	r3, [pc, #440]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cb8:	7bdb      	ldrb	r3, [r3, #15]
 8011cba:	f043 0302 	orr.w	r3, r3, #2
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	4b6b      	ldr	r3, [pc, #428]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cc2:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011cc4:	4b6a      	ldr	r3, [pc, #424]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	f043 0301 	orr.w	r3, r3, #1
 8011ccc:	b2da      	uxtb	r2, r3
 8011cce:	4b68      	ldr	r3, [pc, #416]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cd0:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011cd2:	4b67      	ldr	r3, [pc, #412]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cd4:	781b      	ldrb	r3, [r3, #0]
 8011cd6:	f043 0302 	orr.w	r3, r3, #2
 8011cda:	b2da      	uxtb	r2, r3
 8011cdc:	4b64      	ldr	r3, [pc, #400]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cde:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011ce0:	4b63      	ldr	r3, [pc, #396]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011ce2:	791b      	ldrb	r3, [r3, #4]
 8011ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	4b61      	ldr	r3, [pc, #388]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cec:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011cee:	4b60      	ldr	r3, [pc, #384]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cf0:	795b      	ldrb	r3, [r3, #5]
 8011cf2:	f043 0302 	orr.w	r3, r3, #2
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	4b5d      	ldr	r3, [pc, #372]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011cfa:	715a      	strb	r2, [r3, #5]
        break;
 8011cfc:	e158      	b.n	8011fb0 <lcd_set_vol_unit+0x3e0>
        case M3:
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011cfe:	4b5c      	ldr	r3, [pc, #368]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d00:	7bdb      	ldrb	r3, [r3, #15]
 8011d02:	f043 0320 	orr.w	r3, r3, #32
 8011d06:	b2da      	uxtb	r2, r3
 8011d08:	4b59      	ldr	r3, [pc, #356]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d0a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_10] |= (1 << BIT_2);
 8011d0c:	4b58      	ldr	r3, [pc, #352]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d0e:	7a9b      	ldrb	r3, [r3, #10]
 8011d10:	f043 0304 	orr.w	r3, r3, #4
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	4b56      	ldr	r3, [pc, #344]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d18:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_4);
 8011d1a:	4b55      	ldr	r3, [pc, #340]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d1c:	7bdb      	ldrb	r3, [r3, #15]
 8011d1e:	f043 0310 	orr.w	r3, r3, #16
 8011d22:	b2da      	uxtb	r2, r3
 8011d24:	4b52      	ldr	r3, [pc, #328]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d26:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011d28:	4b51      	ldr	r3, [pc, #324]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d2a:	7bdb      	ldrb	r3, [r3, #15]
 8011d2c:	f043 0308 	orr.w	r3, r3, #8
 8011d30:	b2da      	uxtb	r2, r3
 8011d32:	4b4f      	ldr	r3, [pc, #316]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d34:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011d36:	4b4e      	ldr	r3, [pc, #312]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	f043 0320 	orr.w	r3, r3, #32
 8011d3e:	b2da      	uxtb	r2, r3
 8011d40:	4b4b      	ldr	r3, [pc, #300]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d42:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011d44:	4b4a      	ldr	r3, [pc, #296]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	f043 0308 	orr.w	r3, r3, #8
 8011d4c:	b2da      	uxtb	r2, r3
 8011d4e:	4b48      	ldr	r3, [pc, #288]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d50:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011d52:	4b47      	ldr	r3, [pc, #284]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d54:	7b9b      	ldrb	r3, [r3, #14]
 8011d56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d5a:	b2da      	uxtb	r2, r3
 8011d5c:	4b44      	ldr	r3, [pc, #272]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d5e:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011d60:	4b43      	ldr	r3, [pc, #268]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d62:	7cdb      	ldrb	r3, [r3, #19]
 8011d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d68:	b2da      	uxtb	r2, r3
 8011d6a:	4b41      	ldr	r3, [pc, #260]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d6c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011d6e:	4b40      	ldr	r3, [pc, #256]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d70:	7cdb      	ldrb	r3, [r3, #19]
 8011d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d76:	b2da      	uxtb	r2, r3
 8011d78:	4b3d      	ldr	r3, [pc, #244]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d7a:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011d7c:	4b3c      	ldr	r3, [pc, #240]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	f043 0301 	orr.w	r3, r3, #1
 8011d84:	b2da      	uxtb	r2, r3
 8011d86:	4b3a      	ldr	r3, [pc, #232]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d88:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_4] |= (1 << BIT_7);
 8011d8a:	4b39      	ldr	r3, [pc, #228]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d8c:	791b      	ldrb	r3, [r3, #4]
 8011d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d92:	b2da      	uxtb	r2, r3
 8011d94:	4b36      	ldr	r3, [pc, #216]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d96:	711a      	strb	r2, [r3, #4]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011d98:	4b35      	ldr	r3, [pc, #212]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011d9a:	795b      	ldrb	r3, [r3, #5]
 8011d9c:	f043 0302 	orr.w	r3, r3, #2
 8011da0:	b2da      	uxtb	r2, r3
 8011da2:	4b33      	ldr	r3, [pc, #204]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011da4:	715a      	strb	r2, [r3, #5]
        break;
 8011da6:	e103      	b.n	8011fb0 <lcd_set_vol_unit+0x3e0>
        case BR:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8011da8:	4b31      	ldr	r3, [pc, #196]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011daa:	7a9b      	ldrb	r3, [r3, #10]
 8011dac:	f043 0308 	orr.w	r3, r3, #8
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	4b2f      	ldr	r3, [pc, #188]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011db4:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_10] |= (1 << BIT_4);
 8011db6:	4b2e      	ldr	r3, [pc, #184]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011db8:	7a9b      	ldrb	r3, [r3, #10]
 8011dba:	f043 0310 	orr.w	r3, r3, #16
 8011dbe:	b2da      	uxtb	r2, r3
 8011dc0:	4b2b      	ldr	r3, [pc, #172]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dc2:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011dc4:	4b2a      	ldr	r3, [pc, #168]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dc6:	7bdb      	ldrb	r3, [r3, #15]
 8011dc8:	f043 0308 	orr.w	r3, r3, #8
 8011dcc:	b2da      	uxtb	r2, r3
 8011dce:	4b28      	ldr	r3, [pc, #160]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dd0:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011dd2:	4b27      	ldr	r3, [pc, #156]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	f043 0310 	orr.w	r3, r3, #16
 8011dda:	b2da      	uxtb	r2, r3
 8011ddc:	4b24      	ldr	r3, [pc, #144]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dde:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_2);
 8011de0:	4b23      	ldr	r3, [pc, #140]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011de2:	795b      	ldrb	r3, [r3, #5]
 8011de4:	f043 0304 	orr.w	r3, r3, #4
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	4b21      	ldr	r3, [pc, #132]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dec:	715a      	strb	r2, [r3, #5]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011dee:	4b20      	ldr	r3, [pc, #128]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	f043 0308 	orr.w	r3, r3, #8
 8011df6:	b2da      	uxtb	r2, r3
 8011df8:	4b1d      	ldr	r3, [pc, #116]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dfa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011dfc:	4b1c      	ldr	r3, [pc, #112]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011dfe:	795b      	ldrb	r3, [r3, #5]
 8011e00:	f043 0320 	orr.w	r3, r3, #32
 8011e04:	b2da      	uxtb	r2, r3
 8011e06:	4b1a      	ldr	r3, [pc, #104]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e08:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011e0a:	4b19      	ldr	r3, [pc, #100]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e0c:	7b9b      	ldrb	r3, [r3, #14]
 8011e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e12:	b2da      	uxtb	r2, r3
 8011e14:	4b16      	ldr	r3, [pc, #88]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e16:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011e18:	4b15      	ldr	r3, [pc, #84]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e1a:	7bdb      	ldrb	r3, [r3, #15]
 8011e1c:	f043 0302 	orr.w	r3, r3, #2
 8011e20:	b2da      	uxtb	r2, r3
 8011e22:	4b13      	ldr	r3, [pc, #76]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e24:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_19] |= (1 << BIT_7);
 8011e26:	4b12      	ldr	r3, [pc, #72]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e28:	7cdb      	ldrb	r3, [r3, #19]
 8011e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	4b0f      	ldr	r3, [pc, #60]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e32:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011e34:	4b0e      	ldr	r3, [pc, #56]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e36:	7cdb      	ldrb	r3, [r3, #19]
 8011e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e3c:	b2da      	uxtb	r2, r3
 8011e3e:	4b0c      	ldr	r3, [pc, #48]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e40:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011e42:	4b0b      	ldr	r3, [pc, #44]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	f043 0301 	orr.w	r3, r3, #1
 8011e4a:	b2da      	uxtb	r2, r3
 8011e4c:	4b08      	ldr	r3, [pc, #32]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e4e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011e50:	4b07      	ldr	r3, [pc, #28]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	f043 0302 	orr.w	r3, r3, #2
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	4b05      	ldr	r3, [pc, #20]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e5c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_0);
 8011e5e:	4b04      	ldr	r3, [pc, #16]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e60:	795b      	ldrb	r3, [r3, #5]
 8011e62:	f043 0301 	orr.w	r3, r3, #1
 8011e66:	b2da      	uxtb	r2, r3
 8011e68:	4b01      	ldr	r3, [pc, #4]	; (8011e70 <lcd_set_vol_unit+0x2a0>)
 8011e6a:	715a      	strb	r2, [r3, #5]
        break;
 8011e6c:	e0a0      	b.n	8011fb0 <lcd_set_vol_unit+0x3e0>
 8011e6e:	bf00      	nop
 8011e70:	20001d9c 	.word	0x20001d9c
        case GL:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8011e74:	4b52      	ldr	r3, [pc, #328]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011e76:	7a9b      	ldrb	r3, [r3, #10]
 8011e78:	f043 0308 	orr.w	r3, r3, #8
 8011e7c:	b2da      	uxtb	r2, r3
 8011e7e:	4b50      	ldr	r3, [pc, #320]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011e80:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011e82:	4b4f      	ldr	r3, [pc, #316]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011e84:	7bdb      	ldrb	r3, [r3, #15]
 8011e86:	f043 0320 	orr.w	r3, r3, #32
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	4b4c      	ldr	r3, [pc, #304]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011e8e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011e90:	4b4b      	ldr	r3, [pc, #300]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f043 0310 	orr.w	r3, r3, #16
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	4b49      	ldr	r3, [pc, #292]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011e9c:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_5);
 8011e9e:	4b48      	ldr	r3, [pc, #288]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	f043 0320 	orr.w	r3, r3, #32
 8011ea6:	b2da      	uxtb	r2, r3
 8011ea8:	4b45      	ldr	r3, [pc, #276]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011eaa:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_0] |= (1 << BIT_3);
 8011eac:	4b44      	ldr	r3, [pc, #272]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	f043 0308 	orr.w	r3, r3, #8
 8011eb4:	b2da      	uxtb	r2, r3
 8011eb6:	4b42      	ldr	r3, [pc, #264]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011eb8:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_5);
 8011eba:	4b41      	ldr	r3, [pc, #260]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ebc:	795b      	ldrb	r3, [r3, #5]
 8011ebe:	f043 0320 	orr.w	r3, r3, #32
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	4b3e      	ldr	r3, [pc, #248]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ec6:	715a      	strb	r2, [r3, #5]

            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011ec8:	4b3d      	ldr	r3, [pc, #244]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011eca:	7bdb      	ldrb	r3, [r3, #15]
 8011ecc:	f043 0302 	orr.w	r3, r3, #2
 8011ed0:	b2da      	uxtb	r2, r3
 8011ed2:	4b3b      	ldr	r3, [pc, #236]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ed4:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011ed6:	4b3a      	ldr	r3, [pc, #232]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	f043 0302 	orr.w	r3, r3, #2
 8011ede:	b2da      	uxtb	r2, r3
 8011ee0:	4b37      	ldr	r3, [pc, #220]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ee2:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011ee4:	4b36      	ldr	r3, [pc, #216]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ee6:	795b      	ldrb	r3, [r3, #5]
 8011ee8:	f043 0302 	orr.w	r3, r3, #2
 8011eec:	b2da      	uxtb	r2, r3
 8011eee:	4b34      	ldr	r3, [pc, #208]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ef0:	715a      	strb	r2, [r3, #5]
        break;
 8011ef2:	e05d      	b.n	8011fb0 <lcd_set_vol_unit+0x3e0>
        case CELSIUS:
            g_lcd_map[REG_10] |= (1 << BIT_3);
 8011ef4:	4b32      	ldr	r3, [pc, #200]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011ef6:	7a9b      	ldrb	r3, [r3, #10]
 8011ef8:	f043 0308 	orr.w	r3, r3, #8
 8011efc:	b2da      	uxtb	r2, r3
 8011efe:	4b30      	ldr	r3, [pc, #192]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f00:	729a      	strb	r2, [r3, #10]
            g_lcd_map[REG_15] |= (1 << BIT_5);
 8011f02:	4b2f      	ldr	r3, [pc, #188]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f04:	7bdb      	ldrb	r3, [r3, #15]
 8011f06:	f043 0320 	orr.w	r3, r3, #32
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	4b2c      	ldr	r3, [pc, #176]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f0e:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_3);
 8011f10:	4b2b      	ldr	r3, [pc, #172]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f12:	7bdb      	ldrb	r3, [r3, #15]
 8011f14:	f043 0308 	orr.w	r3, r3, #8
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	4b29      	ldr	r3, [pc, #164]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f1c:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011f1e:	4b28      	ldr	r3, [pc, #160]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f20:	7bdb      	ldrb	r3, [r3, #15]
 8011f22:	f043 0304 	orr.w	r3, r3, #4
 8011f26:	b2da      	uxtb	r2, r3
 8011f28:	4b25      	ldr	r3, [pc, #148]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f2a:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011f2c:	4b24      	ldr	r3, [pc, #144]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	f043 0310 	orr.w	r3, r3, #16
 8011f34:	b2da      	uxtb	r2, r3
 8011f36:	4b22      	ldr	r3, [pc, #136]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f38:	701a      	strb	r2, [r3, #0]

            g_lcd_map[REG_14] |= (1 << BIT_7);
 8011f3a:	4b21      	ldr	r3, [pc, #132]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f3c:	7b9b      	ldrb	r3, [r3, #14]
 8011f3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f42:	b2da      	uxtb	r2, r3
 8011f44:	4b1e      	ldr	r3, [pc, #120]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f46:	739a      	strb	r2, [r3, #14]
            g_lcd_map[REG_15] |= (1 << BIT_1);
 8011f48:	4b1d      	ldr	r3, [pc, #116]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f4a:	7bdb      	ldrb	r3, [r3, #15]
 8011f4c:	f043 0302 	orr.w	r3, r3, #2
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	4b1b      	ldr	r3, [pc, #108]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f54:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_1);
 8011f56:	4b1a      	ldr	r3, [pc, #104]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	f043 0302 	orr.w	r3, r3, #2
 8011f5e:	b2da      	uxtb	r2, r3
 8011f60:	4b17      	ldr	r3, [pc, #92]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f62:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_5] |= (1 << BIT_1);
 8011f64:	4b16      	ldr	r3, [pc, #88]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f66:	795b      	ldrb	r3, [r3, #5]
 8011f68:	f043 0302 	orr.w	r3, r3, #2
 8011f6c:	b2da      	uxtb	r2, r3
 8011f6e:	4b14      	ldr	r3, [pc, #80]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f70:	715a      	strb	r2, [r3, #5]
        break;
 8011f72:	e01d      	b.n	8011fb0 <lcd_set_vol_unit+0x3e0>
        case NOTHING:
            g_lcd_map[REG_15] |= (1 << BIT_2);
 8011f74:	4b12      	ldr	r3, [pc, #72]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f76:	7bdb      	ldrb	r3, [r3, #15]
 8011f78:	f043 0304 	orr.w	r3, r3, #4
 8011f7c:	b2da      	uxtb	r2, r3
 8011f7e:	4b10      	ldr	r3, [pc, #64]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f80:	73da      	strb	r2, [r3, #15]
            g_lcd_map[REG_0] |= (1 << BIT_4);
 8011f82:	4b0f      	ldr	r3, [pc, #60]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	f043 0310 	orr.w	r3, r3, #16
 8011f8a:	b2da      	uxtb	r2, r3
 8011f8c:	4b0c      	ldr	r3, [pc, #48]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f8e:	701a      	strb	r2, [r3, #0]
            g_lcd_map[REG_19] |= (1 << BIT_6);
 8011f90:	4b0b      	ldr	r3, [pc, #44]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f92:	7cdb      	ldrb	r3, [r3, #19]
 8011f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f98:	b2da      	uxtb	r2, r3
 8011f9a:	4b09      	ldr	r3, [pc, #36]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011f9c:	74da      	strb	r2, [r3, #19]
            g_lcd_map[REG_0] |= (1 << BIT_0);
 8011f9e:	4b08      	ldr	r3, [pc, #32]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f043 0301 	orr.w	r3, r3, #1
 8011fa6:	b2da      	uxtb	r2, r3
 8011fa8:	4b05      	ldr	r3, [pc, #20]	; (8011fc0 <lcd_set_vol_unit+0x3f0>)
 8011faa:	701a      	strb	r2, [r3, #0]
        break;
 8011fac:	e000      	b.n	8011fb0 <lcd_set_vol_unit+0x3e0>
        default:
        break;
 8011fae:	bf00      	nop
    }
    pcf8553_blink(blink_speed);
 8011fb0:	79bb      	ldrb	r3, [r7, #6]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f000 f900 	bl	80121b8 <pcf8553_blink>
}
 8011fb8:	bf00      	nop
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	20001d9c 	.word	0x20001d9c

08011fc4 <lcd_write_line>:
 * la primera posicion de cada linea.
 * @param
 * @retval None
 */
void lcd_write_line(uint8_t seg, uint8_t data)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b085      	sub	sp, #20
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	4603      	mov	r3, r0
 8011fcc:	460a      	mov	r2, r1
 8011fce:	71fb      	strb	r3, [r7, #7]
 8011fd0:	4613      	mov	r3, r2
 8011fd2:	71bb      	strb	r3, [r7, #6]
    uint8_t reg = 0;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	73fb      	strb	r3, [r7, #15]
    uint8_t pos = 0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	73bb      	strb	r3, [r7, #14]

    /*
     *
     *
     */
    switch (g_row)
 8011fdc:	4b33      	ldr	r3, [pc, #204]	; (80120ac <lcd_write_line+0xe8>)
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d002      	beq.n	8011fea <lcd_write_line+0x26>
 8011fe4:	2b02      	cmp	r3, #2
 8011fe6:	d01b      	beq.n	8012020 <lcd_write_line+0x5c>
            pos += g_col * 2;
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
            pos = pos % 8; // @suppress("Avoid magic numbers")
        break;
        default:
        break;
 8011fe8:	e035      	b.n	8012056 <lcd_write_line+0x92>
            pos = octal_1[seg].pos;
 8011fea:	79fb      	ldrb	r3, [r7, #7]
 8011fec:	4a30      	ldr	r2, [pc, #192]	; (80120b0 <lcd_write_line+0xec>)
 8011fee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8011ff2:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 8011ff4:	4b2f      	ldr	r3, [pc, #188]	; (80120b4 <lcd_write_line+0xf0>)
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	005b      	lsls	r3, r3, #1
 8011ffa:	b2da      	uxtb	r2, r3
 8011ffc:	7bbb      	ldrb	r3, [r7, #14]
 8011ffe:	4413      	add	r3, r2
 8012000:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_1[seg].reg; // @suppress("Avoid magic numbers")
 8012002:	7bbb      	ldrb	r3, [r7, #14]
 8012004:	08db      	lsrs	r3, r3, #3
 8012006:	b2da      	uxtb	r2, r3
 8012008:	79fb      	ldrb	r3, [r7, #7]
 801200a:	4929      	ldr	r1, [pc, #164]	; (80120b0 <lcd_write_line+0xec>)
 801200c:	005b      	lsls	r3, r3, #1
 801200e:	440b      	add	r3, r1
 8012010:	785b      	ldrb	r3, [r3, #1]
 8012012:	4413      	add	r3, r2
 8012014:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 8012016:	7bbb      	ldrb	r3, [r7, #14]
 8012018:	f003 0307 	and.w	r3, r3, #7
 801201c:	73bb      	strb	r3, [r7, #14]
        break;
 801201e:	e01a      	b.n	8012056 <lcd_write_line+0x92>
            pos = octal_2[seg].pos;
 8012020:	79fb      	ldrb	r3, [r7, #7]
 8012022:	4a25      	ldr	r2, [pc, #148]	; (80120b8 <lcd_write_line+0xf4>)
 8012024:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8012028:	73bb      	strb	r3, [r7, #14]
            pos += g_col * 2;
 801202a:	4b22      	ldr	r3, [pc, #136]	; (80120b4 <lcd_write_line+0xf0>)
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	b2da      	uxtb	r2, r3
 8012032:	7bbb      	ldrb	r3, [r7, #14]
 8012034:	4413      	add	r3, r2
 8012036:	73bb      	strb	r3, [r7, #14]
            reg = (pos / 8) + octal_2[seg].reg; // @suppress("Avoid magic numbers")
 8012038:	7bbb      	ldrb	r3, [r7, #14]
 801203a:	08db      	lsrs	r3, r3, #3
 801203c:	b2da      	uxtb	r2, r3
 801203e:	79fb      	ldrb	r3, [r7, #7]
 8012040:	491d      	ldr	r1, [pc, #116]	; (80120b8 <lcd_write_line+0xf4>)
 8012042:	005b      	lsls	r3, r3, #1
 8012044:	440b      	add	r3, r1
 8012046:	785b      	ldrb	r3, [r3, #1]
 8012048:	4413      	add	r3, r2
 801204a:	73fb      	strb	r3, [r7, #15]
            pos = pos % 8; // @suppress("Avoid magic numbers")
 801204c:	7bbb      	ldrb	r3, [r7, #14]
 801204e:	f003 0307 	and.w	r3, r3, #7
 8012052:	73bb      	strb	r3, [r7, #14]
        break;
 8012054:	bf00      	nop
    }

    if (data)
 8012056:	79bb      	ldrb	r3, [r7, #6]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00f      	beq.n	801207c <lcd_write_line+0xb8>
    {
        g_lcd_map[reg] |= 1 << pos;
 801205c:	7bfb      	ldrb	r3, [r7, #15]
 801205e:	4a17      	ldr	r2, [pc, #92]	; (80120bc <lcd_write_line+0xf8>)
 8012060:	5cd3      	ldrb	r3, [r2, r3]
 8012062:	b25a      	sxtb	r2, r3
 8012064:	7bbb      	ldrb	r3, [r7, #14]
 8012066:	2101      	movs	r1, #1
 8012068:	fa01 f303 	lsl.w	r3, r1, r3
 801206c:	b25b      	sxtb	r3, r3
 801206e:	4313      	orrs	r3, r2
 8012070:	b25a      	sxtb	r2, r3
 8012072:	7bfb      	ldrb	r3, [r7, #15]
 8012074:	b2d1      	uxtb	r1, r2
 8012076:	4a11      	ldr	r2, [pc, #68]	; (80120bc <lcd_write_line+0xf8>)
 8012078:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        g_lcd_map[reg] &= ~(1 << pos);
    }
}
 801207a:	e010      	b.n	801209e <lcd_write_line+0xda>
        g_lcd_map[reg] &= ~(1 << pos);
 801207c:	7bfb      	ldrb	r3, [r7, #15]
 801207e:	4a0f      	ldr	r2, [pc, #60]	; (80120bc <lcd_write_line+0xf8>)
 8012080:	5cd3      	ldrb	r3, [r2, r3]
 8012082:	b25a      	sxtb	r2, r3
 8012084:	7bbb      	ldrb	r3, [r7, #14]
 8012086:	2101      	movs	r1, #1
 8012088:	fa01 f303 	lsl.w	r3, r1, r3
 801208c:	b25b      	sxtb	r3, r3
 801208e:	43db      	mvns	r3, r3
 8012090:	b25b      	sxtb	r3, r3
 8012092:	4013      	ands	r3, r2
 8012094:	b25a      	sxtb	r2, r3
 8012096:	7bfb      	ldrb	r3, [r7, #15]
 8012098:	b2d1      	uxtb	r1, r2
 801209a:	4a08      	ldr	r2, [pc, #32]	; (80120bc <lcd_write_line+0xf8>)
 801209c:	54d1      	strb	r1, [r2, r3]
}
 801209e:	bf00      	nop
 80120a0:	3714      	adds	r7, #20
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop
 80120ac:	20001d09 	.word	0x20001d09
 80120b0:	20000120 	.word	0x20000120
 80120b4:	20001d08 	.word	0x20001d08
 80120b8:	20000130 	.word	0x20000130
 80120bc:	20001d9c 	.word	0x20001d9c

080120c0 <prepare_to_send>:
 * COM_0_ADDRESS
 * COM_1_ADDRESS
 *
 */
void static prepare_to_send(uint8_t add)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b084      	sub	sp, #16
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	4603      	mov	r3, r0
 80120c8:	71fb      	strb	r3, [r7, #7]
    register_address_t reg;
    reg.bits.address = add;
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	f003 031f 	and.w	r3, r3, #31
 80120d0:	b2da      	uxtb	r2, r3
 80120d2:	7b3b      	ldrb	r3, [r7, #12]
 80120d4:	f362 0304 	bfi	r3, r2, #0, #5
 80120d8:	733b      	strb	r3, [r7, #12]
    reg.bits.not_used = 0;
 80120da:	7b3b      	ldrb	r3, [r7, #12]
 80120dc:	f36f 1346 	bfc	r3, #5, #2
 80120e0:	733b      	strb	r3, [r7, #12]
    reg.bits.read_write = WRITE_DATA;
 80120e2:	7b3b      	ldrb	r3, [r7, #12]
 80120e4:	f36f 13c7 	bfc	r3, #7, #1
 80120e8:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(&h_spi1, &(reg.data), 1, DEFAULT_DELAY);
 80120ea:	2314      	movs	r3, #20
 80120ec:	f107 010c 	add.w	r1, r7, #12
 80120f0:	2201      	movs	r2, #1
 80120f2:	4803      	ldr	r0, [pc, #12]	; (8012100 <prepare_to_send+0x40>)
 80120f4:	f7f7 fb36 	bl	8009764 <HAL_SPI_Transmit>
}
 80120f8:	bf00      	nop
 80120fa:	3710      	adds	r7, #16
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	20001d0c 	.word	0x20001d0c

08012104 <spi1_init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void spi1_init(void)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	af00      	add	r7, sp, #0
    h_spi1.Instance = SPI1;
 8012108:	4b29      	ldr	r3, [pc, #164]	; (80121b0 <spi1_init+0xac>)
 801210a:	4a2a      	ldr	r2, [pc, #168]	; (80121b4 <spi1_init+0xb0>)
 801210c:	601a      	str	r2, [r3, #0]
    h_spi1.Init.Mode = SPI_MODE_MASTER;
 801210e:	4b28      	ldr	r3, [pc, #160]	; (80121b0 <spi1_init+0xac>)
 8012110:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8012114:	605a      	str	r2, [r3, #4]
    h_spi1.Init.Direction = SPI_DIRECTION_1LINE;
 8012116:	4b26      	ldr	r3, [pc, #152]	; (80121b0 <spi1_init+0xac>)
 8012118:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 801211c:	609a      	str	r2, [r3, #8]
    h_spi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801211e:	4b24      	ldr	r3, [pc, #144]	; (80121b0 <spi1_init+0xac>)
 8012120:	2207      	movs	r2, #7
 8012122:	60da      	str	r2, [r3, #12]
    h_spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012124:	4b22      	ldr	r3, [pc, #136]	; (80121b0 <spi1_init+0xac>)
 8012126:	2200      	movs	r2, #0
 8012128:	611a      	str	r2, [r3, #16]
    h_spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801212a:	4b21      	ldr	r3, [pc, #132]	; (80121b0 <spi1_init+0xac>)
 801212c:	2200      	movs	r2, #0
 801212e:	615a      	str	r2, [r3, #20]
    h_spi1.Init.NSS = SPI_NSS_SOFT;
 8012130:	4b1f      	ldr	r3, [pc, #124]	; (80121b0 <spi1_init+0xac>)
 8012132:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012136:	619a      	str	r2, [r3, #24]
    h_spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012138:	4b1d      	ldr	r3, [pc, #116]	; (80121b0 <spi1_init+0xac>)
 801213a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801213e:	61da      	str	r2, [r3, #28]
    h_spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012140:	4b1b      	ldr	r3, [pc, #108]	; (80121b0 <spi1_init+0xac>)
 8012142:	2200      	movs	r2, #0
 8012144:	621a      	str	r2, [r3, #32]
    h_spi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012146:	4b1a      	ldr	r3, [pc, #104]	; (80121b0 <spi1_init+0xac>)
 8012148:	2200      	movs	r2, #0
 801214a:	625a      	str	r2, [r3, #36]	; 0x24
    h_spi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801214c:	4b18      	ldr	r3, [pc, #96]	; (80121b0 <spi1_init+0xac>)
 801214e:	2200      	movs	r2, #0
 8012150:	629a      	str	r2, [r3, #40]	; 0x28
    h_spi1.Init.CRCPolynomial = 7; // @suppress("Avoid magic numbers")
 8012152:	4b17      	ldr	r3, [pc, #92]	; (80121b0 <spi1_init+0xac>)
 8012154:	2207      	movs	r2, #7
 8012156:	62da      	str	r2, [r3, #44]	; 0x2c
    h_spi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012158:	4b15      	ldr	r3, [pc, #84]	; (80121b0 <spi1_init+0xac>)
 801215a:	2200      	movs	r2, #0
 801215c:	631a      	str	r2, [r3, #48]	; 0x30
    h_spi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801215e:	4b14      	ldr	r3, [pc, #80]	; (80121b0 <spi1_init+0xac>)
 8012160:	2200      	movs	r2, #0
 8012162:	635a      	str	r2, [r3, #52]	; 0x34
    h_spi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8012164:	4b12      	ldr	r3, [pc, #72]	; (80121b0 <spi1_init+0xac>)
 8012166:	2200      	movs	r2, #0
 8012168:	639a      	str	r2, [r3, #56]	; 0x38
    h_spi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 801216a:	4b11      	ldr	r3, [pc, #68]	; (80121b0 <spi1_init+0xac>)
 801216c:	2200      	movs	r2, #0
 801216e:	63da      	str	r2, [r3, #60]	; 0x3c
    h_spi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8012170:	4b0f      	ldr	r3, [pc, #60]	; (80121b0 <spi1_init+0xac>)
 8012172:	2200      	movs	r2, #0
 8012174:	649a      	str	r2, [r3, #72]	; 0x48
    h_spi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8012176:	4b0e      	ldr	r3, [pc, #56]	; (80121b0 <spi1_init+0xac>)
 8012178:	2200      	movs	r2, #0
 801217a:	64da      	str	r2, [r3, #76]	; 0x4c
    h_spi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 801217c:	4b0c      	ldr	r3, [pc, #48]	; (80121b0 <spi1_init+0xac>)
 801217e:	2200      	movs	r2, #0
 8012180:	651a      	str	r2, [r3, #80]	; 0x50
    h_spi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8012182:	4b0b      	ldr	r3, [pc, #44]	; (80121b0 <spi1_init+0xac>)
 8012184:	2200      	movs	r2, #0
 8012186:	655a      	str	r2, [r3, #84]	; 0x54
    h_spi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8012188:	4b09      	ldr	r3, [pc, #36]	; (80121b0 <spi1_init+0xac>)
 801218a:	2200      	movs	r2, #0
 801218c:	659a      	str	r2, [r3, #88]	; 0x58
    h_spi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 801218e:	4b08      	ldr	r3, [pc, #32]	; (80121b0 <spi1_init+0xac>)
 8012190:	2200      	movs	r2, #0
 8012192:	65da      	str	r2, [r3, #92]	; 0x5c
    h_spi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8012194:	4b06      	ldr	r3, [pc, #24]	; (80121b0 <spi1_init+0xac>)
 8012196:	2200      	movs	r2, #0
 8012198:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_SPI_Init(&h_spi1) != HAL_OK)
 801219a:	4805      	ldr	r0, [pc, #20]	; (80121b0 <spi1_init+0xac>)
 801219c:	f7f7 f9cc 	bl	8009538 <HAL_SPI_Init>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d001      	beq.n	80121aa <spi1_init+0xa6>
    {
        Error_Handler();
 80121a6:	f7ef f82d 	bl	8001204 <Error_Handler>
    }
}
 80121aa:	bf00      	nop
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	20001d0c 	.word	0x20001d0c
 80121b4:	40013000 	.word	0x40013000

080121b8 <pcf8553_blink>:
 * PCF_BLINK_ONE_SECOND,
 * PCF_BLINK_HALF_SECOND
 * @retval None
 */
void pcf8553_blink(blink_t mode)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	4603      	mov	r3, r0
 80121c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80121c2:	2200      	movs	r2, #0
 80121c4:	2110      	movs	r1, #16
 80121c6:	480f      	ldr	r0, [pc, #60]	; (8012204 <pcf8553_blink+0x4c>)
 80121c8:	f7f2 f864 	bl	8004294 <HAL_GPIO_WritePin>
    g_display_ctrl_2.reg_bits.blink = mode;
 80121cc:	79fb      	ldrb	r3, [r7, #7]
 80121ce:	f003 0303 	and.w	r3, r3, #3
 80121d2:	b2d9      	uxtb	r1, r3
 80121d4:	4a0c      	ldr	r2, [pc, #48]	; (8012208 <pcf8553_blink+0x50>)
 80121d6:	7813      	ldrb	r3, [r2, #0]
 80121d8:	f361 0342 	bfi	r3, r1, #1, #2
 80121dc:	7013      	strb	r3, [r2, #0]
    prepare_to_send(DISPLAY_CTRL_2_ADDRESS);
 80121de:	2003      	movs	r0, #3
 80121e0:	f7ff ff6e 	bl	80120c0 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80121e4:	2314      	movs	r3, #20
 80121e6:	2201      	movs	r2, #1
 80121e8:	4907      	ldr	r1, [pc, #28]	; (8012208 <pcf8553_blink+0x50>)
 80121ea:	4808      	ldr	r0, [pc, #32]	; (801220c <pcf8553_blink+0x54>)
 80121ec:	f7f7 faba 	bl	8009764 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80121f0:	2201      	movs	r2, #1
 80121f2:	2110      	movs	r1, #16
 80121f4:	4803      	ldr	r0, [pc, #12]	; (8012204 <pcf8553_blink+0x4c>)
 80121f6:	f7f2 f84d 	bl	8004294 <HAL_GPIO_WritePin>
}
 80121fa:	bf00      	nop
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	42020000 	.word	0x42020000
 8012208:	20001db4 	.word	0x20001db4
 801220c:	20001d0c 	.word	0x20001d0c

08012210 <pcf8553_clear_buff>:

void pcf8553_clear_buff()
{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
    /*
     * Limpia el buffer final, que es mandado directamente al controlador de la
     * pantalla LCD.
     */
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012216:	2300      	movs	r3, #0
 8012218:	607b      	str	r3, [r7, #4]
 801221a:	e007      	b.n	801222c <pcf8553_clear_buff+0x1c>
    {
        g_lcd_map[cont_buff_t] = 0;
 801221c:	4a08      	ldr	r2, [pc, #32]	; (8012240 <pcf8553_clear_buff+0x30>)
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	4413      	add	r3, r2
 8012222:	2200      	movs	r2, #0
 8012224:	701a      	strb	r2, [r3, #0]
    for (int cont_buff_t = 0; cont_buff_t < PCF8553_DATA_SIZE; cont_buff_t++)
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	3301      	adds	r3, #1
 801222a:	607b      	str	r3, [r7, #4]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b13      	cmp	r3, #19
 8012230:	ddf4      	ble.n	801221c <pcf8553_clear_buff+0xc>
    }
}
 8012232:	bf00      	nop
 8012234:	bf00      	nop
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr
 8012240:	20001d9c 	.word	0x20001d9c

08012244 <pcf8553_dump>:
 *
 * @param None
 * @retval None
 */
void pcf8553_dump()
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 801224a:	2200      	movs	r2, #0
 801224c:	2110      	movs	r1, #16
 801224e:	4810      	ldr	r0, [pc, #64]	; (8012290 <pcf8553_dump+0x4c>)
 8012250:	f7f2 f820 	bl	8004294 <HAL_GPIO_WritePin>
    prepare_to_send(DATA_ADDRESS);
 8012254:	2004      	movs	r0, #4
 8012256:	f7ff ff33 	bl	80120c0 <prepare_to_send>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801225a:	2300      	movs	r3, #0
 801225c:	607b      	str	r3, [r7, #4]
 801225e:	e00a      	b.n	8012276 <pcf8553_dump+0x32>
    {
        HAL_SPI_Transmit(&h_spi1, g_lcd_map + i, 1, DEFAULT_DELAY);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4a0c      	ldr	r2, [pc, #48]	; (8012294 <pcf8553_dump+0x50>)
 8012264:	1899      	adds	r1, r3, r2
 8012266:	2314      	movs	r3, #20
 8012268:	2201      	movs	r2, #1
 801226a:	480b      	ldr	r0, [pc, #44]	; (8012298 <pcf8553_dump+0x54>)
 801226c:	f7f7 fa7a 	bl	8009764 <HAL_SPI_Transmit>
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	3301      	adds	r3, #1
 8012274:	607b      	str	r3, [r7, #4]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b13      	cmp	r3, #19
 801227a:	ddf1      	ble.n	8012260 <pcf8553_dump+0x1c>
    }
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 801227c:	2201      	movs	r2, #1
 801227e:	2110      	movs	r1, #16
 8012280:	4803      	ldr	r0, [pc, #12]	; (8012290 <pcf8553_dump+0x4c>)
 8012282:	f7f2 f807 	bl	8004294 <HAL_GPIO_WritePin>
}
 8012286:	bf00      	nop
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	42020000 	.word	0x42020000
 8012294:	20001d9c 	.word	0x20001d9c
 8012298:	20001d0c 	.word	0x20001d0c

0801229c <pcf8553_init>:
 * @brief Llamar a esta función antes de empezar a trabajar con el driver.
 * @param None
 * @retval None
 */
void pcf8553_init()
{
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
    spi1_init();
 80122a0:	f7ff ff30 	bl	8012104 <spi1_init>
    pcf8553_reset();
 80122a4:	f000 f830 	bl	8012308 <pcf8553_reset>
    HAL_Delay(DEFAULT_DELAY);
 80122a8:	2314      	movs	r3, #20
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7ef fb1a 	bl	80018e4 <HAL_Delay>
     * @brief El pcf8553 tiene un pin de chip select, la siguiente instruccion
     * habilita el chip, el parametro GPIO_PIN_RESET es muy parecido a un
     * numero magico, se debe buscar una mejor solucion.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_RESET);
 80122b0:	2200      	movs	r2, #0
 80122b2:	2110      	movs	r1, #16
 80122b4:	480f      	ldr	r0, [pc, #60]	; (80122f4 <pcf8553_init+0x58>)
 80122b6:	f7f1 ffed 	bl	8004294 <HAL_GPIO_WritePin>
     *  Display_crtl_2 = 1 to enable display.
     *  Luego de un tiempo olvidé porque hice este comentario, no parece
     *  tener sentido.
     *
     */
    prepare_to_send(0x1);
 80122ba:	2001      	movs	r0, #1
 80122bc:	f7ff ff00 	bl	80120c0 <prepare_to_send>
    HAL_SPI_Transmit(&h_spi1, &(g_device_ctrl.reg_data), 1, DEFAULT_DELAY);
 80122c0:	2314      	movs	r3, #20
 80122c2:	2201      	movs	r2, #1
 80122c4:	490c      	ldr	r1, [pc, #48]	; (80122f8 <pcf8553_init+0x5c>)
 80122c6:	480d      	ldr	r0, [pc, #52]	; (80122fc <pcf8553_init+0x60>)
 80122c8:	f7f7 fa4c 	bl	8009764 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_1.reg_data), 1, DEFAULT_DELAY);
 80122cc:	2314      	movs	r3, #20
 80122ce:	2201      	movs	r2, #1
 80122d0:	490b      	ldr	r1, [pc, #44]	; (8012300 <pcf8553_init+0x64>)
 80122d2:	480a      	ldr	r0, [pc, #40]	; (80122fc <pcf8553_init+0x60>)
 80122d4:	f7f7 fa46 	bl	8009764 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&h_spi1, &(g_display_ctrl_2.reg_data), 1, DEFAULT_DELAY);
 80122d8:	2314      	movs	r3, #20
 80122da:	2201      	movs	r2, #1
 80122dc:	4909      	ldr	r1, [pc, #36]	; (8012304 <pcf8553_init+0x68>)
 80122de:	4807      	ldr	r0, [pc, #28]	; (80122fc <pcf8553_init+0x60>)
 80122e0:	f7f7 fa40 	bl	8009764 <HAL_SPI_Transmit>

    /*
     *  Chip disable.
     *
     */
    HAL_GPIO_WritePin(PCF8553_CE_PORT, PCF8553_CE_PIN, GPIO_PIN_SET);
 80122e4:	2201      	movs	r2, #1
 80122e6:	2110      	movs	r1, #16
 80122e8:	4802      	ldr	r0, [pc, #8]	; (80122f4 <pcf8553_init+0x58>)
 80122ea:	f7f1 ffd3 	bl	8004294 <HAL_GPIO_WritePin>
}
 80122ee:	bf00      	nop
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	42020000 	.word	0x42020000
 80122f8:	20001db0 	.word	0x20001db0
 80122fc:	20001d0c 	.word	0x20001d0c
 8012300:	20000140 	.word	0x20000140
 8012304:	20001db4 	.word	0x20001db4

08012308 <pcf8553_reset>:
 * at least 10 μs.
 * @param  None
 * @retval None
 */
void pcf8553_reset()
{
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_PIN, GPIO_PIN_RESET);
 801230c:	2200      	movs	r2, #0
 801230e:	2140      	movs	r1, #64	; 0x40
 8012310:	4806      	ldr	r0, [pc, #24]	; (801232c <pcf8553_reset+0x24>)
 8012312:	f7f1 ffbf 	bl	8004294 <HAL_GPIO_WritePin>
    HAL_Delay(DEFAULT_DELAY);
 8012316:	2314      	movs	r3, #20
 8012318:	4618      	mov	r0, r3
 801231a:	f7ef fae3 	bl	80018e4 <HAL_Delay>
    HAL_GPIO_WritePin(PCF8553_RESET_PORT, PCF8553_RESET_Pin, GPIO_PIN_SET);
 801231e:	2201      	movs	r2, #1
 8012320:	2140      	movs	r1, #64	; 0x40
 8012322:	4802      	ldr	r0, [pc, #8]	; (801232c <pcf8553_reset+0x24>)
 8012324:	f7f1 ffb6 	bl	8004294 <HAL_GPIO_WritePin>
}
 8012328:	bf00      	nop
 801232a:	bd80      	pop	{r7, pc}
 801232c:	42020000 	.word	0x42020000

08012330 <pcf8553_write_all>:
 * futuro se hará con una enumeración que lo deje claro, ya sea en esta función
 * o en una de mas alto nivel.
 * @retval None
 */
void pcf8553_write_all(uint8_t data)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	4603      	mov	r3, r0
 8012338:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801233a:	2300      	movs	r3, #0
 801233c:	60fb      	str	r3, [r7, #12]
 801233e:	e007      	b.n	8012350 <pcf8553_write_all+0x20>
    {
        g_lcd_map[i] = data;
 8012340:	4a08      	ldr	r2, [pc, #32]	; (8012364 <pcf8553_write_all+0x34>)
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	4413      	add	r3, r2
 8012346:	79fa      	ldrb	r2, [r7, #7]
 8012348:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PCF8553_DATA_SIZE; i++)
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	3301      	adds	r3, #1
 801234e:	60fb      	str	r3, [r7, #12]
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2b13      	cmp	r3, #19
 8012354:	ddf4      	ble.n	8012340 <pcf8553_write_all+0x10>
    }
    pcf8553_dump();
 8012356:	f7ff ff75 	bl	8012244 <pcf8553_dump>
}
 801235a:	bf00      	nop
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	20001d9c 	.word	0x20001d9c

08012368 <fm_menu_config_date_hour>:
 * @brief Función que imprime el menú de configuración de fecha y hora.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_date_hour(fm_event_t event_id)
{
 8012368:	b5b0      	push	{r4, r5, r7, lr}
 801236a:	b0b4      	sub	sp, #208	; 0xd0
 801236c:	af00      	add	r7, sp, #0
 801236e:	4603      	mov	r3, r0
 8012370:	71fb      	strb	r3, [r7, #7]
    static sel_second second_enum;
    RTC_TimeTypeDef time_final;
    RTC_DateTypeDef date_final;
    extern RTC_HandleTypeDef hrtc;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8012372:	4b9d      	ldr	r3, [pc, #628]	; (80125e8 <fm_menu_config_date_hour+0x280>)
 8012374:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    fm_event_t event_now;

    if (new_entry == 1)
 8012378:	4b9c      	ldr	r3, [pc, #624]	; (80125ec <fm_menu_config_date_hour+0x284>)
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	2b01      	cmp	r3, #1
 801237e:	d107      	bne.n	8012390 <fm_menu_config_date_hour+0x28>
    {
        field = DAY;
 8012380:	4b9b      	ldr	r3, [pc, #620]	; (80125f0 <fm_menu_config_date_hour+0x288>)
 8012382:	2200      	movs	r2, #0
 8012384:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 8012386:	f7fd fa32 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 801238a:	4b98      	ldr	r3, [pc, #608]	; (80125ec <fm_menu_config_date_hour+0x284>)
 801238c:	2200      	movs	r2, #0
 801238e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(CONFIGURATION, event_id, field);
 8012390:	4b97      	ldr	r3, [pc, #604]	; (80125f0 <fm_menu_config_date_hour+0x288>)
 8012392:	781a      	ldrb	r2, [r3, #0]
 8012394:	79fb      	ldrb	r3, [r7, #7]
 8012396:	4619      	mov	r1, r3
 8012398:	2001      	movs	r0, #1
 801239a:	f7fd fa2f 	bl	800f7fc <fm_lcd_date_hour>
    fm_lcd_refresh();
 801239e:	f7fd fdb8 	bl	800ff12 <fm_lcd_refresh>

    day_enum = fm_factory_get_date_time().day;
 80123a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fc fcd6 	bl	800ed58 <fm_factory_get_date_time>
 80123ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ae:	b2da      	uxtb	r2, r3
 80123b0:	4b90      	ldr	r3, [pc, #576]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 80123b2:	701a      	strb	r2, [r3, #0]
    month_enum = fm_factory_get_date_time().month;
 80123b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7fc fccd 	bl	800ed58 <fm_factory_get_date_time>
 80123be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123c0:	b2da      	uxtb	r2, r3
 80123c2:	4b8d      	ldr	r3, [pc, #564]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80123c4:	701a      	strb	r2, [r3, #0]
    year_enum = fm_factory_get_date_time().year;
 80123c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7fc fcc4 	bl	800ed58 <fm_factory_get_date_time>
 80123d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	4b89      	ldr	r3, [pc, #548]	; (80125fc <fm_menu_config_date_hour+0x294>)
 80123d6:	701a      	strb	r2, [r3, #0]
    hour_enum = fm_factory_get_date_time().hour;
 80123d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fc fcbb 	bl	800ed58 <fm_factory_get_date_time>
 80123e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123e6:	b2da      	uxtb	r2, r3
 80123e8:	4b85      	ldr	r3, [pc, #532]	; (8012600 <fm_menu_config_date_hour+0x298>)
 80123ea:	701a      	strb	r2, [r3, #0]
    minute_enum = fm_factory_get_date_time().minute;
 80123ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7fc fcb1 	bl	800ed58 <fm_factory_get_date_time>
 80123f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123fa:	b2da      	uxtb	r2, r3
 80123fc:	4b81      	ldr	r3, [pc, #516]	; (8012604 <fm_menu_config_date_hour+0x29c>)
 80123fe:	701a      	strb	r2, [r3, #0]
    second_enum = fm_factory_get_date_time().second;
 8012400:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012404:	4618      	mov	r0, r3
 8012406:	f7fc fca7 	bl	800ed58 <fm_factory_get_date_time>
 801240a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801240e:	b2da      	uxtb	r2, r3
 8012410:	4b7d      	ldr	r3, [pc, #500]	; (8012608 <fm_menu_config_date_hour+0x2a0>)
 8012412:	701a      	strb	r2, [r3, #0]

    switch (event_id)
 8012414:	79fb      	ldrb	r3, [r7, #7]
 8012416:	3b01      	subs	r3, #1
 8012418:	2b04      	cmp	r3, #4
 801241a:	f200 83be 	bhi.w	8012b9a <fm_menu_config_date_hour+0x832>
 801241e:	a201      	add	r2, pc, #4	; (adr r2, 8012424 <fm_menu_config_date_hour+0xbc>)
 8012420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012424:	08012b9b 	.word	0x08012b9b
 8012428:	08012439 	.word	0x08012439
 801242c:	0801278d 	.word	0x0801278d
 8012430:	08012afd 	.word	0x08012afd
 8012434:	08012b79 	.word	0x08012b79
    {
        case EVENT_KEY_UP:
            if(correct_password)
 8012438:	4b74      	ldr	r3, [pc, #464]	; (801260c <fm_menu_config_date_hour+0x2a4>)
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	f000 83ae 	beq.w	8012b9e <fm_menu_config_date_hour+0x836>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 8012442:	4b6b      	ldr	r3, [pc, #428]	; (80125f0 <fm_menu_config_date_hour+0x288>)
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	f040 809b 	bne.w	8012582 <fm_menu_config_date_hour+0x21a>
                {
                    if(month_enum == JANUARY ||
 801244c:	4b6a      	ldr	r3, [pc, #424]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d017      	beq.n	8012484 <fm_menu_config_date_hour+0x11c>
                    month_enum == MARCH      ||
 8012454:	4b68      	ldr	r3, [pc, #416]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 8012456:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY ||
 8012458:	2b03      	cmp	r3, #3
 801245a:	d013      	beq.n	8012484 <fm_menu_config_date_hour+0x11c>
                    month_enum == MAY        ||
 801245c:	4b66      	ldr	r3, [pc, #408]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801245e:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MARCH      ||
 8012460:	2b05      	cmp	r3, #5
 8012462:	d00f      	beq.n	8012484 <fm_menu_config_date_hour+0x11c>
                    month_enum == JULY       ||
 8012464:	4b64      	ldr	r3, [pc, #400]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 8012466:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        ||
 8012468:	2b07      	cmp	r3, #7
 801246a:	d00b      	beq.n	8012484 <fm_menu_config_date_hour+0x11c>
                    month_enum == AUGUST     ||
 801246c:	4b62      	ldr	r3, [pc, #392]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801246e:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JULY       ||
 8012470:	2b08      	cmp	r3, #8
 8012472:	d007      	beq.n	8012484 <fm_menu_config_date_hour+0x11c>
                    month_enum == OCTOBER    ||
 8012474:	4b60      	ldr	r3, [pc, #384]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 8012476:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     ||
 8012478:	2b0a      	cmp	r3, #10
 801247a:	d003      	beq.n	8012484 <fm_menu_config_date_hour+0x11c>
                    month_enum == DECEMBER)
 801247c:	4b5e      	ldr	r3, [pc, #376]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801247e:	781b      	ldrb	r3, [r3, #0]
                    month_enum == OCTOBER    ||
 8012480:	2b0c      	cmp	r3, #12
 8012482:	d119      	bne.n	80124b8 <fm_menu_config_date_hour+0x150>
                    {
                        if(day_enum < DAY_31)
 8012484:	4b5b      	ldr	r3, [pc, #364]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	2b1e      	cmp	r3, #30
 801248a:	d80b      	bhi.n	80124a4 <fm_menu_config_date_hour+0x13c>
                        {
                            fm_factory_modify_date(day_enum +
 801248c:	4b59      	ldr	r3, [pc, #356]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	3301      	adds	r3, #1
 8012492:	4a59      	ldr	r2, [pc, #356]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 8012494:	7812      	ldrb	r2, [r2, #0]
 8012496:	4611      	mov	r1, r2
 8012498:	4a58      	ldr	r2, [pc, #352]	; (80125fc <fm_menu_config_date_hour+0x294>)
 801249a:	7812      	ldrb	r2, [r2, #0]
 801249c:	4618      	mov	r0, r3
 801249e:	f7fc fcd9 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 80124a2:	e168      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                            1, month_enum,
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1,
 80124a4:	4b54      	ldr	r3, [pc, #336]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	4619      	mov	r1, r3
 80124aa:	4b54      	ldr	r3, [pc, #336]	; (80125fc <fm_menu_config_date_hour+0x294>)
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	461a      	mov	r2, r3
 80124b0:	2001      	movs	r0, #1
 80124b2:	f7fc fccf 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum < DAY_31)
 80124b6:	e15e      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                            month_enum,
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL ||
 80124b8:	4b4f      	ldr	r3, [pc, #316]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	2b04      	cmp	r3, #4
 80124be:	d00b      	beq.n	80124d8 <fm_menu_config_date_hour+0x170>
                    month_enum == JUNE          ||
 80124c0:	4b4d      	ldr	r3, [pc, #308]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL ||
 80124c4:	2b06      	cmp	r3, #6
 80124c6:	d007      	beq.n	80124d8 <fm_menu_config_date_hour+0x170>
                    month_enum == SEPTEMBER     ||
 80124c8:	4b4b      	ldr	r3, [pc, #300]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
                    month_enum == JUNE          ||
 80124cc:	2b09      	cmp	r3, #9
 80124ce:	d003      	beq.n	80124d8 <fm_menu_config_date_hour+0x170>
                    month_enum == NOVEMBER)
 80124d0:	4b49      	ldr	r3, [pc, #292]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80124d2:	781b      	ldrb	r3, [r3, #0]
                    month_enum == SEPTEMBER     ||
 80124d4:	2b0b      	cmp	r3, #11
 80124d6:	d119      	bne.n	801250c <fm_menu_config_date_hour+0x1a4>
                    {
                        if(day_enum < DAY_30)
 80124d8:	4b46      	ldr	r3, [pc, #280]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2b1d      	cmp	r3, #29
 80124de:	d80b      	bhi.n	80124f8 <fm_menu_config_date_hour+0x190>
                        {
                            fm_factory_modify_date(day_enum + 1, month_enum,
 80124e0:	4b44      	ldr	r3, [pc, #272]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	3301      	adds	r3, #1
 80124e6:	4a44      	ldr	r2, [pc, #272]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80124e8:	7812      	ldrb	r2, [r2, #0]
 80124ea:	4611      	mov	r1, r2
 80124ec:	4a43      	ldr	r2, [pc, #268]	; (80125fc <fm_menu_config_date_hour+0x294>)
 80124ee:	7812      	ldrb	r2, [r2, #0]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fc fcaf 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 80124f6:	e13e      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_1, month_enum,
 80124f8:	4b3f      	ldr	r3, [pc, #252]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	4619      	mov	r1, r3
 80124fe:	4b3f      	ldr	r3, [pc, #252]	; (80125fc <fm_menu_config_date_hour+0x294>)
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	461a      	mov	r2, r3
 8012504:	2001      	movs	r0, #1
 8012506:	f7fc fca5 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum < DAY_30)
 801250a:	e134      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 801250c:	4b3b      	ldr	r3, [pc, #236]	; (80125fc <fm_menu_config_date_hour+0x294>)
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	f003 0303 	and.w	r3, r3, #3
 8012514:	b2db      	uxtb	r3, r3
 8012516:	2b00      	cmp	r3, #0
 8012518:	d119      	bne.n	801254e <fm_menu_config_date_hour+0x1e6>
                        {
                            if(day_enum < DAY_29)
 801251a:	4b36      	ldr	r3, [pc, #216]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	2b1c      	cmp	r3, #28
 8012520:	d80b      	bhi.n	801253a <fm_menu_config_date_hour+0x1d2>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012522:	4b34      	ldr	r3, [pc, #208]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	3301      	adds	r3, #1
 8012528:	4a33      	ldr	r2, [pc, #204]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801252a:	7812      	ldrb	r2, [r2, #0]
 801252c:	4611      	mov	r1, r2
 801252e:	4a33      	ldr	r2, [pc, #204]	; (80125fc <fm_menu_config_date_hour+0x294>)
 8012530:	7812      	ldrb	r2, [r2, #0]
 8012532:	4618      	mov	r0, r3
 8012534:	f7fc fc8e 	bl	800ee54 <fm_factory_modify_date>
 8012538:	e11d      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 801253a:	4b2f      	ldr	r3, [pc, #188]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	4619      	mov	r1, r3
 8012540:	4b2e      	ldr	r3, [pc, #184]	; (80125fc <fm_menu_config_date_hour+0x294>)
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	461a      	mov	r2, r3
 8012546:	2001      	movs	r0, #1
 8012548:	f7fc fc84 	bl	800ee54 <fm_factory_modify_date>
 801254c:	e113      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum < DAY_28)
 801254e:	4b29      	ldr	r3, [pc, #164]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	2b1b      	cmp	r3, #27
 8012554:	d80b      	bhi.n	801256e <fm_menu_config_date_hour+0x206>
                            {
                                fm_factory_modify_date(day_enum + 1, month_enum,
 8012556:	4b27      	ldr	r3, [pc, #156]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	3301      	adds	r3, #1
 801255c:	4a26      	ldr	r2, [pc, #152]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801255e:	7812      	ldrb	r2, [r2, #0]
 8012560:	4611      	mov	r1, r2
 8012562:	4a26      	ldr	r2, [pc, #152]	; (80125fc <fm_menu_config_date_hour+0x294>)
 8012564:	7812      	ldrb	r2, [r2, #0]
 8012566:	4618      	mov	r0, r3
 8012568:	f7fc fc74 	bl	800ee54 <fm_factory_modify_date>
 801256c:	e103      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_1, month_enum,
 801256e:	4b22      	ldr	r3, [pc, #136]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	4619      	mov	r1, r3
 8012574:	4b21      	ldr	r3, [pc, #132]	; (80125fc <fm_menu_config_date_hour+0x294>)
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	461a      	mov	r2, r3
 801257a:	2001      	movs	r0, #1
 801257c:	f7fc fc6a 	bl	800ee54 <fm_factory_modify_date>
 8012580:	e0f9      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 8012582:	4b1b      	ldr	r3, [pc, #108]	; (80125f0 <fm_menu_config_date_hour+0x288>)
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b01      	cmp	r3, #1
 8012588:	d16a      	bne.n	8012660 <fm_menu_config_date_hour+0x2f8>
                {
                    if(month_enum < DECEMBER)
 801258a:	4b1b      	ldr	r3, [pc, #108]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	2b0b      	cmp	r3, #11
 8012590:	d85c      	bhi.n	801264c <fm_menu_config_date_hour+0x2e4>
                    {
                        if((month_enum + 1 == APRIL ||
 8012592:	4b19      	ldr	r3, [pc, #100]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b03      	cmp	r3, #3
 8012598:	d00b      	beq.n	80125b2 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == JUNE      ||
 801259a:	4b17      	ldr	r3, [pc, #92]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 801259c:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum + 1 == APRIL ||
 801259e:	2b05      	cmp	r3, #5
 80125a0:	d007      	beq.n	80125b2 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == SEPTEMBER ||
 80125a2:	4b15      	ldr	r3, [pc, #84]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80125a4:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == JUNE      ||
 80125a6:	2b08      	cmp	r3, #8
 80125a8:	d003      	beq.n	80125b2 <fm_menu_config_date_hour+0x24a>
                        month_enum + 1 == NOVEMBER)
 80125aa:	4b13      	ldr	r3, [pc, #76]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80125ac:	781b      	ldrb	r3, [r3, #0]
                        month_enum + 1 == SEPTEMBER ||
 80125ae:	2b0a      	cmp	r3, #10
 80125b0:	d107      	bne.n	80125c2 <fm_menu_config_date_hour+0x25a>
                        && (day_enum > DAY_30))
 80125b2:	4b10      	ldr	r3, [pc, #64]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	2b1e      	cmp	r3, #30
 80125b8:	d903      	bls.n	80125c2 <fm_menu_config_date_hour+0x25a>
                        {
                            day_enum = DAY_30;
 80125ba:	4b0e      	ldr	r3, [pc, #56]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 80125bc:	221e      	movs	r2, #30
 80125be:	701a      	strb	r2, [r3, #0]
 80125c0:	e038      	b.n	8012634 <fm_menu_config_date_hour+0x2cc>
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 80125c2:	4b0d      	ldr	r3, [pc, #52]	; (80125f8 <fm_menu_config_date_hour+0x290>)
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d122      	bne.n	8012610 <fm_menu_config_date_hour+0x2a8>
                        (year_enum % YEAR_4 == 0) &&
 80125ca:	4b0c      	ldr	r3, [pc, #48]	; (80125fc <fm_menu_config_date_hour+0x294>)
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	f003 0303 	and.w	r3, r3, #3
 80125d2:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d11b      	bne.n	8012610 <fm_menu_config_date_hour+0x2a8>
                        (day_enum > DAY_29))
 80125d8:	4b06      	ldr	r3, [pc, #24]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 80125da:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 80125dc:	2b1d      	cmp	r3, #29
 80125de:	d917      	bls.n	8012610 <fm_menu_config_date_hour+0x2a8>
                        {
                            day_enum = DAY_29;
 80125e0:	4b04      	ldr	r3, [pc, #16]	; (80125f4 <fm_menu_config_date_hour+0x28c>)
 80125e2:	221d      	movs	r2, #29
 80125e4:	701a      	strb	r2, [r3, #0]
 80125e6:	e025      	b.n	8012634 <fm_menu_config_date_hour+0x2cc>
 80125e8:	08012369 	.word	0x08012369
 80125ec:	20000141 	.word	0x20000141
 80125f0:	20001db9 	.word	0x20001db9
 80125f4:	20001dba 	.word	0x20001dba
 80125f8:	20001dbb 	.word	0x20001dbb
 80125fc:	20001dbc 	.word	0x20001dbc
 8012600:	20001dbd 	.word	0x20001dbd
 8012604:	20001dbe 	.word	0x20001dbe
 8012608:	20001dbf 	.word	0x20001dbf
 801260c:	20001db6 	.word	0x20001db6
                        }
                        else if((month_enum + 1 == FEBRUARY) &&
 8012610:	4b93      	ldr	r3, [pc, #588]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	2b01      	cmp	r3, #1
 8012616:	d10d      	bne.n	8012634 <fm_menu_config_date_hour+0x2cc>
                        (year_enum % YEAR_4 != 0) &&
 8012618:	4b92      	ldr	r3, [pc, #584]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	f003 0303 	and.w	r3, r3, #3
 8012620:	b2db      	uxtb	r3, r3
                        else if((month_enum + 1 == FEBRUARY) &&
 8012622:	2b00      	cmp	r3, #0
 8012624:	d006      	beq.n	8012634 <fm_menu_config_date_hour+0x2cc>
                        (day_enum > DAY_28))
 8012626:	4b90      	ldr	r3, [pc, #576]	; (8012868 <fm_menu_config_date_hour+0x500>)
 8012628:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 801262a:	2b1c      	cmp	r3, #28
 801262c:	d902      	bls.n	8012634 <fm_menu_config_date_hour+0x2cc>
                        {
                            day_enum = DAY_28;
 801262e:	4b8e      	ldr	r3, [pc, #568]	; (8012868 <fm_menu_config_date_hour+0x500>)
 8012630:	221c      	movs	r2, #28
 8012632:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum + 1,
 8012634:	4b8c      	ldr	r3, [pc, #560]	; (8012868 <fm_menu_config_date_hour+0x500>)
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	4618      	mov	r0, r3
 801263a:	4b89      	ldr	r3, [pc, #548]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	3301      	adds	r3, #1
 8012640:	4a88      	ldr	r2, [pc, #544]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 8012642:	7812      	ldrb	r2, [r2, #0]
 8012644:	4619      	mov	r1, r3
 8012646:	f7fc fc05 	bl	800ee54 <fm_factory_modify_date>
 801264a:	e094      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, JANUARY, year_enum);
 801264c:	4b86      	ldr	r3, [pc, #536]	; (8012868 <fm_menu_config_date_hour+0x500>)
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	4618      	mov	r0, r3
 8012652:	4b84      	ldr	r3, [pc, #528]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	461a      	mov	r2, r3
 8012658:	2101      	movs	r1, #1
 801265a:	f7fc fbfb 	bl	800ee54 <fm_factory_modify_date>
 801265e:	e08a      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == YEAR)
 8012660:	4b82      	ldr	r3, [pc, #520]	; (801286c <fm_menu_config_date_hour+0x504>)
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	2b02      	cmp	r3, #2
 8012666:	d12c      	bne.n	80126c2 <fm_menu_config_date_hour+0x35a>
                {
                    if(year_enum < YEAR_99)
 8012668:	4b7e      	ldr	r3, [pc, #504]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	2b62      	cmp	r3, #98	; 0x62
 801266e:	d81e      	bhi.n	80126ae <fm_menu_config_date_hour+0x346>
                    {
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 8012670:	4b7c      	ldr	r3, [pc, #496]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	3301      	adds	r3, #1
 8012676:	f003 0303 	and.w	r3, r3, #3
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00a      	beq.n	8012694 <fm_menu_config_date_hour+0x32c>
                        (month_enum == FEBRUARY) &&
 801267e:	4b78      	ldr	r3, [pc, #480]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 8012680:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum + 1) % YEAR_4 != YEAR_0) &&
 8012682:	2b02      	cmp	r3, #2
 8012684:	d106      	bne.n	8012694 <fm_menu_config_date_hour+0x32c>
                        (day_enum > DAY_28))
 8012686:	4b78      	ldr	r3, [pc, #480]	; (8012868 <fm_menu_config_date_hour+0x500>)
 8012688:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 801268a:	2b1c      	cmp	r3, #28
 801268c:	d902      	bls.n	8012694 <fm_menu_config_date_hour+0x32c>
                        {
                            day_enum = DAY_28;
 801268e:	4b76      	ldr	r3, [pc, #472]	; (8012868 <fm_menu_config_date_hour+0x500>)
 8012690:	221c      	movs	r2, #28
 8012692:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum, year_enum
 8012694:	4b74      	ldr	r3, [pc, #464]	; (8012868 <fm_menu_config_date_hour+0x500>)
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	4618      	mov	r0, r3
 801269a:	4b71      	ldr	r3, [pc, #452]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	4619      	mov	r1, r3
 80126a0:	4b70      	ldr	r3, [pc, #448]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	3301      	adds	r3, #1
 80126a6:	461a      	mov	r2, r3
 80126a8:	f7fc fbd4 	bl	800ee54 <fm_factory_modify_date>
 80126ac:	e063      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                        + 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_0);
 80126ae:	4b6e      	ldr	r3, [pc, #440]	; (8012868 <fm_menu_config_date_hour+0x500>)
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	4618      	mov	r0, r3
 80126b4:	4b6a      	ldr	r3, [pc, #424]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2200      	movs	r2, #0
 80126ba:	4619      	mov	r1, r3
 80126bc:	f7fc fbca 	bl	800ee54 <fm_factory_modify_date>
 80126c0:	e059      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                    }
                }
                else if(field == HOUR)
 80126c2:	4b6a      	ldr	r3, [pc, #424]	; (801286c <fm_menu_config_date_hour+0x504>)
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	2b03      	cmp	r3, #3
 80126c8:	d119      	bne.n	80126fe <fm_menu_config_date_hour+0x396>
                {
                    if(hour_enum < HOUR_23)
 80126ca:	4b69      	ldr	r3, [pc, #420]	; (8012870 <fm_menu_config_date_hour+0x508>)
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	2b16      	cmp	r3, #22
 80126d0:	d80b      	bhi.n	80126ea <fm_menu_config_date_hour+0x382>
                    {
                        fm_factory_modify_time(hour_enum + 1,
 80126d2:	4b67      	ldr	r3, [pc, #412]	; (8012870 <fm_menu_config_date_hour+0x508>)
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	3301      	adds	r3, #1
 80126d8:	4a66      	ldr	r2, [pc, #408]	; (8012874 <fm_menu_config_date_hour+0x50c>)
 80126da:	7812      	ldrb	r2, [r2, #0]
 80126dc:	4611      	mov	r1, r2
 80126de:	4a66      	ldr	r2, [pc, #408]	; (8012878 <fm_menu_config_date_hour+0x510>)
 80126e0:	7812      	ldrb	r2, [r2, #0]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fc fbe2 	bl	800eeac <fm_factory_modify_time>
 80126e8:	e045      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_0, minute_enum,
 80126ea:	4b62      	ldr	r3, [pc, #392]	; (8012874 <fm_menu_config_date_hour+0x50c>)
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	4619      	mov	r1, r3
 80126f0:	4b61      	ldr	r3, [pc, #388]	; (8012878 <fm_menu_config_date_hour+0x510>)
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	461a      	mov	r2, r3
 80126f6:	2000      	movs	r0, #0
 80126f8:	f7fc fbd8 	bl	800eeac <fm_factory_modify_time>
 80126fc:	e03b      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 80126fe:	4b5b      	ldr	r3, [pc, #364]	; (801286c <fm_menu_config_date_hour+0x504>)
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	2b04      	cmp	r3, #4
 8012704:	d119      	bne.n	801273a <fm_menu_config_date_hour+0x3d2>
                {
                    if(minute_enum < MINU_59)
 8012706:	4b5b      	ldr	r3, [pc, #364]	; (8012874 <fm_menu_config_date_hour+0x50c>)
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	2b3a      	cmp	r3, #58	; 0x3a
 801270c:	d80b      	bhi.n	8012726 <fm_menu_config_date_hour+0x3be>
                    {
                        fm_factory_modify_time(hour_enum,
 801270e:	4b58      	ldr	r3, [pc, #352]	; (8012870 <fm_menu_config_date_hour+0x508>)
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	4618      	mov	r0, r3
 8012714:	4b57      	ldr	r3, [pc, #348]	; (8012874 <fm_menu_config_date_hour+0x50c>)
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	3301      	adds	r3, #1
 801271a:	4a57      	ldr	r2, [pc, #348]	; (8012878 <fm_menu_config_date_hour+0x510>)
 801271c:	7812      	ldrb	r2, [r2, #0]
 801271e:	4619      	mov	r1, r3
 8012720:	f7fc fbc4 	bl	800eeac <fm_factory_modify_time>
 8012724:	e027      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                        minute_enum + 1,
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 8012726:	4b52      	ldr	r3, [pc, #328]	; (8012870 <fm_menu_config_date_hour+0x508>)
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	4618      	mov	r0, r3
 801272c:	4b52      	ldr	r3, [pc, #328]	; (8012878 <fm_menu_config_date_hour+0x510>)
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	461a      	mov	r2, r3
 8012732:	2100      	movs	r1, #0
 8012734:	f7fc fbba 	bl	800eeac <fm_factory_modify_time>
 8012738:	e01d      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                        MINU_0, second_enum);
                    }
                }
                else if(field == SECOND)
 801273a:	4b4c      	ldr	r3, [pc, #304]	; (801286c <fm_menu_config_date_hour+0x504>)
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	2b05      	cmp	r3, #5
 8012740:	d119      	bne.n	8012776 <fm_menu_config_date_hour+0x40e>
                {
                    if(second_enum < SEC_59)
 8012742:	4b4d      	ldr	r3, [pc, #308]	; (8012878 <fm_menu_config_date_hour+0x510>)
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	2b3a      	cmp	r3, #58	; 0x3a
 8012748:	d80c      	bhi.n	8012764 <fm_menu_config_date_hour+0x3fc>
                    {
                        fm_factory_modify_time(hour_enum,
 801274a:	4b49      	ldr	r3, [pc, #292]	; (8012870 <fm_menu_config_date_hour+0x508>)
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	4618      	mov	r0, r3
 8012750:	4b48      	ldr	r3, [pc, #288]	; (8012874 <fm_menu_config_date_hour+0x50c>)
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	4619      	mov	r1, r3
 8012756:	4b48      	ldr	r3, [pc, #288]	; (8012878 <fm_menu_config_date_hour+0x510>)
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	3301      	adds	r3, #1
 801275c:	461a      	mov	r2, r3
 801275e:	f7fc fba5 	bl	800eeac <fm_factory_modify_time>
 8012762:	e008      	b.n	8012776 <fm_menu_config_date_hour+0x40e>
                        minute_enum,
                        second_enum + 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum,
 8012764:	4b42      	ldr	r3, [pc, #264]	; (8012870 <fm_menu_config_date_hour+0x508>)
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	4618      	mov	r0, r3
 801276a:	4b42      	ldr	r3, [pc, #264]	; (8012874 <fm_menu_config_date_hour+0x50c>)
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	2200      	movs	r2, #0
 8012770:	4619      	mov	r1, r3
 8012772:	f7fc fb9b 	bl	800eeac <fm_factory_modify_time>
                        minute_enum,
                        SEC_0);
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012776:	2301      	movs	r3, #1
 8012778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801277c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012780:	2200      	movs	r2, #0
 8012782:	4619      	mov	r1, r3
 8012784:	483d      	ldr	r0, [pc, #244]	; (801287c <fm_menu_config_date_hour+0x514>)
 8012786:	f7fb fd6b 	bl	800e260 <_txe_queue_send>
            }
        break;
 801278a:	e208      	b.n	8012b9e <fm_menu_config_date_hour+0x836>
        case EVENT_KEY_DOWN:
            if(correct_password)
 801278c:	4b3c      	ldr	r3, [pc, #240]	; (8012880 <fm_menu_config_date_hour+0x518>)
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	f000 8206 	beq.w	8012ba2 <fm_menu_config_date_hour+0x83a>
                 * en cuenta la cantidad de días de cada mes, si es un año
                 * bisiesto o no, y que al pasarse del valor máximo o mínimo de
                 * cada parámetro, se vuelva a iniciar desde el valor mínimo o
                 * máximo respectivamente.
                 */
                if(field == DAY)
 8012796:	4b35      	ldr	r3, [pc, #212]	; (801286c <fm_menu_config_date_hour+0x504>)
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	f040 80ad 	bne.w	80128fa <fm_menu_config_date_hour+0x592>
                {
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 80127a0:	4b2f      	ldr	r3, [pc, #188]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d017      	beq.n	80127d8 <fm_menu_config_date_hour+0x470>
 80127a8:	4b2d      	ldr	r3, [pc, #180]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	2b03      	cmp	r3, #3
 80127ae:	d013      	beq.n	80127d8 <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 80127b0:	4b2b      	ldr	r3, [pc, #172]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127b2:	781b      	ldrb	r3, [r3, #0]
                    if(month_enum == JANUARY || month_enum == MARCH   ||
 80127b4:	2b05      	cmp	r3, #5
 80127b6:	d00f      	beq.n	80127d8 <fm_menu_config_date_hour+0x470>
                    month_enum == MAY        || month_enum == JULY    ||
 80127b8:	4b29      	ldr	r3, [pc, #164]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	2b07      	cmp	r3, #7
 80127be:	d00b      	beq.n	80127d8 <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 80127c0:	4b27      	ldr	r3, [pc, #156]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127c2:	781b      	ldrb	r3, [r3, #0]
                    month_enum == MAY        || month_enum == JULY    ||
 80127c4:	2b08      	cmp	r3, #8
 80127c6:	d007      	beq.n	80127d8 <fm_menu_config_date_hour+0x470>
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 80127c8:	4b25      	ldr	r3, [pc, #148]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	2b0a      	cmp	r3, #10
 80127ce:	d003      	beq.n	80127d8 <fm_menu_config_date_hour+0x470>
                    month_enum == DECEMBER)
 80127d0:	4b23      	ldr	r3, [pc, #140]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127d2:	781b      	ldrb	r3, [r3, #0]
                    month_enum == AUGUST     || month_enum == OCTOBER ||
 80127d4:	2b0c      	cmp	r3, #12
 80127d6:	d119      	bne.n	801280c <fm_menu_config_date_hour+0x4a4>
                    {
                        if(day_enum > DAY_1)
 80127d8:	4b23      	ldr	r3, [pc, #140]	; (8012868 <fm_menu_config_date_hour+0x500>)
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	2b01      	cmp	r3, #1
 80127de:	d90b      	bls.n	80127f8 <fm_menu_config_date_hour+0x490>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 80127e0:	4b21      	ldr	r3, [pc, #132]	; (8012868 <fm_menu_config_date_hour+0x500>)
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	3b01      	subs	r3, #1
 80127e6:	4a1e      	ldr	r2, [pc, #120]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127e8:	7812      	ldrb	r2, [r2, #0]
 80127ea:	4611      	mov	r1, r2
 80127ec:	4a1d      	ldr	r2, [pc, #116]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 80127ee:	7812      	ldrb	r2, [r2, #0]
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7fc fb2f 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 80127f6:	e166      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_31, month_enum,
 80127f8:	4b19      	ldr	r3, [pc, #100]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	4619      	mov	r1, r3
 80127fe:	4b19      	ldr	r3, [pc, #100]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	461a      	mov	r2, r3
 8012804:	201f      	movs	r0, #31
 8012806:	f7fc fb25 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 801280a:	e15c      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                    }
                    else if(month_enum == APRIL || month_enum == JUNE ||
 801280c:	4b14      	ldr	r3, [pc, #80]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	2b04      	cmp	r3, #4
 8012812:	d00b      	beq.n	801282c <fm_menu_config_date_hour+0x4c4>
 8012814:	4b12      	ldr	r3, [pc, #72]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2b06      	cmp	r3, #6
 801281a:	d007      	beq.n	801282c <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 801281c:	4b10      	ldr	r3, [pc, #64]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 801281e:	781b      	ldrb	r3, [r3, #0]
                    else if(month_enum == APRIL || month_enum == JUNE ||
 8012820:	2b09      	cmp	r3, #9
 8012822:	d003      	beq.n	801282c <fm_menu_config_date_hour+0x4c4>
                    month_enum == SEPTEMBER     || month_enum == NOVEMBER)
 8012824:	4b0e      	ldr	r3, [pc, #56]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	2b0b      	cmp	r3, #11
 801282a:	d12b      	bne.n	8012884 <fm_menu_config_date_hour+0x51c>
                    {
                        if(day_enum > DAY_1)
 801282c:	4b0e      	ldr	r3, [pc, #56]	; (8012868 <fm_menu_config_date_hour+0x500>)
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b01      	cmp	r3, #1
 8012832:	d90b      	bls.n	801284c <fm_menu_config_date_hour+0x4e4>
                        {
                            fm_factory_modify_date(day_enum - 1, month_enum,
 8012834:	4b0c      	ldr	r3, [pc, #48]	; (8012868 <fm_menu_config_date_hour+0x500>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	3b01      	subs	r3, #1
 801283a:	4a09      	ldr	r2, [pc, #36]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 801283c:	7812      	ldrb	r2, [r2, #0]
 801283e:	4611      	mov	r1, r2
 8012840:	4a08      	ldr	r2, [pc, #32]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 8012842:	7812      	ldrb	r2, [r2, #0]
 8012844:	4618      	mov	r0, r3
 8012846:	f7fc fb05 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 801284a:	e13c      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                            year_enum);
                        }
                        else
                        {
                            fm_factory_modify_date(DAY_30, month_enum,
 801284c:	4b04      	ldr	r3, [pc, #16]	; (8012860 <fm_menu_config_date_hour+0x4f8>)
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	4619      	mov	r1, r3
 8012852:	4b04      	ldr	r3, [pc, #16]	; (8012864 <fm_menu_config_date_hour+0x4fc>)
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	461a      	mov	r2, r3
 8012858:	201e      	movs	r0, #30
 801285a:	f7fc fafb 	bl	800ee54 <fm_factory_modify_date>
                        if(day_enum > DAY_1)
 801285e:	e132      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
 8012860:	20001dbb 	.word	0x20001dbb
 8012864:	20001dbc 	.word	0x20001dbc
 8012868:	20001dba 	.word	0x20001dba
 801286c:	20001db9 	.word	0x20001db9
 8012870:	20001dbd 	.word	0x20001dbd
 8012874:	20001dbe 	.word	0x20001dbe
 8012878:	20001dbf 	.word	0x20001dbf
 801287c:	20001388 	.word	0x20001388
 8012880:	20001db6 	.word	0x20001db6
                            year_enum);
                        }
                    }
                    else
                    {
                        if(year_enum % YEAR_4 == 0)
 8012884:	4b95      	ldr	r3, [pc, #596]	; (8012adc <fm_menu_config_date_hour+0x774>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	f003 0303 	and.w	r3, r3, #3
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b00      	cmp	r3, #0
 8012890:	d119      	bne.n	80128c6 <fm_menu_config_date_hour+0x55e>
                        {
                            if(day_enum > DAY_1)
 8012892:	4b93      	ldr	r3, [pc, #588]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	2b01      	cmp	r3, #1
 8012898:	d90b      	bls.n	80128b2 <fm_menu_config_date_hour+0x54a>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 801289a:	4b91      	ldr	r3, [pc, #580]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	3b01      	subs	r3, #1
 80128a0:	4a90      	ldr	r2, [pc, #576]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 80128a2:	7812      	ldrb	r2, [r2, #0]
 80128a4:	4611      	mov	r1, r2
 80128a6:	4a8d      	ldr	r2, [pc, #564]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80128a8:	7812      	ldrb	r2, [r2, #0]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7fc fad2 	bl	800ee54 <fm_factory_modify_date>
 80128b0:	e109      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_29, month_enum,
 80128b2:	4b8c      	ldr	r3, [pc, #560]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	4619      	mov	r1, r3
 80128b8:	4b88      	ldr	r3, [pc, #544]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	461a      	mov	r2, r3
 80128be:	201d      	movs	r0, #29
 80128c0:	f7fc fac8 	bl	800ee54 <fm_factory_modify_date>
 80128c4:	e0ff      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                        else
                        {
                            if(day_enum > DAY_1)
 80128c6:	4b86      	ldr	r3, [pc, #536]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	d90b      	bls.n	80128e6 <fm_menu_config_date_hour+0x57e>
                            {
                                fm_factory_modify_date(day_enum - 1, month_enum,
 80128ce:	4b84      	ldr	r3, [pc, #528]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	3b01      	subs	r3, #1
 80128d4:	4a83      	ldr	r2, [pc, #524]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 80128d6:	7812      	ldrb	r2, [r2, #0]
 80128d8:	4611      	mov	r1, r2
 80128da:	4a80      	ldr	r2, [pc, #512]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80128dc:	7812      	ldrb	r2, [r2, #0]
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fc fab8 	bl	800ee54 <fm_factory_modify_date>
 80128e4:	e0ef      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                            else
                            {
                                fm_factory_modify_date(DAY_28, month_enum,
 80128e6:	4b7f      	ldr	r3, [pc, #508]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	4619      	mov	r1, r3
 80128ec:	4b7b      	ldr	r3, [pc, #492]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	461a      	mov	r2, r3
 80128f2:	201c      	movs	r0, #28
 80128f4:	f7fc faae 	bl	800ee54 <fm_factory_modify_date>
 80128f8:	e0e5      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                                year_enum);
                            }
                        }
                    }
                }
                else if(field == MONTH)
 80128fa:	4b7b      	ldr	r3, [pc, #492]	; (8012ae8 <fm_menu_config_date_hour+0x780>)
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d156      	bne.n	80129b0 <fm_menu_config_date_hour+0x648>
                {
                    if(month_enum > JANUARY)
 8012902:	4b78      	ldr	r3, [pc, #480]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	2b01      	cmp	r3, #1
 8012908:	d948      	bls.n	801299c <fm_menu_config_date_hour+0x634>
                    {
                        if((month_enum - 1 == APRIL ||
 801290a:	4b76      	ldr	r3, [pc, #472]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	2b05      	cmp	r3, #5
 8012910:	d00b      	beq.n	801292a <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == JUNE      ||
 8012912:	4b74      	ldr	r3, [pc, #464]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 8012914:	781b      	ldrb	r3, [r3, #0]
                        if((month_enum - 1 == APRIL ||
 8012916:	2b07      	cmp	r3, #7
 8012918:	d007      	beq.n	801292a <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == SEPTEMBER ||
 801291a:	4b72      	ldr	r3, [pc, #456]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 801291c:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == JUNE      ||
 801291e:	2b0a      	cmp	r3, #10
 8012920:	d003      	beq.n	801292a <fm_menu_config_date_hour+0x5c2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 8012922:	4b70      	ldr	r3, [pc, #448]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 8012924:	781b      	ldrb	r3, [r3, #0]
                        month_enum - 1 == SEPTEMBER ||
 8012926:	2b0c      	cmp	r3, #12
 8012928:	d107      	bne.n	801293a <fm_menu_config_date_hour+0x5d2>
                        month_enum - 1 == NOVEMBER) && (day_enum > DAY_30))
 801292a:	4b6d      	ldr	r3, [pc, #436]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	2b1e      	cmp	r3, #30
 8012930:	d903      	bls.n	801293a <fm_menu_config_date_hour+0x5d2>
                        {
                            day_enum = DAY_30;
 8012932:	4b6b      	ldr	r3, [pc, #428]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 8012934:	221e      	movs	r2, #30
 8012936:	701a      	strb	r2, [r3, #0]
 8012938:	e024      	b.n	8012984 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 801293a:	4b6a      	ldr	r3, [pc, #424]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b03      	cmp	r3, #3
 8012940:	d10e      	bne.n	8012960 <fm_menu_config_date_hour+0x5f8>
                        (year_enum % YEAR_4 == 0) &&
 8012942:	4b66      	ldr	r3, [pc, #408]	; (8012adc <fm_menu_config_date_hour+0x774>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	f003 0303 	and.w	r3, r3, #3
 801294a:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 801294c:	2b00      	cmp	r3, #0
 801294e:	d107      	bne.n	8012960 <fm_menu_config_date_hour+0x5f8>
                        (day_enum > DAY_29))
 8012950:	4b63      	ldr	r3, [pc, #396]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 8012952:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 == 0) &&
 8012954:	2b1d      	cmp	r3, #29
 8012956:	d903      	bls.n	8012960 <fm_menu_config_date_hour+0x5f8>
                        {
                            day_enum = DAY_29;
 8012958:	4b61      	ldr	r3, [pc, #388]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 801295a:	221d      	movs	r2, #29
 801295c:	701a      	strb	r2, [r3, #0]
 801295e:	e011      	b.n	8012984 <fm_menu_config_date_hour+0x61c>
                        }
                        else if((month_enum - 1 == FEBRUARY) &&
 8012960:	4b60      	ldr	r3, [pc, #384]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	2b03      	cmp	r3, #3
 8012966:	d10d      	bne.n	8012984 <fm_menu_config_date_hour+0x61c>
                        (year_enum % YEAR_4 != 0) &&
 8012968:	4b5c      	ldr	r3, [pc, #368]	; (8012adc <fm_menu_config_date_hour+0x774>)
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	f003 0303 	and.w	r3, r3, #3
 8012970:	b2db      	uxtb	r3, r3
                        else if((month_enum - 1 == FEBRUARY) &&
 8012972:	2b00      	cmp	r3, #0
 8012974:	d006      	beq.n	8012984 <fm_menu_config_date_hour+0x61c>
                        (day_enum > DAY_28))
 8012976:	4b5a      	ldr	r3, [pc, #360]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 8012978:	781b      	ldrb	r3, [r3, #0]
                        (year_enum % YEAR_4 != 0) &&
 801297a:	2b1c      	cmp	r3, #28
 801297c:	d902      	bls.n	8012984 <fm_menu_config_date_hour+0x61c>
                        {
                            day_enum = DAY_28;
 801297e:	4b58      	ldr	r3, [pc, #352]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 8012980:	221c      	movs	r2, #28
 8012982:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum - 1,
 8012984:	4b56      	ldr	r3, [pc, #344]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	4618      	mov	r0, r3
 801298a:	4b56      	ldr	r3, [pc, #344]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	3b01      	subs	r3, #1
 8012990:	4a52      	ldr	r2, [pc, #328]	; (8012adc <fm_menu_config_date_hour+0x774>)
 8012992:	7812      	ldrb	r2, [r2, #0]
 8012994:	4619      	mov	r1, r3
 8012996:	f7fc fa5d 	bl	800ee54 <fm_factory_modify_date>
 801299a:	e094      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                        year_enum);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, DECEMBER, year_enum);
 801299c:	4b50      	ldr	r3, [pc, #320]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	4618      	mov	r0, r3
 80129a2:	4b4e      	ldr	r3, [pc, #312]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	461a      	mov	r2, r3
 80129a8:	210c      	movs	r1, #12
 80129aa:	f7fc fa53 	bl	800ee54 <fm_factory_modify_date>
 80129ae:	e08a      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == YEAR)
 80129b0:	4b4d      	ldr	r3, [pc, #308]	; (8012ae8 <fm_menu_config_date_hour+0x780>)
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b02      	cmp	r3, #2
 80129b6:	d12c      	bne.n	8012a12 <fm_menu_config_date_hour+0x6aa>
                {
                    if(year_enum > YEAR_0)
 80129b8:	4b48      	ldr	r3, [pc, #288]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d01e      	beq.n	80129fe <fm_menu_config_date_hour+0x696>
                    {
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 80129c0:	4b46      	ldr	r3, [pc, #280]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	3b01      	subs	r3, #1
 80129c6:	f003 0303 	and.w	r3, r3, #3
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d00a      	beq.n	80129e4 <fm_menu_config_date_hour+0x67c>
                        (month_enum == FEBRUARY) &&
 80129ce:	4b45      	ldr	r3, [pc, #276]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
                        if(((year_enum - 1) % YEAR_4 != YEAR_0) &&
 80129d2:	2b02      	cmp	r3, #2
 80129d4:	d106      	bne.n	80129e4 <fm_menu_config_date_hour+0x67c>
                        (day_enum > DAY_28))
 80129d6:	4b42      	ldr	r3, [pc, #264]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 80129d8:	781b      	ldrb	r3, [r3, #0]
                        (month_enum == FEBRUARY) &&
 80129da:	2b1c      	cmp	r3, #28
 80129dc:	d902      	bls.n	80129e4 <fm_menu_config_date_hour+0x67c>
                        {
                            day_enum = DAY_28;
 80129de:	4b40      	ldr	r3, [pc, #256]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 80129e0:	221c      	movs	r2, #28
 80129e2:	701a      	strb	r2, [r3, #0]
                        }
                        fm_factory_modify_date(day_enum, month_enum,
 80129e4:	4b3e      	ldr	r3, [pc, #248]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	4618      	mov	r0, r3
 80129ea:	4b3e      	ldr	r3, [pc, #248]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	4619      	mov	r1, r3
 80129f0:	4b3a      	ldr	r3, [pc, #232]	; (8012adc <fm_menu_config_date_hour+0x774>)
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	3b01      	subs	r3, #1
 80129f6:	461a      	mov	r2, r3
 80129f8:	f7fc fa2c 	bl	800ee54 <fm_factory_modify_date>
 80129fc:	e063      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                        year_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_date(day_enum, month_enum, YEAR_99);
 80129fe:	4b38      	ldr	r3, [pc, #224]	; (8012ae0 <fm_menu_config_date_hour+0x778>)
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	4618      	mov	r0, r3
 8012a04:	4b37      	ldr	r3, [pc, #220]	; (8012ae4 <fm_menu_config_date_hour+0x77c>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2263      	movs	r2, #99	; 0x63
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	f7fc fa22 	bl	800ee54 <fm_factory_modify_date>
 8012a10:	e059      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == HOUR)
 8012a12:	4b35      	ldr	r3, [pc, #212]	; (8012ae8 <fm_menu_config_date_hour+0x780>)
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	2b03      	cmp	r3, #3
 8012a18:	d119      	bne.n	8012a4e <fm_menu_config_date_hour+0x6e6>
                {
                    if(hour_enum > HOUR_0)
 8012a1a:	4b34      	ldr	r3, [pc, #208]	; (8012aec <fm_menu_config_date_hour+0x784>)
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d00b      	beq.n	8012a3a <fm_menu_config_date_hour+0x6d2>
                    {
                        fm_factory_modify_time(hour_enum - 1, minute_enum,
 8012a22:	4b32      	ldr	r3, [pc, #200]	; (8012aec <fm_menu_config_date_hour+0x784>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	4a31      	ldr	r2, [pc, #196]	; (8012af0 <fm_menu_config_date_hour+0x788>)
 8012a2a:	7812      	ldrb	r2, [r2, #0]
 8012a2c:	4611      	mov	r1, r2
 8012a2e:	4a31      	ldr	r2, [pc, #196]	; (8012af4 <fm_menu_config_date_hour+0x78c>)
 8012a30:	7812      	ldrb	r2, [r2, #0]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fc fa3a 	bl	800eeac <fm_factory_modify_time>
 8012a38:	e045      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(HOUR_23, minute_enum,
 8012a3a:	4b2d      	ldr	r3, [pc, #180]	; (8012af0 <fm_menu_config_date_hour+0x788>)
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	4619      	mov	r1, r3
 8012a40:	4b2c      	ldr	r3, [pc, #176]	; (8012af4 <fm_menu_config_date_hour+0x78c>)
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	461a      	mov	r2, r3
 8012a46:	2017      	movs	r0, #23
 8012a48:	f7fc fa30 	bl	800eeac <fm_factory_modify_time>
 8012a4c:	e03b      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                }
                else if(field == MINUTE)
 8012a4e:	4b26      	ldr	r3, [pc, #152]	; (8012ae8 <fm_menu_config_date_hour+0x780>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	2b04      	cmp	r3, #4
 8012a54:	d119      	bne.n	8012a8a <fm_menu_config_date_hour+0x722>
                {
                    if(minute_enum > MINU_0)
 8012a56:	4b26      	ldr	r3, [pc, #152]	; (8012af0 <fm_menu_config_date_hour+0x788>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d00b      	beq.n	8012a76 <fm_menu_config_date_hour+0x70e>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum - 1,
 8012a5e:	4b23      	ldr	r3, [pc, #140]	; (8012aec <fm_menu_config_date_hour+0x784>)
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	4618      	mov	r0, r3
 8012a64:	4b22      	ldr	r3, [pc, #136]	; (8012af0 <fm_menu_config_date_hour+0x788>)
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	4a22      	ldr	r2, [pc, #136]	; (8012af4 <fm_menu_config_date_hour+0x78c>)
 8012a6c:	7812      	ldrb	r2, [r2, #0]
 8012a6e:	4619      	mov	r1, r3
 8012a70:	f7fc fa1c 	bl	800eeac <fm_factory_modify_time>
 8012a74:	e027      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                        second_enum);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, MINU_59, second_enum);
 8012a76:	4b1d      	ldr	r3, [pc, #116]	; (8012aec <fm_menu_config_date_hour+0x784>)
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	4b1d      	ldr	r3, [pc, #116]	; (8012af4 <fm_menu_config_date_hour+0x78c>)
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	461a      	mov	r2, r3
 8012a82:	213b      	movs	r1, #59	; 0x3b
 8012a84:	f7fc fa12 	bl	800eeac <fm_factory_modify_time>
 8012a88:	e01d      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                    }
                }
                else if(field == SECOND)
 8012a8a:	4b17      	ldr	r3, [pc, #92]	; (8012ae8 <fm_menu_config_date_hour+0x780>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	2b05      	cmp	r3, #5
 8012a90:	d119      	bne.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                {
                    if(second_enum > SEC_0)
 8012a92:	4b18      	ldr	r3, [pc, #96]	; (8012af4 <fm_menu_config_date_hour+0x78c>)
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d00c      	beq.n	8012ab4 <fm_menu_config_date_hour+0x74c>
                    {
                        fm_factory_modify_time(hour_enum, minute_enum,
 8012a9a:	4b14      	ldr	r3, [pc, #80]	; (8012aec <fm_menu_config_date_hour+0x784>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	4b13      	ldr	r3, [pc, #76]	; (8012af0 <fm_menu_config_date_hour+0x788>)
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	4b13      	ldr	r3, [pc, #76]	; (8012af4 <fm_menu_config_date_hour+0x78c>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	3b01      	subs	r3, #1
 8012aac:	461a      	mov	r2, r3
 8012aae:	f7fc f9fd 	bl	800eeac <fm_factory_modify_time>
 8012ab2:	e008      	b.n	8012ac6 <fm_menu_config_date_hour+0x75e>
                        second_enum - 1);
                    }
                    else
                    {
                        fm_factory_modify_time(hour_enum, minute_enum, SEC_59);
 8012ab4:	4b0d      	ldr	r3, [pc, #52]	; (8012aec <fm_menu_config_date_hour+0x784>)
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	4b0d      	ldr	r3, [pc, #52]	; (8012af0 <fm_menu_config_date_hour+0x788>)
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	223b      	movs	r2, #59	; 0x3b
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	f7fc f9f3 	bl	800eeac <fm_factory_modify_time>
                    }
                }
                event_now = EVENT_LCD_REFRESH;
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012acc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	4808      	ldr	r0, [pc, #32]	; (8012af8 <fm_menu_config_date_hour+0x790>)
 8012ad6:	f7fb fbc3 	bl	800e260 <_txe_queue_send>
            }
        break;
 8012ada:	e062      	b.n	8012ba2 <fm_menu_config_date_hour+0x83a>
 8012adc:	20001dbc 	.word	0x20001dbc
 8012ae0:	20001dba 	.word	0x20001dba
 8012ae4:	20001dbb 	.word	0x20001dbb
 8012ae8:	20001db9 	.word	0x20001db9
 8012aec:	20001dbd 	.word	0x20001dbd
 8012af0:	20001dbe 	.word	0x20001dbe
 8012af4:	20001dbf 	.word	0x20001dbf
 8012af8:	20001388 	.word	0x20001388
        case EVENT_KEY_ENTER:
            if(correct_password)
 8012afc:	4b5b      	ldr	r3, [pc, #364]	; (8012c6c <fm_menu_config_date_hour+0x904>)
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d050      	beq.n	8012ba6 <fm_menu_config_date_hour+0x83e>
            {
                /*
                 * Se cambia qué parámetro se va a modificar según cual estaba
                 * seleccionado para modificarse actualmente.
                 */
                if(field == DAY)
 8012b04:	4b5a      	ldr	r3, [pc, #360]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d103      	bne.n	8012b14 <fm_menu_config_date_hour+0x7ac>
                {
                    field = MONTH;
 8012b0c:	4b58      	ldr	r3, [pc, #352]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b0e:	2201      	movs	r2, #1
 8012b10:	701a      	strb	r2, [r3, #0]
 8012b12:	e026      	b.n	8012b62 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MONTH)
 8012b14:	4b56      	ldr	r3, [pc, #344]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d103      	bne.n	8012b24 <fm_menu_config_date_hour+0x7bc>
                {
                    field = YEAR;
 8012b1c:	4b54      	ldr	r3, [pc, #336]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b1e:	2202      	movs	r2, #2
 8012b20:	701a      	strb	r2, [r3, #0]
 8012b22:	e01e      	b.n	8012b62 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == YEAR)
 8012b24:	4b52      	ldr	r3, [pc, #328]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b02      	cmp	r3, #2
 8012b2a:	d103      	bne.n	8012b34 <fm_menu_config_date_hour+0x7cc>
                {
                    field = HOUR;
 8012b2c:	4b50      	ldr	r3, [pc, #320]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b2e:	2203      	movs	r2, #3
 8012b30:	701a      	strb	r2, [r3, #0]
 8012b32:	e016      	b.n	8012b62 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == HOUR)
 8012b34:	4b4e      	ldr	r3, [pc, #312]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	2b03      	cmp	r3, #3
 8012b3a:	d103      	bne.n	8012b44 <fm_menu_config_date_hour+0x7dc>
                {
                    field = MINUTE;
 8012b3c:	4b4c      	ldr	r3, [pc, #304]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b3e:	2204      	movs	r2, #4
 8012b40:	701a      	strb	r2, [r3, #0]
 8012b42:	e00e      	b.n	8012b62 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == MINUTE)
 8012b44:	4b4a      	ldr	r3, [pc, #296]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b04      	cmp	r3, #4
 8012b4a:	d103      	bne.n	8012b54 <fm_menu_config_date_hour+0x7ec>
                {
                    field = SECOND;
 8012b4c:	4b48      	ldr	r3, [pc, #288]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b4e:	2205      	movs	r2, #5
 8012b50:	701a      	strb	r2, [r3, #0]
 8012b52:	e006      	b.n	8012b62 <fm_menu_config_date_hour+0x7fa>
                }
                else if(field == SECOND)
 8012b54:	4b46      	ldr	r3, [pc, #280]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	2b05      	cmp	r3, #5
 8012b5a:	d102      	bne.n	8012b62 <fm_menu_config_date_hour+0x7fa>
                {
                    field = DAY;
 8012b5c:	4b44      	ldr	r3, [pc, #272]	; (8012c70 <fm_menu_config_date_hour+0x908>)
 8012b5e:	2200      	movs	r2, #0
 8012b60:	701a      	strb	r2, [r3, #0]
                }
                event_now = EVENT_LCD_REFRESH;
 8012b62:	2301      	movs	r3, #1
 8012b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012b68:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	4619      	mov	r1, r3
 8012b70:	4840      	ldr	r0, [pc, #256]	; (8012c74 <fm_menu_config_date_hour+0x90c>)
 8012b72:	f7fb fb75 	bl	800e260 <_txe_queue_send>
            }
        break;
 8012b76:	e016      	b.n	8012ba6 <fm_menu_config_date_hour+0x83e>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012b78:	4b3f      	ldr	r3, [pc, #252]	; (8012c78 <fm_menu_config_date_hour+0x910>)
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8012b7e:	4b3f      	ldr	r3, [pc, #252]	; (8012c7c <fm_menu_config_date_hour+0x914>)
 8012b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            event_now = EVENT_LCD_REFRESH;
 8012b84:	2301      	movs	r3, #1
 8012b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012b8a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b8e:	2200      	movs	r2, #0
 8012b90:	4619      	mov	r1, r3
 8012b92:	4838      	ldr	r0, [pc, #224]	; (8012c74 <fm_menu_config_date_hour+0x90c>)
 8012b94:	f7fb fb64 	bl	800e260 <_txe_queue_send>
        break;
 8012b98:	e006      	b.n	8012ba8 <fm_menu_config_date_hour+0x840>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012b9a:	bf00      	nop
 8012b9c:	e004      	b.n	8012ba8 <fm_menu_config_date_hour+0x840>
        break;
 8012b9e:	bf00      	nop
 8012ba0:	e002      	b.n	8012ba8 <fm_menu_config_date_hour+0x840>
        break;
 8012ba2:	bf00      	nop
 8012ba4:	e000      	b.n	8012ba8 <fm_menu_config_date_hour+0x840>
        break;
 8012ba6:	bf00      	nop
    }

    previous_event = event_id;
 8012ba8:	4a35      	ldr	r2, [pc, #212]	; (8012c80 <fm_menu_config_date_hour+0x918>)
 8012baa:	79fb      	ldrb	r3, [r7, #7]
 8012bac:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar fecha y hora\n";
 8012bae:	4b35      	ldr	r3, [pc, #212]	; (8012c84 <fm_menu_config_date_hour+0x91c>)
 8012bb0:	f107 0408 	add.w	r4, r7, #8
 8012bb4:	461d      	mov	r5, r3
 8012bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012bba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012bbe:	c403      	stmia	r4!, {r0, r1}
 8012bc0:	7022      	strb	r2, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012bc2:	f107 0308 	add.w	r3, r7, #8
 8012bc6:	2119      	movs	r1, #25
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fb ff85 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012bce:	4b2a      	ldr	r3, [pc, #168]	; (8012c78 <fm_menu_config_date_hour+0x910>)
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d143      	bne.n	8012c5e <fm_menu_config_date_hour+0x8f6>
    {
        if(correct_password)
 8012bd6:	4b25      	ldr	r3, [pc, #148]	; (8012c6c <fm_menu_config_date_hour+0x904>)
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d036      	beq.n	8012c4c <fm_menu_config_date_hour+0x8e4>
             * encuentren corrompidos y se lea cualquier cosa. Para mas info de
             * esto ver el link siguiente:
             *
             * http://www.efton.sk/STM32/gotcha/g113.html
             */
            date_final.Date = day_enum;
 8012bde:	4b2a      	ldr	r3, [pc, #168]	; (8012c88 <fm_menu_config_date_hour+0x920>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            date_final.Month = month_enum;
 8012be6:	4b29      	ldr	r3, [pc, #164]	; (8012c8c <fm_menu_config_date_hour+0x924>)
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            date_final.Year = year_enum;
 8012bee:	4b28      	ldr	r3, [pc, #160]	; (8012c90 <fm_menu_config_date_hour+0x928>)
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            date_final.WeekDay = RTC_WEEKDAY_FRIDAY;
 8012bf6:	2305      	movs	r3, #5
 8012bf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            HAL_RTC_SetDate(&hrtc, &date_final, RTC_FORMAT_BIN);
 8012bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c00:	2200      	movs	r2, #0
 8012c02:	4619      	mov	r1, r3
 8012c04:	4823      	ldr	r0, [pc, #140]	; (8012c94 <fm_menu_config_date_hour+0x92c>)
 8012c06:	f7f6 f9c3 	bl	8008f90 <HAL_RTC_SetDate>

            /*
             * Idem que lo de la fecha escrito arriba, pero para la hora, y en
             * general siempre que se use la HAL completando estructuras.
             */
            time_final.Hours = hour_enum;
 8012c0a:	4b23      	ldr	r3, [pc, #140]	; (8012c98 <fm_menu_config_date_hour+0x930>)
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            time_final.Minutes = minute_enum;
 8012c12:	4b22      	ldr	r3, [pc, #136]	; (8012c9c <fm_menu_config_date_hour+0x934>)
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            time_final.Seconds = second_enum;
 8012c1a:	4b21      	ldr	r3, [pc, #132]	; (8012ca0 <fm_menu_config_date_hour+0x938>)
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            time_final.SecondFraction = 0;
 8012c22:	2300      	movs	r3, #0
 8012c24:	633b      	str	r3, [r7, #48]	; 0x30
            time_final.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012c26:	2300      	movs	r3, #0
 8012c28:	637b      	str	r3, [r7, #52]	; 0x34
            time_final.StoreOperation = RTC_STOREOPERATION_RESET;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	63bb      	str	r3, [r7, #56]	; 0x38
            time_final.SubSeconds = 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	62fb      	str	r3, [r7, #44]	; 0x2c
            time_final.TimeFormat = RTC_HOURFORMAT12_AM;
 8012c32:	2300      	movs	r3, #0
 8012c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            HAL_RTC_SetTime(&hrtc, &time_final, RTC_FORMAT_BIN);
 8012c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	4619      	mov	r1, r3
 8012c40:	4814      	ldr	r0, [pc, #80]	; (8012c94 <fm_menu_config_date_hour+0x92c>)
 8012c42:	f7f6 f897 	bl	8008d74 <HAL_RTC_SetTime>

            correct_password = 0;
 8012c46:	4b09      	ldr	r3, [pc, #36]	; (8012c6c <fm_menu_config_date_hour+0x904>)
 8012c48:	2200      	movs	r2, #0
 8012c4a:	701a      	strb	r2, [r3, #0]
        }
        in_configuration = 0;
 8012c4c:	4b15      	ldr	r3, [pc, #84]	; (8012ca4 <fm_menu_config_date_hour+0x93c>)
 8012c4e:	2200      	movs	r2, #0
 8012c50:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012c52:	4b15      	ldr	r3, [pc, #84]	; (8012ca8 <fm_menu_config_date_hour+0x940>)
 8012c54:	2201      	movs	r2, #1
 8012c56:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012c58:	4b07      	ldr	r3, [pc, #28]	; (8012c78 <fm_menu_config_date_hour+0x910>)
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	37d0      	adds	r7, #208	; 0xd0
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bdb0      	pop	{r4, r5, r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20001db6 	.word	0x20001db6
 8012c70:	20001db9 	.word	0x20001db9
 8012c74:	20001388 	.word	0x20001388
 8012c78:	20001dc0 	.word	0x20001dc0
 8012c7c:	08013ff5 	.word	0x08013ff5
 8012c80:	20001db7 	.word	0x20001db7
 8012c84:	08015210 	.word	0x08015210
 8012c88:	20001dba 	.word	0x20001dba
 8012c8c:	20001dbb 	.word	0x20001dbb
 8012c90:	20001dbc 	.word	0x20001dbc
 8012c94:	200014a0 	.word	0x200014a0
 8012c98:	20001dbd 	.word	0x20001dbd
 8012c9c:	20001dbe 	.word	0x20001dbe
 8012ca0:	20001dbf 	.word	0x20001dbf
 8012ca4:	20001db8 	.word	0x20001db8
 8012ca8:	20000141 	.word	0x20000141

08012cac <fm_menu_config_k_lin_1>:

    return (ret_menu);
}

ptr_ret_menu_t fm_menu_config_k_lin_1(fm_event_t event_id)
{
 8012cac:	b5b0      	push	{r4, r5, r7, lr}
 8012cae:	b08c      	sub	sp, #48	; 0x30
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 8012cb6:	4b51      	ldr	r3, [pc, #324]	; (8012dfc <fm_menu_config_k_lin_1+0x150>)
 8012cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8012cba:	4b51      	ldr	r3, [pc, #324]	; (8012e00 <fm_menu_config_k_lin_1+0x154>)
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d104      	bne.n	8012ccc <fm_menu_config_k_lin_1+0x20>
    {
        fm_lcd_clear();
 8012cc2:	f7fc fd94 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8012cc6:	4b4e      	ldr	r3, [pc, #312]	; (8012e00 <fm_menu_config_k_lin_1+0x154>)
 8012cc8:	2200      	movs	r2, #0
 8012cca:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_1, event_id, digit_lin_modify);
 8012ccc:	4b4d      	ldr	r3, [pc, #308]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012cce:	781a      	ldrb	r2, [r3, #0]
 8012cd0:	79fb      	ldrb	r3, [r7, #7]
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	f7fd f807 	bl	800fce8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8012cda:	f7fd f91a 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8012cde:	79fb      	ldrb	r3, [r7, #7]
 8012ce0:	3b01      	subs	r3, #1
 8012ce2:	2b04      	cmp	r3, #4
 8012ce4:	d863      	bhi.n	8012dae <fm_menu_config_k_lin_1+0x102>
 8012ce6:	a201      	add	r2, pc, #4	; (adr r2, 8012cec <fm_menu_config_k_lin_1+0x40>)
 8012ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cec:	08012daf 	.word	0x08012daf
 8012cf0:	08012d01 	.word	0x08012d01
 8012cf4:	08012d2b 	.word	0x08012d2b
 8012cf8:	08012d55 	.word	0x08012d55
 8012cfc:	08012d8f 	.word	0x08012d8f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012d00:	4b41      	ldr	r3, [pc, #260]	; (8012e08 <fm_menu_config_k_lin_1+0x15c>)
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d005      	beq.n	8012d14 <fm_menu_config_k_lin_1+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_1);
 8012d08:	4b3e      	ldr	r3, [pc, #248]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	2101      	movs	r1, #1
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7fc f974 	bl	800effc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8012d14:	2301      	movs	r3, #1
 8012d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d1a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012d1e:	2200      	movs	r2, #0
 8012d20:	4619      	mov	r1, r3
 8012d22:	483a      	ldr	r0, [pc, #232]	; (8012e0c <fm_menu_config_k_lin_1+0x160>)
 8012d24:	f7fb fa9c 	bl	800e260 <_txe_queue_send>
        break;
 8012d28:	e042      	b.n	8012db0 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012d2a:	4b37      	ldr	r3, [pc, #220]	; (8012e08 <fm_menu_config_k_lin_1+0x15c>)
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d005      	beq.n	8012d3e <fm_menu_config_k_lin_1+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_1);
 8012d32:	4b34      	ldr	r3, [pc, #208]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	2101      	movs	r1, #1
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7fc fa4b 	bl	800f1d4 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d44:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012d48:	2200      	movs	r2, #0
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	482f      	ldr	r0, [pc, #188]	; (8012e0c <fm_menu_config_k_lin_1+0x160>)
 8012d4e:	f7fb fa87 	bl	800e260 <_txe_queue_send>
        break;
 8012d52:	e02d      	b.n	8012db0 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012d54:	4b2c      	ldr	r3, [pc, #176]	; (8012e08 <fm_menu_config_k_lin_1+0x15c>)
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00d      	beq.n	8012d78 <fm_menu_config_k_lin_1+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8012d5c:	4b29      	ldr	r3, [pc, #164]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	2b0a      	cmp	r3, #10
 8012d62:	d806      	bhi.n	8012d72 <fm_menu_config_k_lin_1+0xc6>
                {
                    digit_lin_modify++;
 8012d64:	4b27      	ldr	r3, [pc, #156]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	3301      	adds	r3, #1
 8012d6a:	b2da      	uxtb	r2, r3
 8012d6c:	4b25      	ldr	r3, [pc, #148]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012d6e:	701a      	strb	r2, [r3, #0]
 8012d70:	e002      	b.n	8012d78 <fm_menu_config_k_lin_1+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8012d72:	4b24      	ldr	r3, [pc, #144]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8012d78:	2301      	movs	r3, #1
 8012d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d7e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012d82:	2200      	movs	r2, #0
 8012d84:	4619      	mov	r1, r3
 8012d86:	4821      	ldr	r0, [pc, #132]	; (8012e0c <fm_menu_config_k_lin_1+0x160>)
 8012d88:	f7fb fa6a 	bl	800e260 <_txe_queue_send>
        break;
 8012d8c:	e010      	b.n	8012db0 <fm_menu_config_k_lin_1+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012d8e:	4b20      	ldr	r3, [pc, #128]	; (8012e10 <fm_menu_config_k_lin_1+0x164>)
 8012d90:	2201      	movs	r2, #1
 8012d92:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8012d94:	4b1f      	ldr	r3, [pc, #124]	; (8012e14 <fm_menu_config_k_lin_1+0x168>)
 8012d96:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012d9e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012da2:	2200      	movs	r2, #0
 8012da4:	4619      	mov	r1, r3
 8012da6:	4819      	ldr	r0, [pc, #100]	; (8012e0c <fm_menu_config_k_lin_1+0x160>)
 8012da8:	f7fb fa5a 	bl	800e260 <_txe_queue_send>
        break;
 8012dac:	e000      	b.n	8012db0 <fm_menu_config_k_lin_1+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012dae:	bf00      	nop
    }

    previous_event = event_id;
 8012db0:	4a19      	ldr	r2, [pc, #100]	; (8012e18 <fm_menu_config_k_lin_1+0x16c>)
 8012db2:	79fb      	ldrb	r3, [r7, #7]
 8012db4:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_1\n";
 8012db6:	4b19      	ldr	r3, [pc, #100]	; (8012e1c <fm_menu_config_k_lin_1+0x170>)
 8012db8:	f107 040c 	add.w	r4, r7, #12
 8012dbc:	461d      	mov	r5, r3
 8012dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012dc6:	c407      	stmia	r4!, {r0, r1, r2}
 8012dc8:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012dca:	f107 030c 	add.w	r3, r7, #12
 8012dce:	211e      	movs	r1, #30
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fb fe81 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012dd6:	4b0e      	ldr	r3, [pc, #56]	; (8012e10 <fm_menu_config_k_lin_1+0x164>)
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d108      	bne.n	8012df0 <fm_menu_config_k_lin_1+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8012dde:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <fm_menu_config_k_lin_1+0x158>)
 8012de0:	2200      	movs	r2, #0
 8012de2:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012de4:	4b06      	ldr	r3, [pc, #24]	; (8012e00 <fm_menu_config_k_lin_1+0x154>)
 8012de6:	2201      	movs	r2, #1
 8012de8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012dea:	4b09      	ldr	r3, [pc, #36]	; (8012e10 <fm_menu_config_k_lin_1+0x164>)
 8012dec:	2200      	movs	r2, #0
 8012dee:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3730      	adds	r7, #48	; 0x30
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bdb0      	pop	{r4, r5, r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	08012cad 	.word	0x08012cad
 8012e00:	20000142 	.word	0x20000142
 8012e04:	20001dc1 	.word	0x20001dc1
 8012e08:	20001db6 	.word	0x20001db6
 8012e0c:	20001388 	.word	0x20001388
 8012e10:	20001dc2 	.word	0x20001dc2
 8012e14:	08012e21 	.word	0x08012e21
 8012e18:	20001db7 	.word	0x20001db7
 8012e1c:	0801524c 	.word	0x0801524c

08012e20 <fm_menu_config_k_lin_2>:

ptr_ret_menu_t fm_menu_config_k_lin_2(fm_event_t event_id)
{
 8012e20:	b5b0      	push	{r4, r5, r7, lr}
 8012e22:	b08c      	sub	sp, #48	; 0x30
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	4603      	mov	r3, r0
 8012e28:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_2;
 8012e2a:	4b51      	ldr	r3, [pc, #324]	; (8012f70 <fm_menu_config_k_lin_2+0x150>)
 8012e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8012e2e:	4b51      	ldr	r3, [pc, #324]	; (8012f74 <fm_menu_config_k_lin_2+0x154>)
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d104      	bne.n	8012e40 <fm_menu_config_k_lin_2+0x20>
    {
        fm_lcd_clear();
 8012e36:	f7fc fcda 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8012e3a:	4b4e      	ldr	r3, [pc, #312]	; (8012f74 <fm_menu_config_k_lin_2+0x154>)
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_2, event_id, digit_lin_modify);
 8012e40:	4b4d      	ldr	r3, [pc, #308]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012e42:	781a      	ldrb	r2, [r3, #0]
 8012e44:	79fb      	ldrb	r3, [r7, #7]
 8012e46:	4619      	mov	r1, r3
 8012e48:	2002      	movs	r0, #2
 8012e4a:	f7fc ff4d 	bl	800fce8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8012e4e:	f7fd f860 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8012e52:	79fb      	ldrb	r3, [r7, #7]
 8012e54:	3b01      	subs	r3, #1
 8012e56:	2b04      	cmp	r3, #4
 8012e58:	d863      	bhi.n	8012f22 <fm_menu_config_k_lin_2+0x102>
 8012e5a:	a201      	add	r2, pc, #4	; (adr r2, 8012e60 <fm_menu_config_k_lin_2+0x40>)
 8012e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e60:	08012f23 	.word	0x08012f23
 8012e64:	08012e75 	.word	0x08012e75
 8012e68:	08012e9f 	.word	0x08012e9f
 8012e6c:	08012ec9 	.word	0x08012ec9
 8012e70:	08012f03 	.word	0x08012f03
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012e74:	4b41      	ldr	r3, [pc, #260]	; (8012f7c <fm_menu_config_k_lin_2+0x15c>)
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d005      	beq.n	8012e88 <fm_menu_config_k_lin_2+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_2);
 8012e7c:	4b3e      	ldr	r3, [pc, #248]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	2102      	movs	r1, #2
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fc f8ba 	bl	800effc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8012e88:	2301      	movs	r3, #1
 8012e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012e8e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012e92:	2200      	movs	r2, #0
 8012e94:	4619      	mov	r1, r3
 8012e96:	483a      	ldr	r0, [pc, #232]	; (8012f80 <fm_menu_config_k_lin_2+0x160>)
 8012e98:	f7fb f9e2 	bl	800e260 <_txe_queue_send>
        break;
 8012e9c:	e042      	b.n	8012f24 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8012e9e:	4b37      	ldr	r3, [pc, #220]	; (8012f7c <fm_menu_config_k_lin_2+0x15c>)
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d005      	beq.n	8012eb2 <fm_menu_config_k_lin_2+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_2);
 8012ea6:	4b34      	ldr	r3, [pc, #208]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	2102      	movs	r1, #2
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fc f991 	bl	800f1d4 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012eb8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	482f      	ldr	r0, [pc, #188]	; (8012f80 <fm_menu_config_k_lin_2+0x160>)
 8012ec2:	f7fb f9cd 	bl	800e260 <_txe_queue_send>
        break;
 8012ec6:	e02d      	b.n	8012f24 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8012ec8:	4b2c      	ldr	r3, [pc, #176]	; (8012f7c <fm_menu_config_k_lin_2+0x15c>)
 8012eca:	781b      	ldrb	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00d      	beq.n	8012eec <fm_menu_config_k_lin_2+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8012ed0:	4b29      	ldr	r3, [pc, #164]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	2b0a      	cmp	r3, #10
 8012ed6:	d806      	bhi.n	8012ee6 <fm_menu_config_k_lin_2+0xc6>
                {
                    digit_lin_modify++;
 8012ed8:	4b27      	ldr	r3, [pc, #156]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	3301      	adds	r3, #1
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	4b25      	ldr	r3, [pc, #148]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012ee2:	701a      	strb	r2, [r3, #0]
 8012ee4:	e002      	b.n	8012eec <fm_menu_config_k_lin_2+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8012ee6:	4b24      	ldr	r3, [pc, #144]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012ee8:	2200      	movs	r2, #0
 8012eea:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8012eec:	2301      	movs	r3, #1
 8012eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012ef2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	4619      	mov	r1, r3
 8012efa:	4821      	ldr	r0, [pc, #132]	; (8012f80 <fm_menu_config_k_lin_2+0x160>)
 8012efc:	f7fb f9b0 	bl	800e260 <_txe_queue_send>
        break;
 8012f00:	e010      	b.n	8012f24 <fm_menu_config_k_lin_2+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8012f02:	4b20      	ldr	r3, [pc, #128]	; (8012f84 <fm_menu_config_k_lin_2+0x164>)
 8012f04:	2201      	movs	r2, #1
 8012f06:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8012f08:	4b1f      	ldr	r3, [pc, #124]	; (8012f88 <fm_menu_config_k_lin_2+0x168>)
 8012f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8012f12:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8012f16:	2200      	movs	r2, #0
 8012f18:	4619      	mov	r1, r3
 8012f1a:	4819      	ldr	r0, [pc, #100]	; (8012f80 <fm_menu_config_k_lin_2+0x160>)
 8012f1c:	f7fb f9a0 	bl	800e260 <_txe_queue_send>
        break;
 8012f20:	e000      	b.n	8012f24 <fm_menu_config_k_lin_2+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8012f22:	bf00      	nop
    }

    previous_event = event_id;
 8012f24:	4a19      	ldr	r2, [pc, #100]	; (8012f8c <fm_menu_config_k_lin_2+0x16c>)
 8012f26:	79fb      	ldrb	r3, [r7, #7]
 8012f28:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_2\n";
 8012f2a:	4b19      	ldr	r3, [pc, #100]	; (8012f90 <fm_menu_config_k_lin_2+0x170>)
 8012f2c:	f107 040c 	add.w	r4, r7, #12
 8012f30:	461d      	mov	r5, r3
 8012f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012f3a:	c407      	stmia	r4!, {r0, r1, r2}
 8012f3c:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8012f3e:	f107 030c 	add.w	r3, r7, #12
 8012f42:	211e      	movs	r1, #30
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fb fdc7 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8012f4a:	4b0e      	ldr	r3, [pc, #56]	; (8012f84 <fm_menu_config_k_lin_2+0x164>)
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	2b01      	cmp	r3, #1
 8012f50:	d108      	bne.n	8012f64 <fm_menu_config_k_lin_2+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 8012f52:	4b09      	ldr	r3, [pc, #36]	; (8012f78 <fm_menu_config_k_lin_2+0x158>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8012f58:	4b06      	ldr	r3, [pc, #24]	; (8012f74 <fm_menu_config_k_lin_2+0x154>)
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8012f5e:	4b09      	ldr	r3, [pc, #36]	; (8012f84 <fm_menu_config_k_lin_2+0x164>)
 8012f60:	2200      	movs	r2, #0
 8012f62:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8012f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3730      	adds	r7, #48	; 0x30
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	08012e21 	.word	0x08012e21
 8012f74:	20000143 	.word	0x20000143
 8012f78:	20001dc3 	.word	0x20001dc3
 8012f7c:	20001db6 	.word	0x20001db6
 8012f80:	20001388 	.word	0x20001388
 8012f84:	20001dc4 	.word	0x20001dc4
 8012f88:	08012f95 	.word	0x08012f95
 8012f8c:	20001db7 	.word	0x20001db7
 8012f90:	0801526c 	.word	0x0801526c

08012f94 <fm_menu_config_k_lin_3>:

ptr_ret_menu_t fm_menu_config_k_lin_3(fm_event_t event_id)
{
 8012f94:	b5b0      	push	{r4, r5, r7, lr}
 8012f96:	b08c      	sub	sp, #48	; 0x30
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_3;
 8012f9e:	4b51      	ldr	r3, [pc, #324]	; (80130e4 <fm_menu_config_k_lin_3+0x150>)
 8012fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8012fa2:	4b51      	ldr	r3, [pc, #324]	; (80130e8 <fm_menu_config_k_lin_3+0x154>)
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d104      	bne.n	8012fb4 <fm_menu_config_k_lin_3+0x20>
    {
        fm_lcd_clear();
 8012faa:	f7fc fc20 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8012fae:	4b4e      	ldr	r3, [pc, #312]	; (80130e8 <fm_menu_config_k_lin_3+0x154>)
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_3, event_id, digit_lin_modify);
 8012fb4:	4b4d      	ldr	r3, [pc, #308]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 8012fb6:	781a      	ldrb	r2, [r3, #0]
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	4619      	mov	r1, r3
 8012fbc:	2003      	movs	r0, #3
 8012fbe:	f7fc fe93 	bl	800fce8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8012fc2:	f7fc ffa6 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	3b01      	subs	r3, #1
 8012fca:	2b04      	cmp	r3, #4
 8012fcc:	d863      	bhi.n	8013096 <fm_menu_config_k_lin_3+0x102>
 8012fce:	a201      	add	r2, pc, #4	; (adr r2, 8012fd4 <fm_menu_config_k_lin_3+0x40>)
 8012fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd4:	08013097 	.word	0x08013097
 8012fd8:	08012fe9 	.word	0x08012fe9
 8012fdc:	08013013 	.word	0x08013013
 8012fe0:	0801303d 	.word	0x0801303d
 8012fe4:	08013077 	.word	0x08013077
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8012fe8:	4b41      	ldr	r3, [pc, #260]	; (80130f0 <fm_menu_config_k_lin_3+0x15c>)
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d005      	beq.n	8012ffc <fm_menu_config_k_lin_3+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_3);
 8012ff0:	4b3e      	ldr	r3, [pc, #248]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	2103      	movs	r1, #3
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7fc f800 	bl	800effc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013002:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013006:	2200      	movs	r2, #0
 8013008:	4619      	mov	r1, r3
 801300a:	483a      	ldr	r0, [pc, #232]	; (80130f4 <fm_menu_config_k_lin_3+0x160>)
 801300c:	f7fb f928 	bl	800e260 <_txe_queue_send>
        break;
 8013010:	e042      	b.n	8013098 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013012:	4b37      	ldr	r3, [pc, #220]	; (80130f0 <fm_menu_config_k_lin_3+0x15c>)
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d005      	beq.n	8013026 <fm_menu_config_k_lin_3+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_3);
 801301a:	4b34      	ldr	r3, [pc, #208]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	2103      	movs	r1, #3
 8013020:	4618      	mov	r0, r3
 8013022:	f7fc f8d7 	bl	800f1d4 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013026:	2301      	movs	r3, #1
 8013028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801302c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013030:	2200      	movs	r2, #0
 8013032:	4619      	mov	r1, r3
 8013034:	482f      	ldr	r0, [pc, #188]	; (80130f4 <fm_menu_config_k_lin_3+0x160>)
 8013036:	f7fb f913 	bl	800e260 <_txe_queue_send>
        break;
 801303a:	e02d      	b.n	8013098 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801303c:	4b2c      	ldr	r3, [pc, #176]	; (80130f0 <fm_menu_config_k_lin_3+0x15c>)
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00d      	beq.n	8013060 <fm_menu_config_k_lin_3+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 8013044:	4b29      	ldr	r3, [pc, #164]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	2b0a      	cmp	r3, #10
 801304a:	d806      	bhi.n	801305a <fm_menu_config_k_lin_3+0xc6>
                {
                    digit_lin_modify++;
 801304c:	4b27      	ldr	r3, [pc, #156]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	3301      	adds	r3, #1
 8013052:	b2da      	uxtb	r2, r3
 8013054:	4b25      	ldr	r3, [pc, #148]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 8013056:	701a      	strb	r2, [r3, #0]
 8013058:	e002      	b.n	8013060 <fm_menu_config_k_lin_3+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 801305a:	4b24      	ldr	r3, [pc, #144]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 801305c:	2200      	movs	r2, #0
 801305e:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013060:	2301      	movs	r3, #1
 8013062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013066:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801306a:	2200      	movs	r2, #0
 801306c:	4619      	mov	r1, r3
 801306e:	4821      	ldr	r0, [pc, #132]	; (80130f4 <fm_menu_config_k_lin_3+0x160>)
 8013070:	f7fb f8f6 	bl	800e260 <_txe_queue_send>
        break;
 8013074:	e010      	b.n	8013098 <fm_menu_config_k_lin_3+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013076:	4b20      	ldr	r3, [pc, #128]	; (80130f8 <fm_menu_config_k_lin_3+0x164>)
 8013078:	2201      	movs	r2, #1
 801307a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 801307c:	4b1f      	ldr	r3, [pc, #124]	; (80130fc <fm_menu_config_k_lin_3+0x168>)
 801307e:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013080:	2301      	movs	r3, #1
 8013082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013086:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801308a:	2200      	movs	r2, #0
 801308c:	4619      	mov	r1, r3
 801308e:	4819      	ldr	r0, [pc, #100]	; (80130f4 <fm_menu_config_k_lin_3+0x160>)
 8013090:	f7fb f8e6 	bl	800e260 <_txe_queue_send>
        break;
 8013094:	e000      	b.n	8013098 <fm_menu_config_k_lin_3+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013096:	bf00      	nop
    }

    previous_event = event_id;
 8013098:	4a19      	ldr	r2, [pc, #100]	; (8013100 <fm_menu_config_k_lin_3+0x16c>)
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_3\n";
 801309e:	4b19      	ldr	r3, [pc, #100]	; (8013104 <fm_menu_config_k_lin_3+0x170>)
 80130a0:	f107 040c 	add.w	r4, r7, #12
 80130a4:	461d      	mov	r5, r3
 80130a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80130ae:	c407      	stmia	r4!, {r0, r1, r2}
 80130b0:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80130b2:	f107 030c 	add.w	r3, r7, #12
 80130b6:	211e      	movs	r1, #30
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fb fd0d 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80130be:	4b0e      	ldr	r3, [pc, #56]	; (80130f8 <fm_menu_config_k_lin_3+0x164>)
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d108      	bne.n	80130d8 <fm_menu_config_k_lin_3+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80130c6:	4b09      	ldr	r3, [pc, #36]	; (80130ec <fm_menu_config_k_lin_3+0x158>)
 80130c8:	2200      	movs	r2, #0
 80130ca:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80130cc:	4b06      	ldr	r3, [pc, #24]	; (80130e8 <fm_menu_config_k_lin_3+0x154>)
 80130ce:	2201      	movs	r2, #1
 80130d0:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80130d2:	4b09      	ldr	r3, [pc, #36]	; (80130f8 <fm_menu_config_k_lin_3+0x164>)
 80130d4:	2200      	movs	r2, #0
 80130d6:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80130d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3730      	adds	r7, #48	; 0x30
 80130de:	46bd      	mov	sp, r7
 80130e0:	bdb0      	pop	{r4, r5, r7, pc}
 80130e2:	bf00      	nop
 80130e4:	08012f95 	.word	0x08012f95
 80130e8:	20000144 	.word	0x20000144
 80130ec:	20001dc5 	.word	0x20001dc5
 80130f0:	20001db6 	.word	0x20001db6
 80130f4:	20001388 	.word	0x20001388
 80130f8:	20001dc6 	.word	0x20001dc6
 80130fc:	08013109 	.word	0x08013109
 8013100:	20001db7 	.word	0x20001db7
 8013104:	0801528c 	.word	0x0801528c

08013108 <fm_menu_config_k_lin_4>:

ptr_ret_menu_t fm_menu_config_k_lin_4(fm_event_t event_id)
{
 8013108:	b5b0      	push	{r4, r5, r7, lr}
 801310a:	b08c      	sub	sp, #48	; 0x30
 801310c:	af00      	add	r7, sp, #0
 801310e:	4603      	mov	r3, r0
 8013110:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_4;
 8013112:	4b51      	ldr	r3, [pc, #324]	; (8013258 <fm_menu_config_k_lin_4+0x150>)
 8013114:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 8013116:	4b51      	ldr	r3, [pc, #324]	; (801325c <fm_menu_config_k_lin_4+0x154>)
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2b01      	cmp	r3, #1
 801311c:	d104      	bne.n	8013128 <fm_menu_config_k_lin_4+0x20>
    {
        fm_lcd_clear();
 801311e:	f7fc fb66 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8013122:	4b4e      	ldr	r3, [pc, #312]	; (801325c <fm_menu_config_k_lin_4+0x154>)
 8013124:	2200      	movs	r2, #0
 8013126:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_4, event_id, digit_lin_modify);
 8013128:	4b4d      	ldr	r3, [pc, #308]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 801312a:	781a      	ldrb	r2, [r3, #0]
 801312c:	79fb      	ldrb	r3, [r7, #7]
 801312e:	4619      	mov	r1, r3
 8013130:	2004      	movs	r0, #4
 8013132:	f7fc fdd9 	bl	800fce8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 8013136:	f7fc feec 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 801313a:	79fb      	ldrb	r3, [r7, #7]
 801313c:	3b01      	subs	r3, #1
 801313e:	2b04      	cmp	r3, #4
 8013140:	d863      	bhi.n	801320a <fm_menu_config_k_lin_4+0x102>
 8013142:	a201      	add	r2, pc, #4	; (adr r2, 8013148 <fm_menu_config_k_lin_4+0x40>)
 8013144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013148:	0801320b 	.word	0x0801320b
 801314c:	0801315d 	.word	0x0801315d
 8013150:	08013187 	.word	0x08013187
 8013154:	080131b1 	.word	0x080131b1
 8013158:	080131eb 	.word	0x080131eb
    {
        case EVENT_KEY_UP:
            if (correct_password)
 801315c:	4b41      	ldr	r3, [pc, #260]	; (8013264 <fm_menu_config_k_lin_4+0x15c>)
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d005      	beq.n	8013170 <fm_menu_config_k_lin_4+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_4);
 8013164:	4b3e      	ldr	r3, [pc, #248]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	2104      	movs	r1, #4
 801316a:	4618      	mov	r0, r3
 801316c:	f7fb ff46 	bl	800effc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 8013170:	2301      	movs	r3, #1
 8013172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013176:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801317a:	2200      	movs	r2, #0
 801317c:	4619      	mov	r1, r3
 801317e:	483a      	ldr	r0, [pc, #232]	; (8013268 <fm_menu_config_k_lin_4+0x160>)
 8013180:	f7fb f86e 	bl	800e260 <_txe_queue_send>
        break;
 8013184:	e042      	b.n	801320c <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013186:	4b37      	ldr	r3, [pc, #220]	; (8013264 <fm_menu_config_k_lin_4+0x15c>)
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d005      	beq.n	801319a <fm_menu_config_k_lin_4+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_4);
 801318e:	4b34      	ldr	r3, [pc, #208]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	2104      	movs	r1, #4
 8013194:	4618      	mov	r0, r3
 8013196:	f7fc f81d 	bl	800f1d4 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801319a:	2301      	movs	r3, #1
 801319c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131a0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80131a4:	2200      	movs	r2, #0
 80131a6:	4619      	mov	r1, r3
 80131a8:	482f      	ldr	r0, [pc, #188]	; (8013268 <fm_menu_config_k_lin_4+0x160>)
 80131aa:	f7fb f859 	bl	800e260 <_txe_queue_send>
        break;
 80131ae:	e02d      	b.n	801320c <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 80131b0:	4b2c      	ldr	r3, [pc, #176]	; (8013264 <fm_menu_config_k_lin_4+0x15c>)
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d00d      	beq.n	80131d4 <fm_menu_config_k_lin_4+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 80131b8:	4b29      	ldr	r3, [pc, #164]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	2b0a      	cmp	r3, #10
 80131be:	d806      	bhi.n	80131ce <fm_menu_config_k_lin_4+0xc6>
                {
                    digit_lin_modify++;
 80131c0:	4b27      	ldr	r3, [pc, #156]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	3301      	adds	r3, #1
 80131c6:	b2da      	uxtb	r2, r3
 80131c8:	4b25      	ldr	r3, [pc, #148]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 80131ca:	701a      	strb	r2, [r3, #0]
 80131cc:	e002      	b.n	80131d4 <fm_menu_config_k_lin_4+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 80131ce:	4b24      	ldr	r3, [pc, #144]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 80131d0:	2200      	movs	r2, #0
 80131d2:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80131d4:	2301      	movs	r3, #1
 80131d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131da:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80131de:	2200      	movs	r2, #0
 80131e0:	4619      	mov	r1, r3
 80131e2:	4821      	ldr	r0, [pc, #132]	; (8013268 <fm_menu_config_k_lin_4+0x160>)
 80131e4:	f7fb f83c 	bl	800e260 <_txe_queue_send>
        break;
 80131e8:	e010      	b.n	801320c <fm_menu_config_k_lin_4+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 80131ea:	4b20      	ldr	r3, [pc, #128]	; (801326c <fm_menu_config_k_lin_4+0x164>)
 80131ec:	2201      	movs	r2, #1
 80131ee:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 80131f0:	4b1f      	ldr	r3, [pc, #124]	; (8013270 <fm_menu_config_k_lin_4+0x168>)
 80131f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 80131f4:	2301      	movs	r3, #1
 80131f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80131fa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80131fe:	2200      	movs	r2, #0
 8013200:	4619      	mov	r1, r3
 8013202:	4819      	ldr	r0, [pc, #100]	; (8013268 <fm_menu_config_k_lin_4+0x160>)
 8013204:	f7fb f82c 	bl	800e260 <_txe_queue_send>
        break;
 8013208:	e000      	b.n	801320c <fm_menu_config_k_lin_4+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801320a:	bf00      	nop
    }

    previous_event = event_id;
 801320c:	4a19      	ldr	r2, [pc, #100]	; (8013274 <fm_menu_config_k_lin_4+0x16c>)
 801320e:	79fb      	ldrb	r3, [r7, #7]
 8013210:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_4\n";
 8013212:	4b19      	ldr	r3, [pc, #100]	; (8013278 <fm_menu_config_k_lin_4+0x170>)
 8013214:	f107 040c 	add.w	r4, r7, #12
 8013218:	461d      	mov	r5, r3
 801321a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801321c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801321e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013222:	c407      	stmia	r4!, {r0, r1, r2}
 8013224:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013226:	f107 030c 	add.w	r3, r7, #12
 801322a:	211e      	movs	r1, #30
 801322c:	4618      	mov	r0, r3
 801322e:	f7fb fc53 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013232:	4b0e      	ldr	r3, [pc, #56]	; (801326c <fm_menu_config_k_lin_4+0x164>)
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2b01      	cmp	r3, #1
 8013238:	d108      	bne.n	801324c <fm_menu_config_k_lin_4+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 801323a:	4b09      	ldr	r3, [pc, #36]	; (8013260 <fm_menu_config_k_lin_4+0x158>)
 801323c:	2200      	movs	r2, #0
 801323e:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 8013240:	4b06      	ldr	r3, [pc, #24]	; (801325c <fm_menu_config_k_lin_4+0x154>)
 8013242:	2201      	movs	r2, #1
 8013244:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013246:	4b09      	ldr	r3, [pc, #36]	; (801326c <fm_menu_config_k_lin_4+0x164>)
 8013248:	2200      	movs	r2, #0
 801324a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 801324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801324e:	4618      	mov	r0, r3
 8013250:	3730      	adds	r7, #48	; 0x30
 8013252:	46bd      	mov	sp, r7
 8013254:	bdb0      	pop	{r4, r5, r7, pc}
 8013256:	bf00      	nop
 8013258:	08013109 	.word	0x08013109
 801325c:	20000145 	.word	0x20000145
 8013260:	20001dc7 	.word	0x20001dc7
 8013264:	20001db6 	.word	0x20001db6
 8013268:	20001388 	.word	0x20001388
 801326c:	20001dc8 	.word	0x20001dc8
 8013270:	0801327d 	.word	0x0801327d
 8013274:	20001db7 	.word	0x20001db7
 8013278:	080152ac 	.word	0x080152ac

0801327c <fm_menu_config_k_lin_5>:

ptr_ret_menu_t fm_menu_config_k_lin_5(fm_event_t event_id)
{
 801327c:	b5b0      	push	{r4, r5, r7, lr}
 801327e:	b08c      	sub	sp, #48	; 0x30
 8013280:	af00      	add	r7, sp, #0
 8013282:	4603      	mov	r3, r0
 8013284:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_k_lin_t digit_lin_modify = DIG_LIN_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_5;
 8013286:	4b51      	ldr	r3, [pc, #324]	; (80133cc <fm_menu_config_k_lin_5+0x150>)
 8013288:	62fb      	str	r3, [r7, #44]	; 0x2c
    fm_event_t event_now;

    if (new_entry == 1)
 801328a:	4b51      	ldr	r3, [pc, #324]	; (80133d0 <fm_menu_config_k_lin_5+0x154>)
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	2b01      	cmp	r3, #1
 8013290:	d104      	bne.n	801329c <fm_menu_config_k_lin_5+0x20>
    {
        fm_lcd_clear();
 8013292:	f7fc faac 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8013296:	4b4e      	ldr	r3, [pc, #312]	; (80133d0 <fm_menu_config_k_lin_5+0x154>)
 8013298:	2200      	movs	r2, #0
 801329a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_lin(K_LIN_5, event_id, digit_lin_modify);
 801329c:	4b4d      	ldr	r3, [pc, #308]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 801329e:	781a      	ldrb	r2, [r3, #0]
 80132a0:	79fb      	ldrb	r3, [r7, #7]
 80132a2:	4619      	mov	r1, r3
 80132a4:	2005      	movs	r0, #5
 80132a6:	f7fc fd1f 	bl	800fce8 <fm_lcd_k_lin>
    fm_lcd_refresh();
 80132aa:	f7fc fe32 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 80132ae:	79fb      	ldrb	r3, [r7, #7]
 80132b0:	3b01      	subs	r3, #1
 80132b2:	2b04      	cmp	r3, #4
 80132b4:	d863      	bhi.n	801337e <fm_menu_config_k_lin_5+0x102>
 80132b6:	a201      	add	r2, pc, #4	; (adr r2, 80132bc <fm_menu_config_k_lin_5+0x40>)
 80132b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132bc:	0801337f 	.word	0x0801337f
 80132c0:	080132d1 	.word	0x080132d1
 80132c4:	080132fb 	.word	0x080132fb
 80132c8:	08013325 	.word	0x08013325
 80132cc:	0801335f 	.word	0x0801335f
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80132d0:	4b41      	ldr	r3, [pc, #260]	; (80133d8 <fm_menu_config_k_lin_5+0x15c>)
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d005      	beq.n	80132e4 <fm_menu_config_k_lin_5+0x68>
            {
                fm_factory_modify_k_lin_add(digit_lin_modify, K_LIN_5);
 80132d8:	4b3e      	ldr	r3, [pc, #248]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	2105      	movs	r1, #5
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fb fe8c 	bl	800effc <fm_factory_modify_k_lin_add>
            }
            event_now = EVENT_LCD_REFRESH;
 80132e4:	2301      	movs	r3, #1
 80132e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80132ea:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80132ee:	2200      	movs	r2, #0
 80132f0:	4619      	mov	r1, r3
 80132f2:	483a      	ldr	r0, [pc, #232]	; (80133dc <fm_menu_config_k_lin_5+0x160>)
 80132f4:	f7fa ffb4 	bl	800e260 <_txe_queue_send>
        break;
 80132f8:	e042      	b.n	8013380 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_DOWN:
            if (correct_password)
 80132fa:	4b37      	ldr	r3, [pc, #220]	; (80133d8 <fm_menu_config_k_lin_5+0x15c>)
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d005      	beq.n	801330e <fm_menu_config_k_lin_5+0x92>
            {
                fm_factory_modify_k_lin_subs(digit_lin_modify, K_LIN_5);
 8013302:	4b34      	ldr	r3, [pc, #208]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	2105      	movs	r1, #5
 8013308:	4618      	mov	r0, r3
 801330a:	f7fb ff63 	bl	800f1d4 <fm_factory_modify_k_lin_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 801330e:	2301      	movs	r3, #1
 8013310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013314:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013318:	2200      	movs	r2, #0
 801331a:	4619      	mov	r1, r3
 801331c:	482f      	ldr	r0, [pc, #188]	; (80133dc <fm_menu_config_k_lin_5+0x160>)
 801331e:	f7fa ff9f 	bl	800e260 <_txe_queue_send>
        break;
 8013322:	e02d      	b.n	8013380 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013324:	4b2c      	ldr	r3, [pc, #176]	; (80133d8 <fm_menu_config_k_lin_5+0x15c>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d00d      	beq.n	8013348 <fm_menu_config_k_lin_5+0xcc>
            {
                if(digit_lin_modify < DIG_LIN_11)
 801332c:	4b29      	ldr	r3, [pc, #164]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	2b0a      	cmp	r3, #10
 8013332:	d806      	bhi.n	8013342 <fm_menu_config_k_lin_5+0xc6>
                {
                    digit_lin_modify++;
 8013334:	4b27      	ldr	r3, [pc, #156]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	3301      	adds	r3, #1
 801333a:	b2da      	uxtb	r2, r3
 801333c:	4b25      	ldr	r3, [pc, #148]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 801333e:	701a      	strb	r2, [r3, #0]
 8013340:	e002      	b.n	8013348 <fm_menu_config_k_lin_5+0xcc>
                }
                else
                {
                    digit_lin_modify = DIG_LIN_0;
 8013342:	4b24      	ldr	r3, [pc, #144]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 8013344:	2200      	movs	r2, #0
 8013346:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013348:	2301      	movs	r3, #1
 801334a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801334e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013352:	2200      	movs	r2, #0
 8013354:	4619      	mov	r1, r3
 8013356:	4821      	ldr	r0, [pc, #132]	; (80133dc <fm_menu_config_k_lin_5+0x160>)
 8013358:	f7fa ff82 	bl	800e260 <_txe_queue_send>
        break;
 801335c:	e010      	b.n	8013380 <fm_menu_config_k_lin_5+0x104>
        case EVENT_KEY_ESC:
            new_exit = 1;
 801335e:	4b20      	ldr	r3, [pc, #128]	; (80133e0 <fm_menu_config_k_lin_5+0x164>)
 8013360:	2201      	movs	r2, #1
 8013362:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013364:	4b1f      	ldr	r3, [pc, #124]	; (80133e4 <fm_menu_config_k_lin_5+0x168>)
 8013366:	62fb      	str	r3, [r7, #44]	; 0x2c
            event_now = EVENT_LCD_REFRESH;
 8013368:	2301      	movs	r3, #1
 801336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801336e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8013372:	2200      	movs	r2, #0
 8013374:	4619      	mov	r1, r3
 8013376:	4819      	ldr	r0, [pc, #100]	; (80133dc <fm_menu_config_k_lin_5+0x160>)
 8013378:	f7fa ff72 	bl	800e260 <_txe_queue_send>
        break;
 801337c:	e000      	b.n	8013380 <fm_menu_config_k_lin_5+0x104>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801337e:	bf00      	nop
    }

    previous_event = event_id;
 8013380:	4a19      	ldr	r2, [pc, #100]	; (80133e8 <fm_menu_config_k_lin_5+0x16c>)
 8013382:	79fb      	ldrb	r3, [r7, #7]
 8013384:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K_lin_5\n";
 8013386:	4b19      	ldr	r3, [pc, #100]	; (80133ec <fm_menu_config_k_lin_5+0x170>)
 8013388:	f107 040c 	add.w	r4, r7, #12
 801338c:	461d      	mov	r5, r3
 801338e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013392:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013396:	c407      	stmia	r4!, {r0, r1, r2}
 8013398:	8023      	strh	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 801339a:	f107 030c 	add.w	r3, r7, #12
 801339e:	211e      	movs	r1, #30
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7fb fb99 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 80133a6:	4b0e      	ldr	r3, [pc, #56]	; (80133e0 <fm_menu_config_k_lin_5+0x164>)
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	2b01      	cmp	r3, #1
 80133ac:	d108      	bne.n	80133c0 <fm_menu_config_k_lin_5+0x144>
    {
        digit_lin_modify = DIG_LIN_0;
 80133ae:	4b09      	ldr	r3, [pc, #36]	; (80133d4 <fm_menu_config_k_lin_5+0x158>)
 80133b0:	2200      	movs	r2, #0
 80133b2:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80133b4:	4b06      	ldr	r3, [pc, #24]	; (80133d0 <fm_menu_config_k_lin_5+0x154>)
 80133b6:	2201      	movs	r2, #1
 80133b8:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80133ba:	4b09      	ldr	r3, [pc, #36]	; (80133e0 <fm_menu_config_k_lin_5+0x164>)
 80133bc:	2200      	movs	r2, #0
 80133be:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80133c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3730      	adds	r7, #48	; 0x30
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bdb0      	pop	{r4, r5, r7, pc}
 80133ca:	bf00      	nop
 80133cc:	0801327d 	.word	0x0801327d
 80133d0:	20000146 	.word	0x20000146
 80133d4:	20001dc9 	.word	0x20001dc9
 80133d8:	20001db6 	.word	0x20001db6
 80133dc:	20001388 	.word	0x20001388
 80133e0:	20001dca 	.word	0x20001dca
 80133e4:	08013a99 	.word	0x08013a99
 80133e8:	20001db7 	.word	0x20001db7
 80133ec:	080152cc 	.word	0x080152cc

080133f0 <fm_menu_config_k_param>:
 * K.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_k_param(fm_event_t event_id)
{
 80133f0:	b5b0      	push	{r4, r5, r7, lr}
 80133f2:	b08a      	sub	sp, #40	; 0x28
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	4603      	mov	r3, r0
 80133f8:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static sel_digit_t digit_modify = DIG_0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80133fa:	4b69      	ldr	r3, [pc, #420]	; (80135a0 <fm_menu_config_k_param+0x1b0>)
 80133fc:	627b      	str	r3, [r7, #36]	; 0x24
    fm_event_t event_now;

    if (new_entry == 1)
 80133fe:	4b69      	ldr	r3, [pc, #420]	; (80135a4 <fm_menu_config_k_param+0x1b4>)
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	2b01      	cmp	r3, #1
 8013404:	d104      	bne.n	8013410 <fm_menu_config_k_param+0x20>
    {
        fm_lcd_clear();
 8013406:	f7fc f9f2 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 801340a:	4b66      	ldr	r3, [pc, #408]	; (80135a4 <fm_menu_config_k_param+0x1b4>)
 801340c:	2200      	movs	r2, #0
 801340e:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_k_factor(event_id, digit_modify);
 8013410:	4b65      	ldr	r3, [pc, #404]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 8013412:	781a      	ldrb	r2, [r3, #0]
 8013414:	79fb      	ldrb	r3, [r7, #7]
 8013416:	4611      	mov	r1, r2
 8013418:	4618      	mov	r0, r3
 801341a:	f7fc fbf3 	bl	800fc04 <fm_lcd_k_factor>
    fm_lcd_refresh();
 801341e:	f7fc fd78 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8013422:	79fb      	ldrb	r3, [r7, #7]
 8013424:	3b01      	subs	r3, #1
 8013426:	2b04      	cmp	r3, #4
 8013428:	f200 8094 	bhi.w	8013554 <fm_menu_config_k_param+0x164>
 801342c:	a201      	add	r2, pc, #4	; (adr r2, 8013434 <fm_menu_config_k_param+0x44>)
 801342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013432:	bf00      	nop
 8013434:	08013555 	.word	0x08013555
 8013438:	08013449 	.word	0x08013449
 801343c:	08013471 	.word	0x08013471
 8013440:	08013499 	.word	0x08013499
 8013444:	08013535 	.word	0x08013535
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013448:	4b58      	ldr	r3, [pc, #352]	; (80135ac <fm_menu_config_k_param+0x1bc>)
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d004      	beq.n	801345a <fm_menu_config_k_param+0x6a>
            {
                fm_factory_modify_k_factor_add(digit_modify);
 8013450:	4b55      	ldr	r3, [pc, #340]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	4618      	mov	r0, r3
 8013456:	f7fb fd51 	bl	800eefc <fm_factory_modify_k_factor_add>
            }
            event_now = EVENT_LCD_REFRESH;
 801345a:	2301      	movs	r3, #1
 801345c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013460:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013464:	2200      	movs	r2, #0
 8013466:	4619      	mov	r1, r3
 8013468:	4851      	ldr	r0, [pc, #324]	; (80135b0 <fm_menu_config_k_param+0x1c0>)
 801346a:	f7fa fef9 	bl	800e260 <_txe_queue_send>
        break;
 801346e:	e072      	b.n	8013556 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_DOWN:
            if (correct_password)
 8013470:	4b4e      	ldr	r3, [pc, #312]	; (80135ac <fm_menu_config_k_param+0x1bc>)
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d004      	beq.n	8013482 <fm_menu_config_k_param+0x92>
            {
                fm_factory_modify_k_factor_subs(digit_modify);
 8013478:	4b4b      	ldr	r3, [pc, #300]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	4618      	mov	r0, r3
 801347e:	f7fb fd7d 	bl	800ef7c <fm_factory_modify_k_factor_subs>
            }
            event_now = EVENT_LCD_REFRESH;
 8013482:	2301      	movs	r3, #1
 8013484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013488:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801348c:	2200      	movs	r2, #0
 801348e:	4619      	mov	r1, r3
 8013490:	4847      	ldr	r0, [pc, #284]	; (80135b0 <fm_menu_config_k_param+0x1c0>)
 8013492:	f7fa fee5 	bl	800e260 <_txe_queue_send>
        break;
 8013496:	e05e      	b.n	8013556 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013498:	4b44      	ldr	r3, [pc, #272]	; (80135ac <fm_menu_config_k_param+0x1bc>)
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d03e      	beq.n	801351e <fm_menu_config_k_param+0x12e>
            {
                if (digit_modify == DIG_0)
 80134a0:	4b41      	ldr	r3, [pc, #260]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d103      	bne.n	80134b0 <fm_menu_config_k_param+0xc0>
                {
                    digit_modify = DIG_1;
 80134a8:	4b3f      	ldr	r3, [pc, #252]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134aa:	2201      	movs	r2, #1
 80134ac:	701a      	strb	r2, [r3, #0]
 80134ae:	e036      	b.n	801351e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_1)
 80134b0:	4b3d      	ldr	r3, [pc, #244]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d103      	bne.n	80134c0 <fm_menu_config_k_param+0xd0>
                {
                    digit_modify = DIG_2;
 80134b8:	4b3b      	ldr	r3, [pc, #236]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134ba:	2202      	movs	r2, #2
 80134bc:	701a      	strb	r2, [r3, #0]
 80134be:	e02e      	b.n	801351e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_2)
 80134c0:	4b39      	ldr	r3, [pc, #228]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	2b02      	cmp	r3, #2
 80134c6:	d103      	bne.n	80134d0 <fm_menu_config_k_param+0xe0>
                {
                    digit_modify = DIG_3;
 80134c8:	4b37      	ldr	r3, [pc, #220]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134ca:	2203      	movs	r2, #3
 80134cc:	701a      	strb	r2, [r3, #0]
 80134ce:	e026      	b.n	801351e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_3)
 80134d0:	4b35      	ldr	r3, [pc, #212]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	2b03      	cmp	r3, #3
 80134d6:	d103      	bne.n	80134e0 <fm_menu_config_k_param+0xf0>
                {
                    digit_modify = DIG_4;
 80134d8:	4b33      	ldr	r3, [pc, #204]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134da:	2204      	movs	r2, #4
 80134dc:	701a      	strb	r2, [r3, #0]
 80134de:	e01e      	b.n	801351e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_4)
 80134e0:	4b31      	ldr	r3, [pc, #196]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b04      	cmp	r3, #4
 80134e6:	d103      	bne.n	80134f0 <fm_menu_config_k_param+0x100>
                {
                    digit_modify = DIG_5;
 80134e8:	4b2f      	ldr	r3, [pc, #188]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134ea:	2205      	movs	r2, #5
 80134ec:	701a      	strb	r2, [r3, #0]
 80134ee:	e016      	b.n	801351e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_5)
 80134f0:	4b2d      	ldr	r3, [pc, #180]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	2b05      	cmp	r3, #5
 80134f6:	d103      	bne.n	8013500 <fm_menu_config_k_param+0x110>
                {
                    digit_modify = DIG_6;
 80134f8:	4b2b      	ldr	r3, [pc, #172]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 80134fa:	2206      	movs	r2, #6
 80134fc:	701a      	strb	r2, [r3, #0]
 80134fe:	e00e      	b.n	801351e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_6)
 8013500:	4b29      	ldr	r3, [pc, #164]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	2b06      	cmp	r3, #6
 8013506:	d103      	bne.n	8013510 <fm_menu_config_k_param+0x120>
                {
                    digit_modify = DIG_7;
 8013508:	4b27      	ldr	r3, [pc, #156]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 801350a:	2207      	movs	r2, #7
 801350c:	701a      	strb	r2, [r3, #0]
 801350e:	e006      	b.n	801351e <fm_menu_config_k_param+0x12e>
                }
                else if (digit_modify == DIG_7)
 8013510:	4b25      	ldr	r3, [pc, #148]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	2b07      	cmp	r3, #7
 8013516:	d102      	bne.n	801351e <fm_menu_config_k_param+0x12e>
                {
                    digit_modify = DIG_0;
 8013518:	4b23      	ldr	r3, [pc, #140]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 801351a:	2200      	movs	r2, #0
 801351c:	701a      	strb	r2, [r3, #0]
                }
            }
            event_now = EVENT_LCD_REFRESH;
 801351e:	2301      	movs	r3, #1
 8013520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013524:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013528:	2200      	movs	r2, #0
 801352a:	4619      	mov	r1, r3
 801352c:	4820      	ldr	r0, [pc, #128]	; (80135b0 <fm_menu_config_k_param+0x1c0>)
 801352e:	f7fa fe97 	bl	800e260 <_txe_queue_send>
        break;
 8013532:	e010      	b.n	8013556 <fm_menu_config_k_param+0x166>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013534:	4b1f      	ldr	r3, [pc, #124]	; (80135b4 <fm_menu_config_k_param+0x1c4>)
 8013536:	2201      	movs	r2, #1
 8013538:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_k_lin_1;
 801353a:	4b1f      	ldr	r3, [pc, #124]	; (80135b8 <fm_menu_config_k_param+0x1c8>)
 801353c:	627b      	str	r3, [r7, #36]	; 0x24
            event_now = EVENT_LCD_REFRESH;
 801353e:	2301      	movs	r3, #1
 8013540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013544:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8013548:	2200      	movs	r2, #0
 801354a:	4619      	mov	r1, r3
 801354c:	4818      	ldr	r0, [pc, #96]	; (80135b0 <fm_menu_config_k_param+0x1c0>)
 801354e:	f7fa fe87 	bl	800e260 <_txe_queue_send>
        break;
 8013552:	e000      	b.n	8013556 <fm_menu_config_k_param+0x166>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013554:	bf00      	nop
    }

    previous_event = event_id;
 8013556:	4a19      	ldr	r2, [pc, #100]	; (80135bc <fm_menu_config_k_param+0x1cc>)
 8013558:	79fb      	ldrb	r3, [r7, #7]
 801355a:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar parametro K\n";
 801355c:	4b18      	ldr	r3, [pc, #96]	; (80135c0 <fm_menu_config_k_param+0x1d0>)
 801355e:	f107 0408 	add.w	r4, r7, #8
 8013562:	461d      	mov	r5, r3
 8013564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013568:	e895 0003 	ldmia.w	r5, {r0, r1}
 801356c:	e884 0003 	stmia.w	r4, {r0, r1}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013570:	f107 0308 	add.w	r3, r7, #8
 8013574:	2118      	movs	r1, #24
 8013576:	4618      	mov	r0, r3
 8013578:	f7fb faae 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 801357c:	4b0d      	ldr	r3, [pc, #52]	; (80135b4 <fm_menu_config_k_param+0x1c4>)
 801357e:	781b      	ldrb	r3, [r3, #0]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d108      	bne.n	8013596 <fm_menu_config_k_param+0x1a6>
    {
        digit_modify = DIG_0;
 8013584:	4b08      	ldr	r3, [pc, #32]	; (80135a8 <fm_menu_config_k_param+0x1b8>)
 8013586:	2200      	movs	r2, #0
 8013588:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 801358a:	4b06      	ldr	r3, [pc, #24]	; (80135a4 <fm_menu_config_k_param+0x1b4>)
 801358c:	2201      	movs	r2, #1
 801358e:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013590:	4b08      	ldr	r3, [pc, #32]	; (80135b4 <fm_menu_config_k_param+0x1c4>)
 8013592:	2200      	movs	r2, #0
 8013594:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013598:	4618      	mov	r0, r3
 801359a:	3728      	adds	r7, #40	; 0x28
 801359c:	46bd      	mov	sp, r7
 801359e:	bdb0      	pop	{r4, r5, r7, pc}
 80135a0:	080133f1 	.word	0x080133f1
 80135a4:	20000147 	.word	0x20000147
 80135a8:	20001dcb 	.word	0x20001dcb
 80135ac:	20001db6 	.word	0x20001db6
 80135b0:	20001388 	.word	0x20001388
 80135b4:	20001dcc 	.word	0x20001dcc
 80135b8:	08012cad 	.word	0x08012cad
 80135bc:	20001db7 	.word	0x20001db7
 80135c0:	080152ec 	.word	0x080152ec

080135c4 <fm_menu_config_pass>:
 * almacenada en memoria (DOWN -> UP -> UP -> ENTER).
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_pass(fm_event_t event_id)
{
 80135c4:	b5b0      	push	{r4, r5, r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	4603      	mov	r3, r0
 80135cc:	71fb      	strb	r3, [r7, #7]
        0,
        0
    };
    static uint8_t password_index = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 80135ce:	4ba4      	ldr	r3, [pc, #656]	; (8013860 <fm_menu_config_pass+0x29c>)
 80135d0:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 80135d2:	4ba4      	ldr	r3, [pc, #656]	; (8013864 <fm_menu_config_pass+0x2a0>)
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	d10a      	bne.n	80135f0 <fm_menu_config_pass+0x2c>
    {
        in_configuration = 1;
 80135da:	4ba3      	ldr	r3, [pc, #652]	; (8013868 <fm_menu_config_pass+0x2a4>)
 80135dc:	2201      	movs	r2, #1
 80135de:	701a      	strb	r2, [r3, #0]
        correct_password = 0;
 80135e0:	4ba2      	ldr	r3, [pc, #648]	; (801386c <fm_menu_config_pass+0x2a8>)
 80135e2:	2200      	movs	r2, #0
 80135e4:	701a      	strb	r2, [r3, #0]
        fm_lcd_clear();
 80135e6:	f7fc f902 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 80135ea:	4b9e      	ldr	r3, [pc, #632]	; (8013864 <fm_menu_config_pass+0x2a0>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	701a      	strb	r2, [r3, #0]
    }

    lcd_set_symbol(PASS, 0x00);
 80135f0:	2100      	movs	r1, #0
 80135f2:	200a      	movs	r0, #10
 80135f4:	f7fd ff68 	bl	80114c8 <lcd_set_symbol>
    /*
     * Cada vez que se introduce un dígito de la contraseña, aparece un 8 nuevo
     * en la pantalla, hasta 3 veces (luego de la cuarta vez, se pasa al menú
     * de configuración del factor K).
     */
    if (password_index == 1)
 80135f8:	4b9d      	ldr	r3, [pc, #628]	; (8013870 <fm_menu_config_pass+0x2ac>)
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d104      	bne.n	801360a <fm_menu_config_pass+0x46>
    {
        lcd_set_symbol(PASS1, 0x00);
 8013600:	2100      	movs	r1, #0
 8013602:	200d      	movs	r0, #13
 8013604:	f7fd ff60 	bl	80114c8 <lcd_set_symbol>
 8013608:	e010      	b.n	801362c <fm_menu_config_pass+0x68>
    }
    else if (password_index == 2)
 801360a:	4b99      	ldr	r3, [pc, #612]	; (8013870 <fm_menu_config_pass+0x2ac>)
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	2b02      	cmp	r3, #2
 8013610:	d104      	bne.n	801361c <fm_menu_config_pass+0x58>
    {
        lcd_set_symbol(PASS2, 0x00);
 8013612:	2100      	movs	r1, #0
 8013614:	200e      	movs	r0, #14
 8013616:	f7fd ff57 	bl	80114c8 <lcd_set_symbol>
 801361a:	e007      	b.n	801362c <fm_menu_config_pass+0x68>
    }
    else if (password_index == PASSWORD_LENGTH - 1)
 801361c:	4b94      	ldr	r3, [pc, #592]	; (8013870 <fm_menu_config_pass+0x2ac>)
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	2b03      	cmp	r3, #3
 8013622:	d103      	bne.n	801362c <fm_menu_config_pass+0x68>
    {
        lcd_set_symbol(PASS3, 0x00);
 8013624:	2100      	movs	r1, #0
 8013626:	200f      	movs	r0, #15
 8013628:	f7fd ff4e 	bl	80114c8 <lcd_set_symbol>
    }
    fm_lcd_refresh();
 801362c:	f7fc fc71 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8013630:	79fb      	ldrb	r3, [r7, #7]
 8013632:	3b01      	subs	r3, #1
 8013634:	2b04      	cmp	r3, #4
 8013636:	f200 80b1 	bhi.w	801379c <fm_menu_config_pass+0x1d8>
 801363a:	a201      	add	r2, pc, #4	; (adr r2, 8013640 <fm_menu_config_pass+0x7c>)
 801363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013640:	0801379d 	.word	0x0801379d
 8013644:	08013655 	.word	0x08013655
 8013648:	080136a7 	.word	0x080136a7
 801364c:	080136f9 	.word	0x080136f9
 8013650:	0801374b 	.word	0x0801374b
    {
        case EVENT_KEY_UP:
            password[password_index] = 1;
 8013654:	4b86      	ldr	r3, [pc, #536]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	461a      	mov	r2, r3
 801365a:	4b86      	ldr	r3, [pc, #536]	; (8013874 <fm_menu_config_pass+0x2b0>)
 801365c:	2101      	movs	r1, #1
 801365e:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013660:	4b83      	ldr	r3, [pc, #524]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	2b02      	cmp	r3, #2
 8013666:	d80f      	bhi.n	8013688 <fm_menu_config_pass+0xc4>
            {
                event_now = EVENT_LCD_REFRESH;
 8013668:	2301      	movs	r3, #1
 801366a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801366c:	f107 0313 	add.w	r3, r7, #19
 8013670:	2200      	movs	r2, #0
 8013672:	4619      	mov	r1, r3
 8013674:	4880      	ldr	r0, [pc, #512]	; (8013878 <fm_menu_config_pass+0x2b4>)
 8013676:	f7fa fdf3 	bl	800e260 <_txe_queue_send>
                password_index++;
 801367a:	4b7d      	ldr	r3, [pc, #500]	; (8013870 <fm_menu_config_pass+0x2ac>)
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	3301      	adds	r3, #1
 8013680:	b2da      	uxtb	r2, r3
 8013682:	4b7b      	ldr	r3, [pc, #492]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013684:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 8013686:	e08a      	b.n	801379e <fm_menu_config_pass+0x1da>
                new_exit = 1;
 8013688:	4b7c      	ldr	r3, [pc, #496]	; (801387c <fm_menu_config_pass+0x2b8>)
 801368a:	2201      	movs	r2, #1
 801368c:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 801368e:	4b7c      	ldr	r3, [pc, #496]	; (8013880 <fm_menu_config_pass+0x2bc>)
 8013690:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013692:	2301      	movs	r3, #1
 8013694:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013696:	f107 0313 	add.w	r3, r7, #19
 801369a:	2200      	movs	r2, #0
 801369c:	4619      	mov	r1, r3
 801369e:	4876      	ldr	r0, [pc, #472]	; (8013878 <fm_menu_config_pass+0x2b4>)
 80136a0:	f7fa fdde 	bl	800e260 <_txe_queue_send>
        break;
 80136a4:	e07b      	b.n	801379e <fm_menu_config_pass+0x1da>
        case EVENT_KEY_DOWN:
            password[password_index] = 2;
 80136a6:	4b72      	ldr	r3, [pc, #456]	; (8013870 <fm_menu_config_pass+0x2ac>)
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	461a      	mov	r2, r3
 80136ac:	4b71      	ldr	r3, [pc, #452]	; (8013874 <fm_menu_config_pass+0x2b0>)
 80136ae:	2102      	movs	r1, #2
 80136b0:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 80136b2:	4b6f      	ldr	r3, [pc, #444]	; (8013870 <fm_menu_config_pass+0x2ac>)
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	2b02      	cmp	r3, #2
 80136b8:	d80f      	bhi.n	80136da <fm_menu_config_pass+0x116>
            {
                event_now = EVENT_LCD_REFRESH;
 80136ba:	2301      	movs	r3, #1
 80136bc:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136be:	f107 0313 	add.w	r3, r7, #19
 80136c2:	2200      	movs	r2, #0
 80136c4:	4619      	mov	r1, r3
 80136c6:	486c      	ldr	r0, [pc, #432]	; (8013878 <fm_menu_config_pass+0x2b4>)
 80136c8:	f7fa fdca 	bl	800e260 <_txe_queue_send>
                password_index++;
 80136cc:	4b68      	ldr	r3, [pc, #416]	; (8013870 <fm_menu_config_pass+0x2ac>)
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	3301      	adds	r3, #1
 80136d2:	b2da      	uxtb	r2, r3
 80136d4:	4b66      	ldr	r3, [pc, #408]	; (8013870 <fm_menu_config_pass+0x2ac>)
 80136d6:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 80136d8:	e061      	b.n	801379e <fm_menu_config_pass+0x1da>
                new_exit = 1;
 80136da:	4b68      	ldr	r3, [pc, #416]	; (801387c <fm_menu_config_pass+0x2b8>)
 80136dc:	2201      	movs	r2, #1
 80136de:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 80136e0:	4b67      	ldr	r3, [pc, #412]	; (8013880 <fm_menu_config_pass+0x2bc>)
 80136e2:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80136e4:	2301      	movs	r3, #1
 80136e6:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80136e8:	f107 0313 	add.w	r3, r7, #19
 80136ec:	2200      	movs	r2, #0
 80136ee:	4619      	mov	r1, r3
 80136f0:	4861      	ldr	r0, [pc, #388]	; (8013878 <fm_menu_config_pass+0x2b4>)
 80136f2:	f7fa fdb5 	bl	800e260 <_txe_queue_send>
        break;
 80136f6:	e052      	b.n	801379e <fm_menu_config_pass+0x1da>
        case EVENT_KEY_ENTER:
            password[password_index] = 3; // @suppress("Avoid magic numbers")
 80136f8:	4b5d      	ldr	r3, [pc, #372]	; (8013870 <fm_menu_config_pass+0x2ac>)
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	461a      	mov	r2, r3
 80136fe:	4b5d      	ldr	r3, [pc, #372]	; (8013874 <fm_menu_config_pass+0x2b0>)
 8013700:	2103      	movs	r1, #3
 8013702:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013704:	4b5a      	ldr	r3, [pc, #360]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	2b02      	cmp	r3, #2
 801370a:	d80f      	bhi.n	801372c <fm_menu_config_pass+0x168>
            {
                event_now = EVENT_LCD_REFRESH;
 801370c:	2301      	movs	r3, #1
 801370e:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013710:	f107 0313 	add.w	r3, r7, #19
 8013714:	2200      	movs	r2, #0
 8013716:	4619      	mov	r1, r3
 8013718:	4857      	ldr	r0, [pc, #348]	; (8013878 <fm_menu_config_pass+0x2b4>)
 801371a:	f7fa fda1 	bl	800e260 <_txe_queue_send>
                password_index++;
 801371e:	4b54      	ldr	r3, [pc, #336]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	3301      	adds	r3, #1
 8013724:	b2da      	uxtb	r2, r3
 8013726:	4b52      	ldr	r3, [pc, #328]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013728:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 801372a:	e038      	b.n	801379e <fm_menu_config_pass+0x1da>
                new_exit = 1;
 801372c:	4b53      	ldr	r3, [pc, #332]	; (801387c <fm_menu_config_pass+0x2b8>)
 801372e:	2201      	movs	r2, #1
 8013730:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013732:	4b53      	ldr	r3, [pc, #332]	; (8013880 <fm_menu_config_pass+0x2bc>)
 8013734:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013736:	2301      	movs	r3, #1
 8013738:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801373a:	f107 0313 	add.w	r3, r7, #19
 801373e:	2200      	movs	r2, #0
 8013740:	4619      	mov	r1, r3
 8013742:	484d      	ldr	r0, [pc, #308]	; (8013878 <fm_menu_config_pass+0x2b4>)
 8013744:	f7fa fd8c 	bl	800e260 <_txe_queue_send>
        break;
 8013748:	e029      	b.n	801379e <fm_menu_config_pass+0x1da>
        case EVENT_KEY_ESC:
            password[password_index] = 4; // @suppress("Avoid magic numbers")
 801374a:	4b49      	ldr	r3, [pc, #292]	; (8013870 <fm_menu_config_pass+0x2ac>)
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	461a      	mov	r2, r3
 8013750:	4b48      	ldr	r3, [pc, #288]	; (8013874 <fm_menu_config_pass+0x2b0>)
 8013752:	2104      	movs	r1, #4
 8013754:	5499      	strb	r1, [r3, r2]

            if (password_index < PASSWORD_LENGTH - 1)
 8013756:	4b46      	ldr	r3, [pc, #280]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	2b02      	cmp	r3, #2
 801375c:	d80f      	bhi.n	801377e <fm_menu_config_pass+0x1ba>
            {
                event_now = EVENT_LCD_REFRESH;
 801375e:	2301      	movs	r3, #1
 8013760:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013762:	f107 0313 	add.w	r3, r7, #19
 8013766:	2200      	movs	r2, #0
 8013768:	4619      	mov	r1, r3
 801376a:	4843      	ldr	r0, [pc, #268]	; (8013878 <fm_menu_config_pass+0x2b4>)
 801376c:	f7fa fd78 	bl	800e260 <_txe_queue_send>
                password_index++;
 8013770:	4b3f      	ldr	r3, [pc, #252]	; (8013870 <fm_menu_config_pass+0x2ac>)
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	3301      	adds	r3, #1
 8013776:	b2da      	uxtb	r2, r3
 8013778:	4b3d      	ldr	r3, [pc, #244]	; (8013870 <fm_menu_config_pass+0x2ac>)
 801377a:	701a      	strb	r2, [r3, #0]
                new_exit = 1;
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
            }
        break;
 801377c:	e00f      	b.n	801379e <fm_menu_config_pass+0x1da>
                new_exit = 1;
 801377e:	4b3f      	ldr	r3, [pc, #252]	; (801387c <fm_menu_config_pass+0x2b8>)
 8013780:	2201      	movs	r2, #1
 8013782:	701a      	strb	r2, [r3, #0]
                ret_menu = (ptr_ret_menu_t) fm_menu_config_k_param;
 8013784:	4b3e      	ldr	r3, [pc, #248]	; (8013880 <fm_menu_config_pass+0x2bc>)
 8013786:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 8013788:	2301      	movs	r3, #1
 801378a:	74fb      	strb	r3, [r7, #19]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801378c:	f107 0313 	add.w	r3, r7, #19
 8013790:	2200      	movs	r2, #0
 8013792:	4619      	mov	r1, r3
 8013794:	4838      	ldr	r0, [pc, #224]	; (8013878 <fm_menu_config_pass+0x2b4>)
 8013796:	f7fa fd63 	bl	800e260 <_txe_queue_send>
        break;
 801379a:	e000      	b.n	801379e <fm_menu_config_pass+0x1da>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 801379c:	bf00      	nop
    }

    previous_event = event_id;
 801379e:	4a39      	ldr	r2, [pc, #228]	; (8013884 <fm_menu_config_pass+0x2c0>)
 80137a0:	79fb      	ldrb	r3, [r7, #7]
 80137a2:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Password\n";
 80137a4:	4a38      	ldr	r2, [pc, #224]	; (8013888 <fm_menu_config_pass+0x2c4>)
 80137a6:	f107 0308 	add.w	r3, r7, #8
 80137aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80137ac:	c303      	stmia	r3!, {r0, r1}
 80137ae:	801a      	strh	r2, [r3, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80137b0:	f107 0308 	add.w	r3, r7, #8
 80137b4:	210a      	movs	r1, #10
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fb f98e 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1 && password_index >= PASSWORD_LENGTH - 1)
 80137bc:	4b2f      	ldr	r3, [pc, #188]	; (801387c <fm_menu_config_pass+0x2b8>)
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d147      	bne.n	8013854 <fm_menu_config_pass+0x290>
 80137c4:	4b2a      	ldr	r3, [pc, #168]	; (8013870 <fm_menu_config_pass+0x2ac>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	2b02      	cmp	r3, #2
 80137ca:	d943      	bls.n	8013854 <fm_menu_config_pass+0x290>
    {
        /*
         * Si la contraseña ingresada es correcta, se activa una flag global que
         * permite modificar los parámetros de los menús de configuración.
         */
        if (password[0] == 2 && password[1] == 1 && password[2] == 1
 80137cc:	4b29      	ldr	r3, [pc, #164]	; (8013874 <fm_menu_config_pass+0x2b0>)
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	2b02      	cmp	r3, #2
 80137d2:	d10e      	bne.n	80137f2 <fm_menu_config_pass+0x22e>
 80137d4:	4b27      	ldr	r3, [pc, #156]	; (8013874 <fm_menu_config_pass+0x2b0>)
 80137d6:	785b      	ldrb	r3, [r3, #1]
 80137d8:	2b01      	cmp	r3, #1
 80137da:	d10a      	bne.n	80137f2 <fm_menu_config_pass+0x22e>
 80137dc:	4b25      	ldr	r3, [pc, #148]	; (8013874 <fm_menu_config_pass+0x2b0>)
 80137de:	789b      	ldrb	r3, [r3, #2]
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	d106      	bne.n	80137f2 <fm_menu_config_pass+0x22e>
        && password[PASSWORD_LENGTH - 1] == 3)
 80137e4:	4b23      	ldr	r3, [pc, #140]	; (8013874 <fm_menu_config_pass+0x2b0>)
 80137e6:	78db      	ldrb	r3, [r3, #3]
 80137e8:	2b03      	cmp	r3, #3
 80137ea:	d102      	bne.n	80137f2 <fm_menu_config_pass+0x22e>
        {
            correct_password = 1;
 80137ec:	4b1f      	ldr	r3, [pc, #124]	; (801386c <fm_menu_config_pass+0x2a8>)
 80137ee:	2201      	movs	r2, #1
 80137f0:	701a      	strb	r2, [r3, #0]
        }
        fm_factory_modify_date(fm_calendar_get_day(),
 80137f2:	f7fb f907 	bl	800ea04 <fm_calendar_get_day>
 80137f6:	4604      	mov	r4, r0
 80137f8:	f7fb f90e 	bl	800ea18 <fm_calendar_get_month>
 80137fc:	4605      	mov	r5, r0
 80137fe:	f7fb f915 	bl	800ea2c <fm_calendar_get_year>
 8013802:	4603      	mov	r3, r0
 8013804:	461a      	mov	r2, r3
 8013806:	4629      	mov	r1, r5
 8013808:	4620      	mov	r0, r4
 801380a:	f7fb fb23 	bl	800ee54 <fm_factory_modify_date>
        fm_calendar_get_month(), fm_calendar_get_year());

        fm_factory_modify_time(fm_calendar_get_hour(),
 801380e:	f7fb f8db 	bl	800e9c8 <fm_calendar_get_hour>
 8013812:	4604      	mov	r4, r0
 8013814:	f7fb f8e2 	bl	800e9dc <fm_calendar_get_minute>
 8013818:	4605      	mov	r5, r0
 801381a:	f7fb f8e9 	bl	800e9f0 <fm_calendar_get_second>
 801381e:	4603      	mov	r3, r0
 8013820:	461a      	mov	r2, r3
 8013822:	4629      	mov	r1, r5
 8013824:	4620      	mov	r0, r4
 8013826:	f7fb fb41 	bl	800eeac <fm_factory_modify_time>
        fm_calendar_get_minute(), fm_calendar_get_second());
        /*
         * Reinicio el arreglo de la contraseña ingresada.
         */
        password_index = 0;
 801382a:	4b11      	ldr	r3, [pc, #68]	; (8013870 <fm_menu_config_pass+0x2ac>)
 801382c:	2200      	movs	r2, #0
 801382e:	701a      	strb	r2, [r3, #0]
        password[0] = 0;
 8013830:	4b10      	ldr	r3, [pc, #64]	; (8013874 <fm_menu_config_pass+0x2b0>)
 8013832:	2200      	movs	r2, #0
 8013834:	701a      	strb	r2, [r3, #0]
        password[1] = 0;
 8013836:	4b0f      	ldr	r3, [pc, #60]	; (8013874 <fm_menu_config_pass+0x2b0>)
 8013838:	2200      	movs	r2, #0
 801383a:	705a      	strb	r2, [r3, #1]
        password[2] = 0;
 801383c:	4b0d      	ldr	r3, [pc, #52]	; (8013874 <fm_menu_config_pass+0x2b0>)
 801383e:	2200      	movs	r2, #0
 8013840:	709a      	strb	r2, [r3, #2]
        password[PASSWORD_LENGTH - 1] = 0;
 8013842:	4b0c      	ldr	r3, [pc, #48]	; (8013874 <fm_menu_config_pass+0x2b0>)
 8013844:	2200      	movs	r2, #0
 8013846:	70da      	strb	r2, [r3, #3]
        new_entry = 1;
 8013848:	4b06      	ldr	r3, [pc, #24]	; (8013864 <fm_menu_config_pass+0x2a0>)
 801384a:	2201      	movs	r2, #1
 801384c:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 801384e:	4b0b      	ldr	r3, [pc, #44]	; (801387c <fm_menu_config_pass+0x2b8>)
 8013850:	2200      	movs	r2, #0
 8013852:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013854:	697b      	ldr	r3, [r7, #20]
}
 8013856:	4618      	mov	r0, r3
 8013858:	3718      	adds	r7, #24
 801385a:	46bd      	mov	sp, r7
 801385c:	bdb0      	pop	{r4, r5, r7, pc}
 801385e:	bf00      	nop
 8013860:	080135c5 	.word	0x080135c5
 8013864:	20000148 	.word	0x20000148
 8013868:	20001db8 	.word	0x20001db8
 801386c:	20001db6 	.word	0x20001db6
 8013870:	20001dcd 	.word	0x20001dcd
 8013874:	20001dd0 	.word	0x20001dd0
 8013878:	20001388 	.word	0x20001388
 801387c:	20001dd4 	.word	0x20001dd4
 8013880:	080133f1 	.word	0x080133f1
 8013884:	20001db7 	.word	0x20001db7
 8013888:	08015320 	.word	0x08015320

0801388c <fm_menu_config_units_tim>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_tim(fm_event_t event_id)
{
 801388c:	b5b0      	push	{r4, r5, r7, lr}
 801388e:	b0b8      	sub	sp, #224	; 0xe0
 8013890:	af00      	add	r7, sp, #0
 8013892:	4603      	mov	r3, r0
 8013894:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013896:	4b78      	ldr	r3, [pc, #480]	; (8013a78 <fm_menu_config_units_tim+0x1ec>)
 8013898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    fm_event_t event_now;

    if (new_entry == 1)
 801389c:	4b77      	ldr	r3, [pc, #476]	; (8013a7c <fm_menu_config_units_tim+0x1f0>)
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d104      	bne.n	80138ae <fm_menu_config_units_tim+0x22>
    {
        fm_lcd_clear();
 80138a4:	f7fb ffa3 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 80138a8:	4b74      	ldr	r3, [pc, #464]	; (8013a7c <fm_menu_config_units_tim+0x1f0>)
 80138aa:	2200      	movs	r2, #0
 80138ac:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_tim(event_id);
 80138ae:	79fb      	ldrb	r3, [r7, #7]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7fc fb9f 	bl	800fff4 <fm_lcd_units_tim>
    fm_lcd_refresh();
 80138b6:	f7fc fb2c 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 80138ba:	79fb      	ldrb	r3, [r7, #7]
 80138bc:	3b01      	subs	r3, #1
 80138be:	2b04      	cmp	r3, #4
 80138c0:	f200 80b4 	bhi.w	8013a2c <fm_menu_config_units_tim+0x1a0>
 80138c4:	a201      	add	r2, pc, #4	; (adr r2, 80138cc <fm_menu_config_units_tim+0x40>)
 80138c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ca:	bf00      	nop
 80138cc:	08013a2d 	.word	0x08013a2d
 80138d0:	080138e1 	.word	0x080138e1
 80138d4:	08013969 	.word	0x08013969
 80138d8:	0801397f 	.word	0x0801397f
 80138dc:	08013a0b 	.word	0x08013a0b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 80138e0:	4b67      	ldr	r3, [pc, #412]	; (8013a80 <fm_menu_config_units_tim+0x1f4>)
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d034      	beq.n	8013952 <fm_menu_config_units_tim+0xc6>
            {
                if (fm_factory_get_rate().unit_time == H)
 80138e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7fb f93b 	bl	800eb68 <fm_factory_get_rate>
 80138f2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d103      	bne.n	8013902 <fm_menu_config_units_tim+0x76>
                {
                    fm_factory_modify_time_units(D);
 80138fa:	2001      	movs	r0, #1
 80138fc:	f7fb fd8c 	bl	800f418 <fm_factory_modify_time_units>
 8013900:	e025      	b.n	801394e <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == D)
 8013902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013906:	4618      	mov	r0, r3
 8013908:	f7fb f92e 	bl	800eb68 <fm_factory_get_rate>
 801390c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8013910:	2b01      	cmp	r3, #1
 8013912:	d103      	bne.n	801391c <fm_menu_config_units_tim+0x90>
                {
                    fm_factory_modify_time_units(S);
 8013914:	2002      	movs	r0, #2
 8013916:	f7fb fd7f 	bl	800f418 <fm_factory_modify_time_units>
 801391a:	e018      	b.n	801394e <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == S)
 801391c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013920:	4618      	mov	r0, r3
 8013922:	f7fb f921 	bl	800eb68 <fm_factory_get_rate>
 8013926:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801392a:	2b02      	cmp	r3, #2
 801392c:	d103      	bne.n	8013936 <fm_menu_config_units_tim+0xaa>
                {
                    fm_factory_modify_time_units(M);
 801392e:	2003      	movs	r0, #3
 8013930:	f7fb fd72 	bl	800f418 <fm_factory_modify_time_units>
 8013934:	e00b      	b.n	801394e <fm_menu_config_units_tim+0xc2>
                }
                else if (fm_factory_get_rate().unit_time == M)
 8013936:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801393a:	4618      	mov	r0, r3
 801393c:	f7fb f914 	bl	800eb68 <fm_factory_get_rate>
 8013940:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8013944:	2b03      	cmp	r3, #3
 8013946:	d102      	bne.n	801394e <fm_menu_config_units_tim+0xc2>
                {
                    fm_factory_modify_time_units(H);
 8013948:	2000      	movs	r0, #0
 801394a:	f7fb fd65 	bl	800f418 <fm_factory_modify_time_units>
                }
                fm_lcd_clear();
 801394e:	f7fb ff4e 	bl	800f7ee <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013952:	2301      	movs	r3, #1
 8013954:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013958:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801395c:	2200      	movs	r2, #0
 801395e:	4619      	mov	r1, r3
 8013960:	4848      	ldr	r0, [pc, #288]	; (8013a84 <fm_menu_config_units_tim+0x1f8>)
 8013962:	f7fa fc7d 	bl	800e260 <_txe_queue_send>
        break;
 8013966:	e062      	b.n	8013a2e <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 8013968:	2301      	movs	r3, #1
 801396a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801396e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013972:	2200      	movs	r2, #0
 8013974:	4619      	mov	r1, r3
 8013976:	4843      	ldr	r0, [pc, #268]	; (8013a84 <fm_menu_config_units_tim+0x1f8>)
 8013978:	f7fa fc72 	bl	800e260 <_txe_queue_send>
        break;
 801397c:	e057      	b.n	8013a2e <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_ENTER:
            if (correct_password)
 801397e:	4b40      	ldr	r3, [pc, #256]	; (8013a80 <fm_menu_config_units_tim+0x1f4>)
 8013980:	781b      	ldrb	r3, [r3, #0]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d036      	beq.n	80139f4 <fm_menu_config_units_tim+0x168>
            {
                if (fm_factory_get_units_tim().res == RES_0)
 8013986:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801398a:	4618      	mov	r0, r3
 801398c:	f7fb f914 	bl	800ebb8 <fm_factory_get_units_tim>
 8013990:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d104      	bne.n	80139a2 <fm_menu_config_units_tim+0x116>
                {
                    fm_factory_modify_res_rate(RES_1, RES_1);
 8013998:	2101      	movs	r1, #1
 801399a:	2001      	movs	r0, #1
 801399c:	f7fb fd24 	bl	800f3e8 <fm_factory_modify_res_rate>
 80139a0:	e028      	b.n	80139f4 <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_1)
 80139a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fb f906 	bl	800ebb8 <fm_factory_get_units_tim>
 80139ac:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d104      	bne.n	80139be <fm_menu_config_units_tim+0x132>
                {
                    fm_factory_modify_res_rate(RES_2, RES_2);
 80139b4:	2102      	movs	r1, #2
 80139b6:	2002      	movs	r0, #2
 80139b8:	f7fb fd16 	bl	800f3e8 <fm_factory_modify_res_rate>
 80139bc:	e01a      	b.n	80139f4 <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_2)
 80139be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7fb f8f8 	bl	800ebb8 <fm_factory_get_units_tim>
 80139c8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 80139cc:	2b02      	cmp	r3, #2
 80139ce:	d104      	bne.n	80139da <fm_menu_config_units_tim+0x14e>
                {
                    fm_factory_modify_res_rate(RES_3, RES_3);
 80139d0:	2103      	movs	r1, #3
 80139d2:	2003      	movs	r0, #3
 80139d4:	f7fb fd08 	bl	800f3e8 <fm_factory_modify_res_rate>
 80139d8:	e00c      	b.n	80139f4 <fm_menu_config_units_tim+0x168>
                }
                else if (fm_factory_get_units_tim().res == RES_3)
 80139da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fb f8ea 	bl	800ebb8 <fm_factory_get_units_tim>
 80139e4:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80139e8:	2b03      	cmp	r3, #3
 80139ea:	d103      	bne.n	80139f4 <fm_menu_config_units_tim+0x168>
                {
                    fm_factory_modify_res_rate(RES_0, RES_0);
 80139ec:	2100      	movs	r1, #0
 80139ee:	2000      	movs	r0, #0
 80139f0:	f7fb fcfa 	bl	800f3e8 <fm_factory_modify_res_rate>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 80139f4:	2301      	movs	r3, #1
 80139f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80139fa:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80139fe:	2200      	movs	r2, #0
 8013a00:	4619      	mov	r1, r3
 8013a02:	4820      	ldr	r0, [pc, #128]	; (8013a84 <fm_menu_config_units_tim+0x1f8>)
 8013a04:	f7fa fc2c 	bl	800e260 <_txe_queue_send>
        break;
 8013a08:	e011      	b.n	8013a2e <fm_menu_config_units_tim+0x1a2>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013a0a:	4b1f      	ldr	r3, [pc, #124]	; (8013a88 <fm_menu_config_units_tim+0x1fc>)
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_date_hour;
 8013a10:	4b1e      	ldr	r3, [pc, #120]	; (8013a8c <fm_menu_config_units_tim+0x200>)
 8013a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            event_now = EVENT_LCD_REFRESH;
 8013a16:	2301      	movs	r3, #1
 8013a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013a1c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013a20:	2200      	movs	r2, #0
 8013a22:	4619      	mov	r1, r3
 8013a24:	4817      	ldr	r0, [pc, #92]	; (8013a84 <fm_menu_config_units_tim+0x1f8>)
 8013a26:	f7fa fc1b 	bl	800e260 <_txe_queue_send>
        break;
 8013a2a:	e000      	b.n	8013a2e <fm_menu_config_units_tim+0x1a2>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013a2c:	bf00      	nop
    }

    previous_event = event_id;
 8013a2e:	4a18      	ldr	r2, [pc, #96]	; (8013a90 <fm_menu_config_units_tim+0x204>)
 8013a30:	79fb      	ldrb	r3, [r7, #7]
 8013a32:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de tiempo y resolucion\n";
 8013a34:	4b17      	ldr	r3, [pc, #92]	; (8013a94 <fm_menu_config_units_tim+0x208>)
 8013a36:	f107 0408 	add.w	r4, r7, #8
 8013a3a:	461d      	mov	r5, r3
 8013a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013a4c:	f107 0308 	add.w	r3, r7, #8
 8013a50:	212c      	movs	r1, #44	; 0x2c
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fb f840 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013a58:	4b0b      	ldr	r3, [pc, #44]	; (8013a88 <fm_menu_config_units_tim+0x1fc>)
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	d105      	bne.n	8013a6c <fm_menu_config_units_tim+0x1e0>
    {
        new_entry = 1;
 8013a60:	4b06      	ldr	r3, [pc, #24]	; (8013a7c <fm_menu_config_units_tim+0x1f0>)
 8013a62:	2201      	movs	r2, #1
 8013a64:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013a66:	4b08      	ldr	r3, [pc, #32]	; (8013a88 <fm_menu_config_units_tim+0x1fc>)
 8013a68:	2200      	movs	r2, #0
 8013a6a:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	37e0      	adds	r7, #224	; 0xe0
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bdb0      	pop	{r4, r5, r7, pc}
 8013a78:	0801388d 	.word	0x0801388d
 8013a7c:	20000149 	.word	0x20000149
 8013a80:	20001db6 	.word	0x20001db6
 8013a84:	20001388 	.word	0x20001388
 8013a88:	20001dd5 	.word	0x20001dd5
 8013a8c:	08012369 	.word	0x08012369
 8013a90:	20001db7 	.word	0x20001db7
 8013a94:	08015340 	.word	0x08015340

08013a98 <fm_menu_config_units_vol>:
 * volumen y tiempo, como de la resolución de las medidas.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_config_units_vol(fm_event_t event_id)
{
 8013a98:	b5b0      	push	{r4, r5, r7, lr}
 8013a9a:	b0c8      	sub	sp, #288	; 0x120
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013aa4:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013aa8:	701a      	strb	r2, [r3, #0]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_config_units_vol;
 8013aaa:	4b8f      	ldr	r3, [pc, #572]	; (8013ce8 <fm_menu_config_units_vol+0x250>)
 8013aac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    fm_event_t event_now;

    if (new_entry == 1)
 8013ab0:	4b8e      	ldr	r3, [pc, #568]	; (8013cec <fm_menu_config_units_vol+0x254>)
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d104      	bne.n	8013ac2 <fm_menu_config_units_vol+0x2a>
    {
        fm_lcd_clear();
 8013ab8:	f7fb fe99 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8013abc:	4b8b      	ldr	r3, [pc, #556]	; (8013cec <fm_menu_config_units_vol+0x254>)
 8013abe:	2200      	movs	r2, #0
 8013ac0:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_units_vol(event_id);
 8013ac2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013ac6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7fc fb2d 	bl	801012c <fm_lcd_units_vol>
    fm_lcd_refresh();
 8013ad2:	f7fc fa1e 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8013ad6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013ada:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	3b01      	subs	r3, #1
 8013ae2:	2b04      	cmp	r3, #4
 8013ae4:	f200 80d2 	bhi.w	8013c8c <fm_menu_config_units_vol+0x1f4>
 8013ae8:	a201      	add	r2, pc, #4	; (adr r2, 8013af0 <fm_menu_config_units_vol+0x58>)
 8013aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aee:	bf00      	nop
 8013af0:	08013c8d 	.word	0x08013c8d
 8013af4:	08013b05 	.word	0x08013b05
 8013af8:	08013bc1 	.word	0x08013bc1
 8013afc:	08013bd7 	.word	0x08013bd7
 8013b00:	08013c6b 	.word	0x08013c6b
    {
        case EVENT_KEY_UP:
            if (correct_password)
 8013b04:	4b7a      	ldr	r3, [pc, #488]	; (8013cf0 <fm_menu_config_units_vol+0x258>)
 8013b06:	781b      	ldrb	r3, [r3, #0]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d04e      	beq.n	8013baa <fm_menu_config_units_vol+0x112>
            {
                if (fm_factory_get_acm().unit_volume == LT)
 8013b0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7fa fffd 	bl	800eb10 <fm_factory_get_acm>
 8013b16:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d103      	bne.n	8013b26 <fm_menu_config_units_vol+0x8e>
                {
                    fm_factory_modify_volume_units(M3);
 8013b1e:	2001      	movs	r0, #1
 8013b20:	f7fb fc94 	bl	800f44c <fm_factory_modify_volume_units>
 8013b24:	e03f      	b.n	8013ba6 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == M3)
 8013b26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fa fff0 	bl	800eb10 <fm_factory_get_acm>
 8013b30:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d103      	bne.n	8013b40 <fm_menu_config_units_vol+0xa8>
                {
                    fm_factory_modify_volume_units(KG);
 8013b38:	2002      	movs	r0, #2
 8013b3a:	f7fb fc87 	bl	800f44c <fm_factory_modify_volume_units>
 8013b3e:	e032      	b.n	8013ba6 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == KG)
 8013b40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fa ffe3 	bl	800eb10 <fm_factory_get_acm>
 8013b4a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8013b4e:	2b02      	cmp	r3, #2
 8013b50:	d103      	bne.n	8013b5a <fm_menu_config_units_vol+0xc2>
                {
                    fm_factory_modify_volume_units(GL);
 8013b52:	2003      	movs	r0, #3
 8013b54:	f7fb fc7a 	bl	800f44c <fm_factory_modify_volume_units>
 8013b58:	e025      	b.n	8013ba6 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == GL)
 8013b5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7fa ffd6 	bl	800eb10 <fm_factory_get_acm>
 8013b64:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8013b68:	2b03      	cmp	r3, #3
 8013b6a:	d103      	bne.n	8013b74 <fm_menu_config_units_vol+0xdc>
                {
                    fm_factory_modify_volume_units(BR);
 8013b6c:	2004      	movs	r0, #4
 8013b6e:	f7fb fc6d 	bl	800f44c <fm_factory_modify_volume_units>
 8013b72:	e018      	b.n	8013ba6 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == BR)
 8013b74:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fa ffc9 	bl	800eb10 <fm_factory_get_acm>
 8013b7e:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8013b82:	2b04      	cmp	r3, #4
 8013b84:	d103      	bne.n	8013b8e <fm_menu_config_units_vol+0xf6>
                {
                    fm_factory_modify_volume_units(NOTHING);
 8013b86:	2006      	movs	r0, #6
 8013b88:	f7fb fc60 	bl	800f44c <fm_factory_modify_volume_units>
 8013b8c:	e00b      	b.n	8013ba6 <fm_menu_config_units_vol+0x10e>
                }
                else if (fm_factory_get_acm().unit_volume == NOTHING)
 8013b8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7fa ffbc 	bl	800eb10 <fm_factory_get_acm>
 8013b98:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8013b9c:	2b06      	cmp	r3, #6
 8013b9e:	d102      	bne.n	8013ba6 <fm_menu_config_units_vol+0x10e>
                {
                    fm_factory_modify_volume_units(LT);
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	f7fb fc53 	bl	800f44c <fm_factory_modify_volume_units>
                }
                fm_lcd_clear();
 8013ba6:	f7fb fe22 	bl	800f7ee <fm_lcd_clear>
            }
            event_now = EVENT_LCD_REFRESH;
 8013baa:	2301      	movs	r3, #1
 8013bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013bb0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	484e      	ldr	r0, [pc, #312]	; (8013cf4 <fm_menu_config_units_vol+0x25c>)
 8013bba:	f7fa fb51 	bl	800e260 <_txe_queue_send>
        break;
 8013bbe:	e066      	b.n	8013c8e <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_DOWN:
            event_now = EVENT_LCD_REFRESH;
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013bc6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013bca:	2200      	movs	r2, #0
 8013bcc:	4619      	mov	r1, r3
 8013bce:	4849      	ldr	r0, [pc, #292]	; (8013cf4 <fm_menu_config_units_vol+0x25c>)
 8013bd0:	f7fa fb46 	bl	800e260 <_txe_queue_send>
        break;
 8013bd4:	e05b      	b.n	8013c8e <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_ENTER:
            if (correct_password)
 8013bd6:	4b46      	ldr	r3, [pc, #280]	; (8013cf0 <fm_menu_config_units_vol+0x258>)
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d03a      	beq.n	8013c54 <fm_menu_config_units_vol+0x1bc>
            {
                if (fm_factory_get_units_vol().res == RES_0)
 8013bde:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fa fffa 	bl	800ebdc <fm_factory_get_units_vol>
 8013be8:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d105      	bne.n	8013bfc <fm_menu_config_units_vol+0x164>
                {
                    fm_factory_modify_res_acm_ttl(RES_1, RES_1, RES_1);
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	2101      	movs	r1, #1
 8013bf4:	2001      	movs	r0, #1
 8013bf6:	f7fb fbd9 	bl	800f3ac <fm_factory_modify_res_acm_ttl>
 8013bfa:	e02b      	b.n	8013c54 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_1)
 8013bfc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fa ffeb 	bl	800ebdc <fm_factory_get_units_vol>
 8013c06:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	d105      	bne.n	8013c1a <fm_menu_config_units_vol+0x182>
                {
                    fm_factory_modify_res_acm_ttl(RES_2, RES_2, RES_2);
 8013c0e:	2202      	movs	r2, #2
 8013c10:	2102      	movs	r1, #2
 8013c12:	2002      	movs	r0, #2
 8013c14:	f7fb fbca 	bl	800f3ac <fm_factory_modify_res_acm_ttl>
 8013c18:	e01c      	b.n	8013c54 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_2)
 8013c1a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fa ffdc 	bl	800ebdc <fm_factory_get_units_vol>
 8013c24:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d105      	bne.n	8013c38 <fm_menu_config_units_vol+0x1a0>
                {
                    fm_factory_modify_res_acm_ttl(RES_3, RES_3, RES_3);
 8013c2c:	2203      	movs	r2, #3
 8013c2e:	2103      	movs	r1, #3
 8013c30:	2003      	movs	r0, #3
 8013c32:	f7fb fbbb 	bl	800f3ac <fm_factory_modify_res_acm_ttl>
 8013c36:	e00d      	b.n	8013c54 <fm_menu_config_units_vol+0x1bc>
                }
                else if (fm_factory_get_units_vol().res == RES_3)
 8013c38:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fa ffcd 	bl	800ebdc <fm_factory_get_units_vol>
 8013c42:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8013c46:	2b03      	cmp	r3, #3
 8013c48:	d104      	bne.n	8013c54 <fm_menu_config_units_vol+0x1bc>
                {
                    fm_factory_modify_res_acm_ttl(RES_0, RES_0, RES_0);
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	2100      	movs	r1, #0
 8013c4e:	2000      	movs	r0, #0
 8013c50:	f7fb fbac 	bl	800f3ac <fm_factory_modify_res_acm_ttl>
                }
            }
            event_now = EVENT_LCD_REFRESH;
 8013c54:	2301      	movs	r3, #1
 8013c56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c5a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013c5e:	2200      	movs	r2, #0
 8013c60:	4619      	mov	r1, r3
 8013c62:	4824      	ldr	r0, [pc, #144]	; (8013cf4 <fm_menu_config_units_vol+0x25c>)
 8013c64:	f7fa fafc 	bl	800e260 <_txe_queue_send>
        break;
 8013c68:	e011      	b.n	8013c8e <fm_menu_config_units_vol+0x1f6>
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013c6a:	4b23      	ldr	r3, [pc, #140]	; (8013cf8 <fm_menu_config_units_vol+0x260>)
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_units_tim;
 8013c70:	4b22      	ldr	r3, [pc, #136]	; (8013cfc <fm_menu_config_units_vol+0x264>)
 8013c72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            event_now = EVENT_LCD_REFRESH;
 8013c76:	2301      	movs	r3, #1
 8013c78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013c7c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8013c80:	2200      	movs	r2, #0
 8013c82:	4619      	mov	r1, r3
 8013c84:	481b      	ldr	r0, [pc, #108]	; (8013cf4 <fm_menu_config_units_vol+0x25c>)
 8013c86:	f7fa faeb 	bl	800e260 <_txe_queue_send>
        break;
 8013c8a:	e000      	b.n	8013c8e <fm_menu_config_units_vol+0x1f6>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013c8c:	bf00      	nop
    }

    previous_event = event_id;
 8013c8e:	4a1c      	ldr	r2, [pc, #112]	; (8013d00 <fm_menu_config_units_vol+0x268>)
 8013c90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013c94:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8013c98:	781b      	ldrb	r3, [r3, #0]
 8013c9a:	7013      	strb	r3, [r2, #0]
    #ifdef FM_DEBUG_MENU
        char msg_buffer[] = "Configurar unidades de volumen y resolucion\n";
 8013c9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013ca0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013ca4:	4a17      	ldr	r2, [pc, #92]	; (8013d04 <fm_menu_config_units_vol+0x26c>)
 8013ca6:	461c      	mov	r4, r3
 8013ca8:	4615      	mov	r5, r2
 8013caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013cb6:	c407      	stmia	r4!, {r0, r1, r2}
 8013cb8:	7023      	strb	r3, [r4, #0]
        fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013cba:	f107 0308 	add.w	r3, r7, #8
 8013cbe:	212d      	movs	r1, #45	; 0x2d
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fa ff09 	bl	800ead8 <fm_debug_msg_uart>
    #endif

    if (new_exit == 1)
 8013cc6:	4b0c      	ldr	r3, [pc, #48]	; (8013cf8 <fm_menu_config_units_vol+0x260>)
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d105      	bne.n	8013cda <fm_menu_config_units_vol+0x242>
    {
        new_entry = 1;
 8013cce:	4b07      	ldr	r3, [pc, #28]	; (8013cec <fm_menu_config_units_vol+0x254>)
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013cd4:	4b08      	ldr	r3, [pc, #32]	; (8013cf8 <fm_menu_config_units_vol+0x260>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce8:	08013a99 	.word	0x08013a99
 8013cec:	2000014a 	.word	0x2000014a
 8013cf0:	20001db6 	.word	0x20001db6
 8013cf4:	20001388 	.word	0x20001388
 8013cf8:	20001dd6 	.word	0x20001dd6
 8013cfc:	0801388d 	.word	0x0801388d
 8013d00:	20001db7 	.word	0x20001db7
 8013d04:	0801536c 	.word	0x0801536c

08013d08 <fm_menu_show_acm_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_rate(fm_event_t event_id)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b086      	sub	sp, #24
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	4603      	mov	r3, r0
 8013d10:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8013d12:	4b35      	ldr	r3, [pc, #212]	; (8013de8 <fm_menu_show_acm_rate+0xe0>)
 8013d14:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013d16:	4b35      	ldr	r3, [pc, #212]	; (8013dec <fm_menu_show_acm_rate+0xe4>)
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	2b01      	cmp	r3, #1
 8013d1c:	d104      	bne.n	8013d28 <fm_menu_show_acm_rate+0x20>
    {
        fm_lcd_clear();
 8013d1e:	f7fb fd66 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8013d22:	4b32      	ldr	r3, [pc, #200]	; (8013dec <fm_menu_show_acm_rate+0xe4>)
 8013d24:	2200      	movs	r2, #0
 8013d26:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_rate();
 8013d28:	f7fb fc9e 	bl	800f668 <fm_lcd_acm_rate>
    fm_lcd_refresh();
 8013d2c:	f7fc f8f1 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8013d30:	79fb      	ldrb	r3, [r7, #7]
 8013d32:	3b01      	subs	r3, #1
 8013d34:	2b04      	cmp	r3, #4
 8013d36:	d83a      	bhi.n	8013dae <fm_menu_show_acm_rate+0xa6>
 8013d38:	a201      	add	r2, pc, #4	; (adr r2, 8013d40 <fm_menu_show_acm_rate+0x38>)
 8013d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d3e:	bf00      	nop
 8013d40:	08013daf 	.word	0x08013daf
 8013d44:	08013d55 	.word	0x08013d55
 8013d48:	08013d73 	.word	0x08013d73
 8013d4c:	08013daf 	.word	0x08013daf
 8013d50:	08013d91 	.word	0x08013d91
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8013d54:	4b26      	ldr	r3, [pc, #152]	; (8013df0 <fm_menu_show_acm_rate+0xe8>)
 8013d56:	2201      	movs	r2, #1
 8013d58:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8013d5a:	4b26      	ldr	r3, [pc, #152]	; (8013df4 <fm_menu_show_acm_rate+0xec>)
 8013d5c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d62:	f107 0313 	add.w	r3, r7, #19
 8013d66:	2200      	movs	r2, #0
 8013d68:	4619      	mov	r1, r3
 8013d6a:	4823      	ldr	r0, [pc, #140]	; (8013df8 <fm_menu_show_acm_rate+0xf0>)
 8013d6c:	f7fa fa78 	bl	800e260 <_txe_queue_send>
        break;
 8013d70:	e01e      	b.n	8013db0 <fm_menu_show_acm_rate+0xa8>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8013d72:	4b1f      	ldr	r3, [pc, #124]	; (8013df0 <fm_menu_show_acm_rate+0xe8>)
 8013d74:	2201      	movs	r2, #1
 8013d76:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8013d78:	4b20      	ldr	r3, [pc, #128]	; (8013dfc <fm_menu_show_acm_rate+0xf4>)
 8013d7a:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d80:	f107 0313 	add.w	r3, r7, #19
 8013d84:	2200      	movs	r2, #0
 8013d86:	4619      	mov	r1, r3
 8013d88:	481b      	ldr	r0, [pc, #108]	; (8013df8 <fm_menu_show_acm_rate+0xf0>)
 8013d8a:	f7fa fa69 	bl	800e260 <_txe_queue_send>
        break;
 8013d8e:	e00f      	b.n	8013db0 <fm_menu_show_acm_rate+0xa8>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013d90:	4b17      	ldr	r3, [pc, #92]	; (8013df0 <fm_menu_show_acm_rate+0xe8>)
 8013d92:	2201      	movs	r2, #1
 8013d94:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013d96:	4b1a      	ldr	r3, [pc, #104]	; (8013e00 <fm_menu_show_acm_rate+0xf8>)
 8013d98:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013d9e:	f107 0313 	add.w	r3, r7, #19
 8013da2:	2200      	movs	r2, #0
 8013da4:	4619      	mov	r1, r3
 8013da6:	4814      	ldr	r0, [pc, #80]	; (8013df8 <fm_menu_show_acm_rate+0xf0>)
 8013da8:	f7fa fa5a 	bl	800e260 <_txe_queue_send>
        break;
 8013dac:	e000      	b.n	8013db0 <fm_menu_show_acm_rate+0xa8>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013dae:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_rate\n";
 8013db0:	4a14      	ldr	r2, [pc, #80]	; (8013e04 <fm_menu_show_acm_rate+0xfc>)
 8013db2:	f107 0308 	add.w	r3, r7, #8
 8013db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8013db8:	c303      	stmia	r3!, {r0, r1}
 8013dba:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013dbc:	f107 0308 	add.w	r3, r7, #8
 8013dc0:	210a      	movs	r1, #10
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fa fe88 	bl	800ead8 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013dc8:	4b09      	ldr	r3, [pc, #36]	; (8013df0 <fm_menu_show_acm_rate+0xe8>)
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	2b01      	cmp	r3, #1
 8013dce:	d105      	bne.n	8013ddc <fm_menu_show_acm_rate+0xd4>
    {
        new_entry = 1;
 8013dd0:	4b06      	ldr	r3, [pc, #24]	; (8013dec <fm_menu_show_acm_rate+0xe4>)
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013dd6:	4b06      	ldr	r3, [pc, #24]	; (8013df0 <fm_menu_show_acm_rate+0xe8>)
 8013dd8:	2200      	movs	r2, #0
 8013dda:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013ddc:	697b      	ldr	r3, [r7, #20]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3718      	adds	r7, #24
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	08013d09 	.word	0x08013d09
 8013dec:	2000014b 	.word	0x2000014b
 8013df0:	20001dd7 	.word	0x20001dd7
 8013df4:	0801411d 	.word	0x0801411d
 8013df8:	20001388 	.word	0x20001388
 8013dfc:	08013e09 	.word	0x08013e09
 8013e00:	080135c5 	.word	0x080135c5
 8013e04:	0801539c 	.word	0x0801539c

08013e08 <fm_menu_show_acm_temp>:
 * la pantalla.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_acm_temp(fm_event_t event_id)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b086      	sub	sp, #24
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	4603      	mov	r3, r0
 8013e10:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8013e12:	4b35      	ldr	r3, [pc, #212]	; (8013ee8 <fm_menu_show_acm_temp+0xe0>)
 8013e14:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013e16:	4b35      	ldr	r3, [pc, #212]	; (8013eec <fm_menu_show_acm_temp+0xe4>)
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	2b01      	cmp	r3, #1
 8013e1c:	d104      	bne.n	8013e28 <fm_menu_show_acm_temp+0x20>
    {
        fm_lcd_clear();
 8013e1e:	f7fb fce6 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8013e22:	4b32      	ldr	r3, [pc, #200]	; (8013eec <fm_menu_show_acm_temp+0xe4>)
 8013e24:	2200      	movs	r2, #0
 8013e26:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_acm_temp();
 8013e28:	f7fb fc89 	bl	800f73e <fm_lcd_acm_temp>
    fm_lcd_refresh();
 8013e2c:	f7fc f871 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8013e30:	79fb      	ldrb	r3, [r7, #7]
 8013e32:	3b01      	subs	r3, #1
 8013e34:	2b04      	cmp	r3, #4
 8013e36:	d83a      	bhi.n	8013eae <fm_menu_show_acm_temp+0xa6>
 8013e38:	a201      	add	r2, pc, #4	; (adr r2, 8013e40 <fm_menu_show_acm_temp+0x38>)
 8013e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e3e:	bf00      	nop
 8013e40:	08013eaf 	.word	0x08013eaf
 8013e44:	08013e55 	.word	0x08013e55
 8013e48:	08013e73 	.word	0x08013e73
 8013e4c:	08013eaf 	.word	0x08013eaf
 8013e50:	08013e91 	.word	0x08013e91
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8013e54:	4b26      	ldr	r3, [pc, #152]	; (8013ef0 <fm_menu_show_acm_temp+0xe8>)
 8013e56:	2201      	movs	r2, #1
 8013e58:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 8013e5a:	4b26      	ldr	r3, [pc, #152]	; (8013ef4 <fm_menu_show_acm_temp+0xec>)
 8013e5c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013e5e:	2301      	movs	r3, #1
 8013e60:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e62:	f107 0313 	add.w	r3, r7, #19
 8013e66:	2200      	movs	r2, #0
 8013e68:	4619      	mov	r1, r3
 8013e6a:	4823      	ldr	r0, [pc, #140]	; (8013ef8 <fm_menu_show_acm_temp+0xf0>)
 8013e6c:	f7fa f9f8 	bl	800e260 <_txe_queue_send>
        break;
 8013e70:	e01e      	b.n	8013eb0 <fm_menu_show_acm_temp+0xa8>
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8013e72:	4b1f      	ldr	r3, [pc, #124]	; (8013ef0 <fm_menu_show_acm_temp+0xe8>)
 8013e74:	2201      	movs	r2, #1
 8013e76:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8013e78:	4b20      	ldr	r3, [pc, #128]	; (8013efc <fm_menu_show_acm_temp+0xf4>)
 8013e7a:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e80:	f107 0313 	add.w	r3, r7, #19
 8013e84:	2200      	movs	r2, #0
 8013e86:	4619      	mov	r1, r3
 8013e88:	481b      	ldr	r0, [pc, #108]	; (8013ef8 <fm_menu_show_acm_temp+0xf0>)
 8013e8a:	f7fa f9e9 	bl	800e260 <_txe_queue_send>
        break;
 8013e8e:	e00f      	b.n	8013eb0 <fm_menu_show_acm_temp+0xa8>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013e90:	4b17      	ldr	r3, [pc, #92]	; (8013ef0 <fm_menu_show_acm_temp+0xe8>)
 8013e92:	2201      	movs	r2, #1
 8013e94:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013e96:	4b1a      	ldr	r3, [pc, #104]	; (8013f00 <fm_menu_show_acm_temp+0xf8>)
 8013e98:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013e9e:	f107 0313 	add.w	r3, r7, #19
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	4814      	ldr	r0, [pc, #80]	; (8013ef8 <fm_menu_show_acm_temp+0xf0>)
 8013ea8:	f7fa f9da 	bl	800e260 <_txe_queue_send>
        break;
 8013eac:	e000      	b.n	8013eb0 <fm_menu_show_acm_temp+0xa8>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013eae:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "acm_temp\n";
 8013eb0:	4a14      	ldr	r2, [pc, #80]	; (8013f04 <fm_menu_show_acm_temp+0xfc>)
 8013eb2:	f107 0308 	add.w	r3, r7, #8
 8013eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8013eb8:	c303      	stmia	r3!, {r0, r1}
 8013eba:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 8013ebc:	f107 0308 	add.w	r3, r7, #8
 8013ec0:	210a      	movs	r1, #10
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fa fe08 	bl	800ead8 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013ec8:	4b09      	ldr	r3, [pc, #36]	; (8013ef0 <fm_menu_show_acm_temp+0xe8>)
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d105      	bne.n	8013edc <fm_menu_show_acm_temp+0xd4>
    {
        new_entry = 1;
 8013ed0:	4b06      	ldr	r3, [pc, #24]	; (8013eec <fm_menu_show_acm_temp+0xe4>)
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013ed6:	4b06      	ldr	r3, [pc, #24]	; (8013ef0 <fm_menu_show_acm_temp+0xe8>)
 8013ed8:	2200      	movs	r2, #0
 8013eda:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013edc:	697b      	ldr	r3, [r7, #20]
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3718      	adds	r7, #24
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	08013e09 	.word	0x08013e09
 8013eec:	2000014c 	.word	0x2000014c
 8013ef0:	20001dd8 	.word	0x20001dd8
 8013ef4:	08013d09 	.word	0x08013d09
 8013ef8:	20001388 	.word	0x20001388
 8013efc:	08013f09 	.word	0x08013f09
 8013f00:	080135c5 	.word	0x080135c5
 8013f04:	080153a8 	.word	0x080153a8

08013f08 <fm_menu_show_date_hour>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_date_hour(fm_event_t event_id)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b086      	sub	sp, #24
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	4603      	mov	r3, r0
 8013f10:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_date_hour;
 8013f12:	4b31      	ldr	r3, [pc, #196]	; (8013fd8 <fm_menu_show_date_hour+0xd0>)
 8013f14:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8013f16:	4b31      	ldr	r3, [pc, #196]	; (8013fdc <fm_menu_show_date_hour+0xd4>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d104      	bne.n	8013f28 <fm_menu_show_date_hour+0x20>
    {
        fm_lcd_clear();
 8013f1e:	f7fb fc66 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8013f22:	4b2e      	ldr	r3, [pc, #184]	; (8013fdc <fm_menu_show_date_hour+0xd4>)
 8013f24:	2200      	movs	r2, #0
 8013f26:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_date_hour(USER, event_id, DAY);
 8013f28:	79fb      	ldrb	r3, [r7, #7]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	2000      	movs	r0, #0
 8013f30:	f7fb fc64 	bl	800f7fc <fm_lcd_date_hour>

    fm_lcd_refresh();
 8013f34:	f7fb ffed 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8013f38:	79fb      	ldrb	r3, [r7, #7]
 8013f3a:	3b01      	subs	r3, #1
 8013f3c:	2b04      	cmp	r3, #4
 8013f3e:	d82b      	bhi.n	8013f98 <fm_menu_show_date_hour+0x90>
 8013f40:	a201      	add	r2, pc, #4	; (adr r2, 8013f48 <fm_menu_show_date_hour+0x40>)
 8013f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f46:	bf00      	nop
 8013f48:	08013f99 	.word	0x08013f99
 8013f4c:	08013f5d 	.word	0x08013f5d
 8013f50:	08013f99 	.word	0x08013f99
 8013f54:	08013f99 	.word	0x08013f99
 8013f58:	08013f7b 	.word	0x08013f7b
    {
        case EVENT_KEY_UP:
            new_exit = 1;
 8013f5c:	4b20      	ldr	r3, [pc, #128]	; (8013fe0 <fm_menu_show_date_hour+0xd8>)
 8013f5e:	2201      	movs	r2, #1
 8013f60:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_temp;
 8013f62:	4b20      	ldr	r3, [pc, #128]	; (8013fe4 <fm_menu_show_date_hour+0xdc>)
 8013f64:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013f66:	2301      	movs	r3, #1
 8013f68:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f6a:	f107 0313 	add.w	r3, r7, #19
 8013f6e:	2200      	movs	r2, #0
 8013f70:	4619      	mov	r1, r3
 8013f72:	481d      	ldr	r0, [pc, #116]	; (8013fe8 <fm_menu_show_date_hour+0xe0>)
 8013f74:	f7fa f974 	bl	800e260 <_txe_queue_send>
        break;
 8013f78:	e00f      	b.n	8013f9a <fm_menu_show_date_hour+0x92>
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 8013f7a:	4b19      	ldr	r3, [pc, #100]	; (8013fe0 <fm_menu_show_date_hour+0xd8>)
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 8013f80:	4b1a      	ldr	r3, [pc, #104]	; (8013fec <fm_menu_show_date_hour+0xe4>)
 8013f82:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8013f84:	2301      	movs	r3, #1
 8013f86:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8013f88:	f107 0313 	add.w	r3, r7, #19
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	4619      	mov	r1, r3
 8013f90:	4815      	ldr	r0, [pc, #84]	; (8013fe8 <fm_menu_show_date_hour+0xe0>)
 8013f92:	f7fa f965 	bl	800e260 <_txe_queue_send>
        break;
 8013f96:	e000      	b.n	8013f9a <fm_menu_show_date_hour+0x92>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 8013f98:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer3[] = "date_hour\n";
 8013f9a:	4a15      	ldr	r2, [pc, #84]	; (8013ff0 <fm_menu_show_date_hour+0xe8>)
 8013f9c:	f107 0308 	add.w	r3, r7, #8
 8013fa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8013fa2:	c303      	stmia	r3!, {r0, r1}
 8013fa4:	801a      	strh	r2, [r3, #0]
 8013fa6:	3302      	adds	r3, #2
 8013fa8:	0c12      	lsrs	r2, r2, #16
 8013faa:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer3, sizeof(msg_buffer3));
 8013fac:	f107 0308 	add.w	r3, r7, #8
 8013fb0:	210b      	movs	r1, #11
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fa fd90 	bl	800ead8 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 8013fb8:	4b09      	ldr	r3, [pc, #36]	; (8013fe0 <fm_menu_show_date_hour+0xd8>)
 8013fba:	781b      	ldrb	r3, [r3, #0]
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d105      	bne.n	8013fcc <fm_menu_show_date_hour+0xc4>
    {
        new_entry = 1;
 8013fc0:	4b06      	ldr	r3, [pc, #24]	; (8013fdc <fm_menu_show_date_hour+0xd4>)
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 8013fc6:	4b06      	ldr	r3, [pc, #24]	; (8013fe0 <fm_menu_show_date_hour+0xd8>)
 8013fc8:	2200      	movs	r2, #0
 8013fca:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 8013fcc:	697b      	ldr	r3, [r7, #20]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3718      	adds	r7, #24
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	08013f09 	.word	0x08013f09
 8013fdc:	2000014d 	.word	0x2000014d
 8013fe0:	20001dd9 	.word	0x20001dd9
 8013fe4:	08013e09 	.word	0x08013e09
 8013fe8:	20001388 	.word	0x20001388
 8013fec:	080135c5 	.word	0x080135c5
 8013ff0:	080153b4 	.word	0x080153b4

08013ff4 <fm_menu_show_init>:

ptr_ret_menu_t fm_menu_show_init(fm_event_t event_id)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b086      	sub	sp, #24
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 8013ffe:	231e      	movs	r3, #30
 8014000:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_init;
 8014002:	4b3f      	ldr	r3, [pc, #252]	; (8014100 <fm_menu_show_init+0x10c>)
 8014004:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 8014006:	4b3f      	ldr	r3, [pc, #252]	; (8014104 <fm_menu_show_init+0x110>)
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	2b01      	cmp	r3, #1
 801400c:	d106      	bne.n	801401c <fm_menu_show_init+0x28>
    {
        fm_lcd_init();
 801400e:	f7fb fdf1 	bl	800fbf4 <fm_lcd_init>
        fm_lcd_clear();
 8014012:	f7fb fbec 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8014016:	4b3b      	ldr	r3, [pc, #236]	; (8014104 <fm_menu_show_init+0x110>)
 8014018:	2200      	movs	r2, #0
 801401a:	701a      	strb	r2, [r3, #0]
    }

    pcf8553_write_all(0xFF); // @suppress("Avoid magic numbers")
 801401c:	20ff      	movs	r0, #255	; 0xff
 801401e:	f7fe f987 	bl	8012330 <pcf8553_write_all>

    switch (event_id)
 8014022:	79fb      	ldrb	r3, [r7, #7]
 8014024:	3b01      	subs	r3, #1
 8014026:	2b04      	cmp	r3, #4
 8014028:	d848      	bhi.n	80140bc <fm_menu_show_init+0xc8>
 801402a:	a201      	add	r2, pc, #4	; (adr r2, 8014030 <fm_menu_show_init+0x3c>)
 801402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014030:	08014069 	.word	0x08014069
 8014034:	080140bd 	.word	0x080140bd
 8014038:	080140bd 	.word	0x080140bd
 801403c:	08014045 	.word	0x08014045
 8014040:	080140bd 	.word	0x080140bd
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 8014044:	4830      	ldr	r0, [pc, #192]	; (8014108 <fm_menu_show_init+0x114>)
 8014046:	f7fa f8a3 	bl	800e190 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801404a:	4b30      	ldr	r3, [pc, #192]	; (801410c <fm_menu_show_init+0x118>)
 801404c:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 801404e:	2301      	movs	r3, #1
 8014050:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014052:	f107 0312 	add.w	r3, r7, #18
 8014056:	2200      	movs	r2, #0
 8014058:	4619      	mov	r1, r3
 801405a:	482b      	ldr	r0, [pc, #172]	; (8014108 <fm_menu_show_init+0x114>)
 801405c:	f7fa f900 	bl	800e260 <_txe_queue_send>
            new_exit = 1;
 8014060:	4b2b      	ldr	r3, [pc, #172]	; (8014110 <fm_menu_show_init+0x11c>)
 8014062:	2201      	movs	r2, #1
 8014064:	701a      	strb	r2, [r3, #0]
        break;
 8014066:	e02a      	b.n	80140be <fm_menu_show_init+0xca>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 8014068:	4b2a      	ldr	r3, [pc, #168]	; (8014114 <fm_menu_show_init+0x120>)
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	7cfa      	ldrb	r2, [r7, #19]
 801406e:	429a      	cmp	r2, r3
 8014070:	d912      	bls.n	8014098 <fm_menu_show_init+0xa4>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 8014072:	2064      	movs	r0, #100	; 0x64
 8014074:	f7ed fc36 	bl	80018e4 <HAL_Delay>
                counter++;
 8014078:	4b26      	ldr	r3, [pc, #152]	; (8014114 <fm_menu_show_init+0x120>)
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	3301      	adds	r3, #1
 801407e:	b2da      	uxtb	r2, r3
 8014080:	4b24      	ldr	r3, [pc, #144]	; (8014114 <fm_menu_show_init+0x120>)
 8014082:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 8014084:	2301      	movs	r3, #1
 8014086:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014088:	f107 0312 	add.w	r3, r7, #18
 801408c:	2200      	movs	r2, #0
 801408e:	4619      	mov	r1, r3
 8014090:	481d      	ldr	r0, [pc, #116]	; (8014108 <fm_menu_show_init+0x114>)
 8014092:	f7fa f8e5 	bl	800e260 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 8014096:	e012      	b.n	80140be <fm_menu_show_init+0xca>
                tx_queue_flush(&event_queue_ptr);
 8014098:	481b      	ldr	r0, [pc, #108]	; (8014108 <fm_menu_show_init+0x114>)
 801409a:	f7fa f879 	bl	800e190 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 801409e:	4b1b      	ldr	r3, [pc, #108]	; (801410c <fm_menu_show_init+0x118>)
 80140a0:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80140a2:	2301      	movs	r3, #1
 80140a4:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80140a6:	f107 0312 	add.w	r3, r7, #18
 80140aa:	2200      	movs	r2, #0
 80140ac:	4619      	mov	r1, r3
 80140ae:	4816      	ldr	r0, [pc, #88]	; (8014108 <fm_menu_show_init+0x114>)
 80140b0:	f7fa f8d6 	bl	800e260 <_txe_queue_send>
                new_exit = 1;
 80140b4:	4b16      	ldr	r3, [pc, #88]	; (8014110 <fm_menu_show_init+0x11c>)
 80140b6:	2201      	movs	r2, #1
 80140b8:	701a      	strb	r2, [r3, #0]
        break;
 80140ba:	e000      	b.n	80140be <fm_menu_show_init+0xca>
        default:
        break;
 80140bc:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "INIT\n";
 80140be:	4a16      	ldr	r2, [pc, #88]	; (8014118 <fm_menu_show_init+0x124>)
 80140c0:	f107 030c 	add.w	r3, r7, #12
 80140c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140c8:	6018      	str	r0, [r3, #0]
 80140ca:	3304      	adds	r3, #4
 80140cc:	8019      	strh	r1, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80140ce:	f107 030c 	add.w	r3, r7, #12
 80140d2:	2106      	movs	r1, #6
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7fa fcff 	bl	800ead8 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80140da:	4b0d      	ldr	r3, [pc, #52]	; (8014110 <fm_menu_show_init+0x11c>)
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	2b01      	cmp	r3, #1
 80140e0:	d108      	bne.n	80140f4 <fm_menu_show_init+0x100>
    {
        counter = 0;
 80140e2:	4b0c      	ldr	r3, [pc, #48]	; (8014114 <fm_menu_show_init+0x120>)
 80140e4:	2200      	movs	r2, #0
 80140e6:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80140e8:	4b06      	ldr	r3, [pc, #24]	; (8014104 <fm_menu_show_init+0x110>)
 80140ea:	2201      	movs	r2, #1
 80140ec:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80140ee:	4b08      	ldr	r3, [pc, #32]	; (8014110 <fm_menu_show_init+0x11c>)
 80140f0:	2200      	movs	r2, #0
 80140f2:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80140f4:	697b      	ldr	r3, [r7, #20]
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	08013ff5 	.word	0x08013ff5
 8014104:	2000014e 	.word	0x2000014e
 8014108:	20001388 	.word	0x20001388
 801410c:	080141f9 	.word	0x080141f9
 8014110:	20001dda 	.word	0x20001dda
 8014114:	20001ddb 	.word	0x20001ddb
 8014118:	080153c0 	.word	0x080153c0

0801411c <fm_menu_show_ttl_rate>:
 * unidades y puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_ttl_rate(fm_event_t event_id)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b086      	sub	sp, #24
 8014120:	af00      	add	r7, sp, #0
 8014122:	4603      	mov	r3, r0
 8014124:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014126:	4b2d      	ldr	r3, [pc, #180]	; (80141dc <fm_menu_show_ttl_rate+0xc0>)
 8014128:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801412a:	4b2d      	ldr	r3, [pc, #180]	; (80141e0 <fm_menu_show_ttl_rate+0xc4>)
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	2b01      	cmp	r3, #1
 8014130:	d104      	bne.n	801413c <fm_menu_show_ttl_rate+0x20>
    {
        fm_lcd_clear();
 8014132:	f7fb fb5c 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8014136:	4b2a      	ldr	r3, [pc, #168]	; (80141e0 <fm_menu_show_ttl_rate+0xc4>)
 8014138:	2200      	movs	r2, #0
 801413a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_ttl_rate();
 801413c:	f7fb feef 	bl	800ff1e <fm_lcd_ttl_rate>
    fm_lcd_refresh();
 8014140:	f7fb fee7 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8014144:	79fb      	ldrb	r3, [r7, #7]
 8014146:	3b01      	subs	r3, #1
 8014148:	2b04      	cmp	r3, #4
 801414a:	d82b      	bhi.n	80141a4 <fm_menu_show_ttl_rate+0x88>
 801414c:	a201      	add	r2, pc, #4	; (adr r2, 8014154 <fm_menu_show_ttl_rate+0x38>)
 801414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014152:	bf00      	nop
 8014154:	080141a5 	.word	0x080141a5
 8014158:	080141a5 	.word	0x080141a5
 801415c:	08014169 	.word	0x08014169
 8014160:	080141a5 	.word	0x080141a5
 8014164:	08014187 	.word	0x08014187
    {
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
            new_exit = 1;
 8014168:	4b1e      	ldr	r3, [pc, #120]	; (80141e4 <fm_menu_show_ttl_rate+0xc8>)
 801416a:	2201      	movs	r2, #1
 801416c:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_show_acm_rate;
 801416e:	4b1e      	ldr	r3, [pc, #120]	; (80141e8 <fm_menu_show_ttl_rate+0xcc>)
 8014170:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014172:	2301      	movs	r3, #1
 8014174:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014176:	f107 0313 	add.w	r3, r7, #19
 801417a:	2200      	movs	r2, #0
 801417c:	4619      	mov	r1, r3
 801417e:	481b      	ldr	r0, [pc, #108]	; (80141ec <fm_menu_show_ttl_rate+0xd0>)
 8014180:	f7fa f86e 	bl	800e260 <_txe_queue_send>
        break;
 8014184:	e00f      	b.n	80141a6 <fm_menu_show_ttl_rate+0x8a>
        case EVENT_KEY_ENTER:
        break;
        case EVENT_KEY_ESC:
            new_exit = 1;
 8014186:	4b17      	ldr	r3, [pc, #92]	; (80141e4 <fm_menu_show_ttl_rate+0xc8>)
 8014188:	2201      	movs	r2, #1
 801418a:	701a      	strb	r2, [r3, #0]
            ret_menu = (ptr_ret_menu_t) fm_menu_config_pass;
 801418c:	4b18      	ldr	r3, [pc, #96]	; (80141f0 <fm_menu_show_ttl_rate+0xd4>)
 801418e:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014190:	2301      	movs	r3, #1
 8014192:	74fb      	strb	r3, [r7, #19]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014194:	f107 0313 	add.w	r3, r7, #19
 8014198:	2200      	movs	r2, #0
 801419a:	4619      	mov	r1, r3
 801419c:	4813      	ldr	r0, [pc, #76]	; (80141ec <fm_menu_show_ttl_rate+0xd0>)
 801419e:	f7fa f85f 	bl	800e260 <_txe_queue_send>
        break;
 80141a2:	e000      	b.n	80141a6 <fm_menu_show_ttl_rate+0x8a>
        case EVENT_LCD_REFRESH:
        break;
        default:
        break;
 80141a4:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "ttl_rate\n";
 80141a6:	4a13      	ldr	r2, [pc, #76]	; (80141f4 <fm_menu_show_ttl_rate+0xd8>)
 80141a8:	f107 0308 	add.w	r3, r7, #8
 80141ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80141ae:	c303      	stmia	r3!, {r0, r1}
 80141b0:	801a      	strh	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80141b2:	f107 0308 	add.w	r3, r7, #8
 80141b6:	210a      	movs	r1, #10
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fa fc8d 	bl	800ead8 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80141be:	4b09      	ldr	r3, [pc, #36]	; (80141e4 <fm_menu_show_ttl_rate+0xc8>)
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d105      	bne.n	80141d2 <fm_menu_show_ttl_rate+0xb6>
    {
        new_entry = 1;
 80141c6:	4b06      	ldr	r3, [pc, #24]	; (80141e0 <fm_menu_show_ttl_rate+0xc4>)
 80141c8:	2201      	movs	r2, #1
 80141ca:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80141cc:	4b05      	ldr	r3, [pc, #20]	; (80141e4 <fm_menu_show_ttl_rate+0xc8>)
 80141ce:	2200      	movs	r2, #0
 80141d0:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80141d2:	697b      	ldr	r3, [r7, #20]
}
 80141d4:	4618      	mov	r0, r3
 80141d6:	3718      	adds	r7, #24
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	0801411d 	.word	0x0801411d
 80141e0:	2000014f 	.word	0x2000014f
 80141e4:	20001ddc 	.word	0x20001ddc
 80141e8:	08013d09 	.word	0x08013d09
 80141ec:	20001388 	.word	0x20001388
 80141f0:	080135c5 	.word	0x080135c5
 80141f4:	080153c8 	.word	0x080153c8

080141f8 <fm_menu_show_version>:
 * pantalla, con puntos específicos.
 * @param  Evento de presión de botones o refresh.
 * @retval Puntero al retorno de la función.
 */
ptr_ret_menu_t fm_menu_show_version(fm_event_t event_id)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	4603      	mov	r3, r0
 8014200:	71fb      	strb	r3, [r7, #7]
    static uint8_t new_entry = 1;
    static uint8_t new_exit = 0;
    static uint8_t counter = 0;
    const  uint8_t counter_max = 30;
 8014202:	231e      	movs	r3, #30
 8014204:	74fb      	strb	r3, [r7, #19]

    ptr_ret_menu_t ret_menu = (ptr_ret_menu_t) fm_menu_show_version;
 8014206:	4b3f      	ldr	r3, [pc, #252]	; (8014304 <fm_menu_show_version+0x10c>)
 8014208:	617b      	str	r3, [r7, #20]
    fm_event_t event_now;

    if (new_entry == 1)
 801420a:	4b3f      	ldr	r3, [pc, #252]	; (8014308 <fm_menu_show_version+0x110>)
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	2b01      	cmp	r3, #1
 8014210:	d104      	bne.n	801421c <fm_menu_show_version+0x24>
    {
        fm_lcd_clear();
 8014212:	f7fb faec 	bl	800f7ee <fm_lcd_clear>
        new_entry = 0;
 8014216:	4b3c      	ldr	r3, [pc, #240]	; (8014308 <fm_menu_show_version+0x110>)
 8014218:	2200      	movs	r2, #0
 801421a:	701a      	strb	r2, [r3, #0]
    }

    fm_lcd_version(PNT_4, PNT_5);
 801421c:	2105      	movs	r1, #5
 801421e:	2004      	movs	r0, #4
 8014220:	f7fc f824 	bl	801026c <fm_lcd_version>
    fm_lcd_refresh();
 8014224:	f7fb fe75 	bl	800ff12 <fm_lcd_refresh>

    switch (event_id)
 8014228:	79fb      	ldrb	r3, [r7, #7]
 801422a:	3b01      	subs	r3, #1
 801422c:	2b04      	cmp	r3, #4
 801422e:	d849      	bhi.n	80142c4 <fm_menu_show_version+0xcc>
 8014230:	a201      	add	r2, pc, #4	; (adr r2, 8014238 <fm_menu_show_version+0x40>)
 8014232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014236:	bf00      	nop
 8014238:	08014271 	.word	0x08014271
 801423c:	080142c5 	.word	0x080142c5
 8014240:	080142c5 	.word	0x080142c5
 8014244:	0801424d 	.word	0x0801424d
 8014248:	080142c5 	.word	0x080142c5
        case EVENT_KEY_UP:
        break;
        case EVENT_KEY_DOWN:
        break;
        case EVENT_KEY_ENTER:
            tx_queue_flush(&event_queue_ptr);
 801424c:	482f      	ldr	r0, [pc, #188]	; (801430c <fm_menu_show_version+0x114>)
 801424e:	f7f9 ff9f 	bl	800e190 <_txe_queue_flush>
            ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 8014252:	4b2f      	ldr	r3, [pc, #188]	; (8014310 <fm_menu_show_version+0x118>)
 8014254:	617b      	str	r3, [r7, #20]
            event_now = EVENT_LCD_REFRESH;
 8014256:	2301      	movs	r3, #1
 8014258:	74bb      	strb	r3, [r7, #18]
            tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 801425a:	f107 0312 	add.w	r3, r7, #18
 801425e:	2200      	movs	r2, #0
 8014260:	4619      	mov	r1, r3
 8014262:	482a      	ldr	r0, [pc, #168]	; (801430c <fm_menu_show_version+0x114>)
 8014264:	f7f9 fffc 	bl	800e260 <_txe_queue_send>
            new_exit = 1;
 8014268:	4b2a      	ldr	r3, [pc, #168]	; (8014314 <fm_menu_show_version+0x11c>)
 801426a:	2201      	movs	r2, #1
 801426c:	701a      	strb	r2, [r3, #0]
        break;
 801426e:	e02a      	b.n	80142c6 <fm_menu_show_version+0xce>
        case EVENT_KEY_ESC:
        break;
        case EVENT_LCD_REFRESH:
            if(counter < counter_max)
 8014270:	4b29      	ldr	r3, [pc, #164]	; (8014318 <fm_menu_show_version+0x120>)
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	7cfa      	ldrb	r2, [r7, #19]
 8014276:	429a      	cmp	r2, r3
 8014278:	d912      	bls.n	80142a0 <fm_menu_show_version+0xa8>
            {
                HAL_Delay(100); // @suppress("Avoid magic numbers")
 801427a:	2064      	movs	r0, #100	; 0x64
 801427c:	f7ed fb32 	bl	80018e4 <HAL_Delay>
                counter++;
 8014280:	4b25      	ldr	r3, [pc, #148]	; (8014318 <fm_menu_show_version+0x120>)
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	3301      	adds	r3, #1
 8014286:	b2da      	uxtb	r2, r3
 8014288:	4b23      	ldr	r3, [pc, #140]	; (8014318 <fm_menu_show_version+0x120>)
 801428a:	701a      	strb	r2, [r3, #0]
                event_now = EVENT_LCD_REFRESH;
 801428c:	2301      	movs	r3, #1
 801428e:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 8014290:	f107 0312 	add.w	r3, r7, #18
 8014294:	2200      	movs	r2, #0
 8014296:	4619      	mov	r1, r3
 8014298:	481c      	ldr	r0, [pc, #112]	; (801430c <fm_menu_show_version+0x114>)
 801429a:	f7f9 ffe1 	bl	800e260 <_txe_queue_send>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
                event_now = EVENT_LCD_REFRESH;
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
                new_exit = 1;
            }
        break;
 801429e:	e012      	b.n	80142c6 <fm_menu_show_version+0xce>
                tx_queue_flush(&event_queue_ptr);
 80142a0:	481a      	ldr	r0, [pc, #104]	; (801430c <fm_menu_show_version+0x114>)
 80142a2:	f7f9 ff75 	bl	800e190 <_txe_queue_flush>
                ret_menu = (ptr_ret_menu_t) fm_menu_show_ttl_rate;
 80142a6:	4b1a      	ldr	r3, [pc, #104]	; (8014310 <fm_menu_show_version+0x118>)
 80142a8:	617b      	str	r3, [r7, #20]
                event_now = EVENT_LCD_REFRESH;
 80142aa:	2301      	movs	r3, #1
 80142ac:	74bb      	strb	r3, [r7, #18]
                tx_queue_send(&event_queue_ptr, &event_now, TX_NO_WAIT);
 80142ae:	f107 0312 	add.w	r3, r7, #18
 80142b2:	2200      	movs	r2, #0
 80142b4:	4619      	mov	r1, r3
 80142b6:	4815      	ldr	r0, [pc, #84]	; (801430c <fm_menu_show_version+0x114>)
 80142b8:	f7f9 ffd2 	bl	800e260 <_txe_queue_send>
                new_exit = 1;
 80142bc:	4b15      	ldr	r3, [pc, #84]	; (8014314 <fm_menu_show_version+0x11c>)
 80142be:	2201      	movs	r2, #1
 80142c0:	701a      	strb	r2, [r3, #0]
        break;
 80142c2:	e000      	b.n	80142c6 <fm_menu_show_version+0xce>
        default:
        break;
 80142c4:	bf00      	nop
    }

#ifdef FM_DEBUG_MENU
    char msg_buffer[] = "version\n";
 80142c6:	4a15      	ldr	r2, [pc, #84]	; (801431c <fm_menu_show_version+0x124>)
 80142c8:	f107 0308 	add.w	r3, r7, #8
 80142cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80142ce:	c303      	stmia	r3!, {r0, r1}
 80142d0:	701a      	strb	r2, [r3, #0]
    fm_debug_msg_uart((uint8_t*) msg_buffer, sizeof(msg_buffer));
 80142d2:	f107 0308 	add.w	r3, r7, #8
 80142d6:	2109      	movs	r1, #9
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fa fbfd 	bl	800ead8 <fm_debug_msg_uart>
#endif

    if (new_exit == 1)
 80142de:	4b0d      	ldr	r3, [pc, #52]	; (8014314 <fm_menu_show_version+0x11c>)
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d108      	bne.n	80142f8 <fm_menu_show_version+0x100>
    {
        counter = 0;
 80142e6:	4b0c      	ldr	r3, [pc, #48]	; (8014318 <fm_menu_show_version+0x120>)
 80142e8:	2200      	movs	r2, #0
 80142ea:	701a      	strb	r2, [r3, #0]
        new_entry = 1;
 80142ec:	4b06      	ldr	r3, [pc, #24]	; (8014308 <fm_menu_show_version+0x110>)
 80142ee:	2201      	movs	r2, #1
 80142f0:	701a      	strb	r2, [r3, #0]
        new_exit = 0;
 80142f2:	4b08      	ldr	r3, [pc, #32]	; (8014314 <fm_menu_show_version+0x11c>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	701a      	strb	r2, [r3, #0]
    }

    return (ret_menu);
 80142f8:	697b      	ldr	r3, [r7, #20]
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3718      	adds	r7, #24
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}
 8014302:	bf00      	nop
 8014304:	080141f9 	.word	0x080141f9
 8014308:	20000150 	.word	0x20000150
 801430c:	20001388 	.word	0x20001388
 8014310:	0801411d 	.word	0x0801411d
 8014314:	20001ddd 	.word	0x20001ddd
 8014318:	20001dde 	.word	0x20001dde
 801431c:	080153d4 	.word	0x080153d4

08014320 <fm_temp_stm32_get>:
// Private function bodies.

// Public function bodies.

void fm_temp_stm32_get()
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
    const uint8_t poll_time = 100;
 8014326:	2364      	movs	r3, #100	; 0x64
 8014328:	71fb      	strb	r3, [r7, #7]

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET ,ADC_SINGLE_ENDED);
 801432a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801432e:	2100      	movs	r1, #0
 8014330:	4808      	ldr	r0, [pc, #32]	; (8014354 <fm_temp_stm32_get+0x34>)
 8014332:	f7ef fb75 	bl	8003a20 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8014336:	4807      	ldr	r0, [pc, #28]	; (8014354 <fm_temp_stm32_get+0x34>)
 8014338:	f7ee f934 	bl	80025a4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, poll_time);
 801433c:	79fb      	ldrb	r3, [r7, #7]
 801433e:	4619      	mov	r1, r3
 8014340:	4804      	ldr	r0, [pc, #16]	; (8014354 <fm_temp_stm32_get+0x34>)
 8014342:	f7ee f9d7 	bl	80026f4 <HAL_ADC_PollForConversion>
    HAL_ADC_Stop(&hadc1);
 8014346:	4803      	ldr	r0, [pc, #12]	; (8014354 <fm_temp_stm32_get+0x34>)
 8014348:	f7ee f9a0 	bl	800268c <HAL_ADC_Stop>
}
 801434c:	bf00      	nop
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	200013c4 	.word	0x200013c4

08014358 <fm_temp_stm32_format>:

int fm_temp_stm32_format()
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
    uint16_t raw_value;
    int temp_celcius;

    fm_temp_stm32_get();
 801435e:	f7ff ffdf 	bl	8014320 <fm_temp_stm32_get>
    raw_value = HAL_ADC_GetValue(&hadc1);
 8014362:	4813      	ldr	r0, [pc, #76]	; (80143b0 <fm_temp_stm32_format+0x58>)
 8014364:	f7ee faac 	bl	80028c0 <HAL_ADC_GetValue>
 8014368:	4603      	mov	r3, r0
 801436a:	80fb      	strh	r3, [r7, #6]
    temp_celcius = __HAL_ADC_CALC_TEMPERATURE(&hadc1, 3285, raw_value,
 801436c:	88fb      	ldrh	r3, [r7, #6]
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8014374:	fb02 f303 	mul.w	r3, r2, r3
 8014378:	461a      	mov	r2, r3
 801437a:	4b0e      	ldr	r3, [pc, #56]	; (80143b4 <fm_temp_stm32_format+0x5c>)
 801437c:	fba3 2302 	umull	r2, r3, r3, r2
 8014380:	099b      	lsrs	r3, r3, #6
 8014382:	461a      	mov	r2, r3
 8014384:	4b0c      	ldr	r3, [pc, #48]	; (80143b8 <fm_temp_stm32_format+0x60>)
 8014386:	881b      	ldrh	r3, [r3, #0]
 8014388:	1ad3      	subs	r3, r2, r3
 801438a:	2264      	movs	r2, #100	; 0x64
 801438c:	fb03 f202 	mul.w	r2, r3, r2
 8014390:	4b0a      	ldr	r3, [pc, #40]	; (80143bc <fm_temp_stm32_format+0x64>)
 8014392:	881b      	ldrh	r3, [r3, #0]
 8014394:	4619      	mov	r1, r3
 8014396:	4b08      	ldr	r3, [pc, #32]	; (80143b8 <fm_temp_stm32_format+0x60>)
 8014398:	881b      	ldrh	r3, [r3, #0]
 801439a:	1acb      	subs	r3, r1, r3
 801439c:	fb92 f3f3 	sdiv	r3, r2, r3
 80143a0:	331e      	adds	r3, #30
 80143a2:	603b      	str	r3, [r7, #0]
    ADC_RESOLUTION_12B);

    return (temp_celcius);
 80143a4:	683b      	ldr	r3, [r7, #0]
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3708      	adds	r7, #8
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	200013c4 	.word	0x200013c4
 80143b4:	057619f1 	.word	0x057619f1
 80143b8:	0bfa0710 	.word	0x0bfa0710
 80143bc:	0bfa0742 	.word	0x0bfa0742

080143c0 <fm_version_get>:
 * actualizado este valor.
 * @param None
 * @retval Número de versión en formato VRR.
 */
uint32_t fm_version_get()
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b088      	sub	sp, #32
 80143c4:	af02      	add	r7, sp, #8
    uint32_t version = 0;
 80143c6:	2300      	movs	r3, #0
 80143c8:	617b      	str	r3, [r7, #20]
    char version_arr[PCF8553_DATA_SIZE];

    sprintf(version_arr, "%d%d%d", VERSION, REVISION, RELEASE);
 80143ca:	4638      	mov	r0, r7
 80143cc:	2300      	movs	r3, #0
 80143ce:	9300      	str	r3, [sp, #0]
 80143d0:	2302      	movs	r3, #2
 80143d2:	2201      	movs	r2, #1
 80143d4:	4906      	ldr	r1, [pc, #24]	; (80143f0 <fm_version_get+0x30>)
 80143d6:	f000 f9bb 	bl	8014750 <siprintf>
    /*
     * Esta instrucción está de mas ya que después se vuelve a formatear el
     * entero en un arreglo, pero por ahora se va a quedar así hasta que se
     * elimine el formatter de la libreria fm_lcd.h
     */
    version = atoi(version_arr);
 80143da:	463b      	mov	r3, r7
 80143dc:	4618      	mov	r0, r3
 80143de:	f000 f94d 	bl	801467c <atoi>
 80143e2:	4603      	mov	r3, r0
 80143e4:	617b      	str	r3, [r7, #20]

    return (version);
 80143e6:	697b      	ldr	r3, [r7, #20]
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3718      	adds	r7, #24
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}
 80143f0:	080153e0 	.word	0x080153e0

080143f4 <fmc_get_acm>:
 * parámetro de retorno.
 * @param  None
 * @retval Volumen acumulado como estructura.
 */
fmc_totalizer_t fmc_get_acm()
{
 80143f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143f6:	b093      	sub	sp, #76	; 0x4c
 80143f8:	af06      	add	r7, sp, #24
 80143fa:	62f8      	str	r0, [r7, #44]	; 0x2c
    acm = fm_factory_get_acm();
 80143fc:	4c1c      	ldr	r4, [pc, #112]	; (8014470 <fmc_get_acm+0x7c>)
 80143fe:	f107 0308 	add.w	r3, r7, #8
 8014402:	4618      	mov	r0, r3
 8014404:	f7fa fb84 	bl	800eb10 <fm_factory_get_acm>
 8014408:	4625      	mov	r5, r4
 801440a:	f107 0408 	add.w	r4, r7, #8
 801440e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014412:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014416:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    acm = fmc_totalizer_init(acm);
 801441a:	4b15      	ldr	r3, [pc, #84]	; (8014470 <fmc_get_acm+0x7c>)
 801441c:	607b      	str	r3, [r7, #4]
 801441e:	f107 0c08 	add.w	ip, r7, #8
 8014422:	4e13      	ldr	r6, [pc, #76]	; (8014470 <fmc_get_acm+0x7c>)
 8014424:	466d      	mov	r5, sp
 8014426:	f106 0408 	add.w	r4, r6, #8
 801442a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801442c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801442e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014432:	e885 0003 	stmia.w	r5, {r0, r1}
 8014436:	e896 000c 	ldmia.w	r6, {r2, r3}
 801443a:	4660      	mov	r0, ip
 801443c:	f000 f8c0 	bl	80145c0 <fmc_totalizer_init>
 8014440:	687d      	ldr	r5, [r7, #4]
 8014442:	f107 0408 	add.w	r4, r7, #8
 8014446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801444a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801444e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (acm);
 8014452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014454:	4a06      	ldr	r2, [pc, #24]	; (8014470 <fmc_get_acm+0x7c>)
 8014456:	461c      	mov	r4, r3
 8014458:	4615      	mov	r5, r2
 801445a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801445c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801445e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014468:	3734      	adds	r7, #52	; 0x34
 801446a:	46bd      	mov	sp, r7
 801446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801446e:	bf00      	nop
 8014470:	20001de0 	.word	0x20001de0

08014474 <fmc_get_stm32_temp>:
 * @retval temperatura interna del microcontrolador como una estructura que
 * contiene su valor, resolución y unidad.
 * global.
 */
fmc_temp_t fmc_get_stm32_temp()
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b088      	sub	sp, #32
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
    int_temperature.temperature.num = fm_temp_stm32_format();
 801447c:	f7ff ff6c 	bl	8014358 <fm_temp_stm32_format>
 8014480:	4603      	mov	r3, r0
 8014482:	461a      	mov	r2, r3
 8014484:	4b0d      	ldr	r3, [pc, #52]	; (80144bc <fmc_get_stm32_temp+0x48>)
 8014486:	601a      	str	r2, [r3, #0]
    int_temperature.temperature.res = fm_factory_get_temp().temperature.res;
 8014488:	f107 0308 	add.w	r3, r7, #8
 801448c:	4618      	mov	r0, r3
 801448e:	f7fa fb81 	bl	800eb94 <fm_factory_get_temp>
 8014492:	7b3a      	ldrb	r2, [r7, #12]
 8014494:	4b09      	ldr	r3, [pc, #36]	; (80144bc <fmc_get_stm32_temp+0x48>)
 8014496:	711a      	strb	r2, [r3, #4]
    int_temperature.unit_volume_temp = fm_factory_get_temp().unit_volume_temp;
 8014498:	f107 0314 	add.w	r3, r7, #20
 801449c:	4618      	mov	r0, r3
 801449e:	f7fa fb79 	bl	800eb94 <fm_factory_get_temp>
 80144a2:	7f3a      	ldrb	r2, [r7, #28]
 80144a4:	4b05      	ldr	r3, [pc, #20]	; (80144bc <fmc_get_stm32_temp+0x48>)
 80144a6:	721a      	strb	r2, [r3, #8]

    return (int_temperature);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	4a04      	ldr	r2, [pc, #16]	; (80144bc <fmc_get_stm32_temp+0x48>)
 80144ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80144ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	3720      	adds	r7, #32
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	20001e40 	.word	0x20001e40

080144c0 <fmc_get_rate>:
 * devuelve como parámetro de retorno.
 * @param  None
 * @retval caudal instantaneo como estructura.
 */
fmc_totalizer_t fmc_get_rate()
{
 80144c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144c2:	b093      	sub	sp, #76	; 0x4c
 80144c4:	af06      	add	r7, sp, #24
 80144c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    rate = fm_factory_get_rate();
 80144c8:	4c1c      	ldr	r4, [pc, #112]	; (801453c <fmc_get_rate+0x7c>)
 80144ca:	f107 0308 	add.w	r3, r7, #8
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7fa fb4a 	bl	800eb68 <fm_factory_get_rate>
 80144d4:	4625      	mov	r5, r4
 80144d6:	f107 0408 	add.w	r4, r7, #8
 80144da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80144e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    rate = fmc_totalizer_init(rate);
 80144e6:	4b15      	ldr	r3, [pc, #84]	; (801453c <fmc_get_rate+0x7c>)
 80144e8:	607b      	str	r3, [r7, #4]
 80144ea:	f107 0c08 	add.w	ip, r7, #8
 80144ee:	4e13      	ldr	r6, [pc, #76]	; (801453c <fmc_get_rate+0x7c>)
 80144f0:	466d      	mov	r5, sp
 80144f2:	f106 0408 	add.w	r4, r6, #8
 80144f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80144fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80144fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8014502:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014506:	4660      	mov	r0, ip
 8014508:	f000 f85a 	bl	80145c0 <fmc_totalizer_init>
 801450c:	687d      	ldr	r5, [r7, #4]
 801450e:	f107 0408 	add.w	r4, r7, #8
 8014512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014516:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801451a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (rate);
 801451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014520:	4a06      	ldr	r2, [pc, #24]	; (801453c <fmc_get_rate+0x7c>)
 8014522:	461c      	mov	r4, r3
 8014524:	4615      	mov	r5, r2
 8014526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801452a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801452e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014534:	3734      	adds	r7, #52	; 0x34
 8014536:	46bd      	mov	sp, r7
 8014538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801453a:	bf00      	nop
 801453c:	20001e00 	.word	0x20001e00

08014540 <fmc_get_ttl>:
 * parámetro de retorno.
 * @param  None
 * @retval volumen histórico como estructura.
 */
fmc_totalizer_t fmc_get_ttl()
{
 8014540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014542:	b093      	sub	sp, #76	; 0x4c
 8014544:	af06      	add	r7, sp, #24
 8014546:	62f8      	str	r0, [r7, #44]	; 0x2c
    ttl = fm_factory_get_ttl();
 8014548:	4c1c      	ldr	r4, [pc, #112]	; (80145bc <fmc_get_ttl+0x7c>)
 801454a:	f107 0308 	add.w	r3, r7, #8
 801454e:	4618      	mov	r0, r3
 8014550:	f7fa faf4 	bl	800eb3c <fm_factory_get_ttl>
 8014554:	4625      	mov	r5, r4
 8014556:	f107 0408 	add.w	r4, r7, #8
 801455a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801455c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801455e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014562:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    ttl = fmc_totalizer_init(ttl);
 8014566:	4b15      	ldr	r3, [pc, #84]	; (80145bc <fmc_get_ttl+0x7c>)
 8014568:	607b      	str	r3, [r7, #4]
 801456a:	f107 0c08 	add.w	ip, r7, #8
 801456e:	4e13      	ldr	r6, [pc, #76]	; (80145bc <fmc_get_ttl+0x7c>)
 8014570:	466d      	mov	r5, sp
 8014572:	f106 0408 	add.w	r4, r6, #8
 8014576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801457a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801457e:	e885 0003 	stmia.w	r5, {r0, r1}
 8014582:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014586:	4660      	mov	r0, ip
 8014588:	f000 f81a 	bl	80145c0 <fmc_totalizer_init>
 801458c:	687d      	ldr	r5, [r7, #4]
 801458e:	f107 0408 	add.w	r4, r7, #8
 8014592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014596:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801459a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    return (ttl);
 801459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a0:	4a06      	ldr	r2, [pc, #24]	; (80145bc <fmc_get_ttl+0x7c>)
 80145a2:	461c      	mov	r4, r3
 80145a4:	4615      	mov	r5, r2
 80145a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80145a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80145aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80145ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80145b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145b4:	3734      	adds	r7, #52	; 0x34
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ba:	bf00      	nop
 80145bc:	20001e20 	.word	0x20001e20

080145c0 <fmc_totalizer_init>:
 * @brief
 * @param
 * @retval None
 */
fmc_totalizer_t fmc_totalizer_init(fmc_totalizer_t totalizer)
{
 80145c0:	b082      	sub	sp, #8
 80145c2:	b5b0      	push	{r4, r5, r7, lr}
 80145c4:	b082      	sub	sp, #8
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
 80145ca:	f107 0118 	add.w	r1, r7, #24
 80145ce:	e881 000c 	stmia.w	r1, {r2, r3}
    fmc_totalizer_refresh(&totalizer);
 80145d2:	f107 0018 	add.w	r0, r7, #24
 80145d6:	f000 f811 	bl	80145fc <fmc_totalizer_refresh>

    return (totalizer);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	461d      	mov	r5, r3
 80145de:	f107 0418 	add.w	r4, r7, #24
 80145e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80145ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	3708      	adds	r7, #8
 80145f2:	46bd      	mov	sp, r7
 80145f4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80145f8:	b002      	add	sp, #8
 80145fa:	4770      	bx	lr

080145fc <fmc_totalizer_refresh>:
 * @param  puntero a estructura que contiene datos como la cantidad de pulsos
 * leidos, valor y resolución del caudal/volumen, entre otros.
 * @retval None
 */
void fmc_totalizer_refresh(fmc_totalizer_t *p_totalizer)
{
 80145fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014600:	b084      	sub	sp, #16
 8014602:	af00      	add	r7, sp, #0
 8014604:	6078      	str	r0, [r7, #4]
    uint64_t result;

    /*
     * result es la cantidad de pulsos almacenados en la estructura p_totalizer.
     */
    result = (uint64_t) p_totalizer->pulse;
 8014606:	6879      	ldr	r1, [r7, #4]
 8014608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801460c:	e9c7 0102 	strd	r0, r1, [r7, #8]

    /*
     * Pulsos escalados en el factor y en la resolucion a mostrar.
     */
    result *= g_scalar[p_totalizer->factor.res + p_totalizer->volume.res];
 8014610:	6879      	ldr	r1, [r7, #4]
 8014612:	7d09      	ldrb	r1, [r1, #20]
 8014614:	4608      	mov	r0, r1
 8014616:	6879      	ldr	r1, [r7, #4]
 8014618:	7b09      	ldrb	r1, [r1, #12]
 801461a:	4401      	add	r1, r0
 801461c:	4816      	ldr	r0, [pc, #88]	; (8014678 <fmc_totalizer_refresh+0x7c>)
 801461e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8014622:	2000      	movs	r0, #0
 8014624:	460c      	mov	r4, r1
 8014626:	4605      	mov	r5, r0
 8014628:	68f9      	ldr	r1, [r7, #12]
 801462a:	fb04 f001 	mul.w	r0, r4, r1
 801462e:	68b9      	ldr	r1, [r7, #8]
 8014630:	fb05 f101 	mul.w	r1, r5, r1
 8014634:	4401      	add	r1, r0
 8014636:	68b8      	ldr	r0, [r7, #8]
 8014638:	fba0 2304 	umull	r2, r3, r0, r4
 801463c:	4419      	add	r1, r3
 801463e:	460b      	mov	r3, r1
 8014640:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8014644:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /*
     * Obtengo el valor numérico del volumen dividiendo los pulsos escalados
     * por el factor.
     */
    result /= p_totalizer->factor.num;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	691b      	ldr	r3, [r3, #16]
 801464c:	2200      	movs	r2, #0
 801464e:	4698      	mov	r8, r3
 8014650:	4691      	mov	r9, r2
 8014652:	4642      	mov	r2, r8
 8014654:	464b      	mov	r3, r9
 8014656:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801465a:	f7eb ff3b 	bl	80004d4 <__aeabi_uldivmod>
 801465e:	4602      	mov	r2, r0
 8014660:	460b      	mov	r3, r1
 8014662:	e9c7 2302 	strd	r2, r3, [r7, #8]

    p_totalizer->volume.num = (uint32_t) result;
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	609a      	str	r2, [r3, #8]

}
 801466c:	bf00      	nop
 801466e:	3710      	adds	r7, #16
 8014670:	46bd      	mov	sp, r7
 8014672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014676:	bf00      	nop
 8014678:	080154e8 	.word	0x080154e8

0801467c <atoi>:
 801467c:	220a      	movs	r2, #10
 801467e:	2100      	movs	r1, #0
 8014680:	f000 b908 	b.w	8014894 <strtol>

08014684 <__errno>:
 8014684:	4b01      	ldr	r3, [pc, #4]	; (801468c <__errno+0x8>)
 8014686:	6818      	ldr	r0, [r3, #0]
 8014688:	4770      	bx	lr
 801468a:	bf00      	nop
 801468c:	20000154 	.word	0x20000154

08014690 <__libc_init_array>:
 8014690:	b570      	push	{r4, r5, r6, lr}
 8014692:	4d0d      	ldr	r5, [pc, #52]	; (80146c8 <__libc_init_array+0x38>)
 8014694:	2600      	movs	r6, #0
 8014696:	4c0d      	ldr	r4, [pc, #52]	; (80146cc <__libc_init_array+0x3c>)
 8014698:	1b64      	subs	r4, r4, r5
 801469a:	10a4      	asrs	r4, r4, #2
 801469c:	42a6      	cmp	r6, r4
 801469e:	d109      	bne.n	80146b4 <__libc_init_array+0x24>
 80146a0:	4d0b      	ldr	r5, [pc, #44]	; (80146d0 <__libc_init_array+0x40>)
 80146a2:	2600      	movs	r6, #0
 80146a4:	4c0b      	ldr	r4, [pc, #44]	; (80146d4 <__libc_init_array+0x44>)
 80146a6:	f000 fd5d 	bl	8015164 <_init>
 80146aa:	1b64      	subs	r4, r4, r5
 80146ac:	10a4      	asrs	r4, r4, #2
 80146ae:	42a6      	cmp	r6, r4
 80146b0:	d105      	bne.n	80146be <__libc_init_array+0x2e>
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80146b8:	3601      	adds	r6, #1
 80146ba:	4798      	blx	r3
 80146bc:	e7ee      	b.n	801469c <__libc_init_array+0xc>
 80146be:	f855 3b04 	ldr.w	r3, [r5], #4
 80146c2:	3601      	adds	r6, #1
 80146c4:	4798      	blx	r3
 80146c6:	e7f2      	b.n	80146ae <__libc_init_array+0x1e>
 80146c8:	08015640 	.word	0x08015640
 80146cc:	08015640 	.word	0x08015640
 80146d0:	08015640 	.word	0x08015640
 80146d4:	08015644 	.word	0x08015644

080146d8 <memset>:
 80146d8:	4402      	add	r2, r0
 80146da:	4603      	mov	r3, r0
 80146dc:	4293      	cmp	r3, r2
 80146de:	d100      	bne.n	80146e2 <memset+0xa>
 80146e0:	4770      	bx	lr
 80146e2:	f803 1b01 	strb.w	r1, [r3], #1
 80146e6:	e7f9      	b.n	80146dc <memset+0x4>

080146e8 <sniprintf>:
 80146e8:	b40c      	push	{r2, r3}
 80146ea:	4b18      	ldr	r3, [pc, #96]	; (801474c <sniprintf+0x64>)
 80146ec:	b530      	push	{r4, r5, lr}
 80146ee:	1e0c      	subs	r4, r1, #0
 80146f0:	b09d      	sub	sp, #116	; 0x74
 80146f2:	681d      	ldr	r5, [r3, #0]
 80146f4:	da08      	bge.n	8014708 <sniprintf+0x20>
 80146f6:	238b      	movs	r3, #139	; 0x8b
 80146f8:	f04f 30ff 	mov.w	r0, #4294967295
 80146fc:	602b      	str	r3, [r5, #0]
 80146fe:	b01d      	add	sp, #116	; 0x74
 8014700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014704:	b002      	add	sp, #8
 8014706:	4770      	bx	lr
 8014708:	f44f 7302 	mov.w	r3, #520	; 0x208
 801470c:	9002      	str	r0, [sp, #8]
 801470e:	9006      	str	r0, [sp, #24]
 8014710:	a902      	add	r1, sp, #8
 8014712:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014716:	bf14      	ite	ne
 8014718:	f104 33ff 	addne.w	r3, r4, #4294967295
 801471c:	4623      	moveq	r3, r4
 801471e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014720:	4628      	mov	r0, r5
 8014722:	9304      	str	r3, [sp, #16]
 8014724:	9307      	str	r3, [sp, #28]
 8014726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801472a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801472e:	ab21      	add	r3, sp, #132	; 0x84
 8014730:	9301      	str	r3, [sp, #4]
 8014732:	f000 f915 	bl	8014960 <_svfiprintf_r>
 8014736:	1c43      	adds	r3, r0, #1
 8014738:	bfbc      	itt	lt
 801473a:	238b      	movlt	r3, #139	; 0x8b
 801473c:	602b      	strlt	r3, [r5, #0]
 801473e:	2c00      	cmp	r4, #0
 8014740:	d0dd      	beq.n	80146fe <sniprintf+0x16>
 8014742:	9b02      	ldr	r3, [sp, #8]
 8014744:	2200      	movs	r2, #0
 8014746:	701a      	strb	r2, [r3, #0]
 8014748:	e7d9      	b.n	80146fe <sniprintf+0x16>
 801474a:	bf00      	nop
 801474c:	20000154 	.word	0x20000154

08014750 <siprintf>:
 8014750:	b40e      	push	{r1, r2, r3}
 8014752:	b500      	push	{lr}
 8014754:	b09c      	sub	sp, #112	; 0x70
 8014756:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801475a:	ab1d      	add	r3, sp, #116	; 0x74
 801475c:	9002      	str	r0, [sp, #8]
 801475e:	9006      	str	r0, [sp, #24]
 8014760:	9107      	str	r1, [sp, #28]
 8014762:	9104      	str	r1, [sp, #16]
 8014764:	4808      	ldr	r0, [pc, #32]	; (8014788 <siprintf+0x38>)
 8014766:	4909      	ldr	r1, [pc, #36]	; (801478c <siprintf+0x3c>)
 8014768:	f853 2b04 	ldr.w	r2, [r3], #4
 801476c:	9105      	str	r1, [sp, #20]
 801476e:	a902      	add	r1, sp, #8
 8014770:	6800      	ldr	r0, [r0, #0]
 8014772:	9301      	str	r3, [sp, #4]
 8014774:	f000 f8f4 	bl	8014960 <_svfiprintf_r>
 8014778:	9b02      	ldr	r3, [sp, #8]
 801477a:	2200      	movs	r2, #0
 801477c:	701a      	strb	r2, [r3, #0]
 801477e:	b01c      	add	sp, #112	; 0x70
 8014780:	f85d eb04 	ldr.w	lr, [sp], #4
 8014784:	b003      	add	sp, #12
 8014786:	4770      	bx	lr
 8014788:	20000154 	.word	0x20000154
 801478c:	ffff0208 	.word	0xffff0208

08014790 <_strtol_l.constprop.0>:
 8014790:	2b01      	cmp	r3, #1
 8014792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014796:	d001      	beq.n	801479c <_strtol_l.constprop.0+0xc>
 8014798:	2b24      	cmp	r3, #36	; 0x24
 801479a:	d906      	bls.n	80147aa <_strtol_l.constprop.0+0x1a>
 801479c:	f7ff ff72 	bl	8014684 <__errno>
 80147a0:	2316      	movs	r3, #22
 80147a2:	6003      	str	r3, [r0, #0]
 80147a4:	2000      	movs	r0, #0
 80147a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147aa:	460d      	mov	r5, r1
 80147ac:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8014890 <_strtol_l.constprop.0+0x100>
 80147b0:	462e      	mov	r6, r5
 80147b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80147ba:	f017 0708 	ands.w	r7, r7, #8
 80147be:	d1f7      	bne.n	80147b0 <_strtol_l.constprop.0+0x20>
 80147c0:	2c2d      	cmp	r4, #45	; 0x2d
 80147c2:	d132      	bne.n	801482a <_strtol_l.constprop.0+0x9a>
 80147c4:	782c      	ldrb	r4, [r5, #0]
 80147c6:	2701      	movs	r7, #1
 80147c8:	1cb5      	adds	r5, r6, #2
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d05b      	beq.n	8014886 <_strtol_l.constprop.0+0xf6>
 80147ce:	2b10      	cmp	r3, #16
 80147d0:	d109      	bne.n	80147e6 <_strtol_l.constprop.0+0x56>
 80147d2:	2c30      	cmp	r4, #48	; 0x30
 80147d4:	d107      	bne.n	80147e6 <_strtol_l.constprop.0+0x56>
 80147d6:	782c      	ldrb	r4, [r5, #0]
 80147d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80147dc:	2c58      	cmp	r4, #88	; 0x58
 80147de:	d14d      	bne.n	801487c <_strtol_l.constprop.0+0xec>
 80147e0:	786c      	ldrb	r4, [r5, #1]
 80147e2:	2310      	movs	r3, #16
 80147e4:	3502      	adds	r5, #2
 80147e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80147ea:	f04f 0c00 	mov.w	ip, #0
 80147ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80147f2:	4666      	mov	r6, ip
 80147f4:	fbb8 f9f3 	udiv	r9, r8, r3
 80147f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80147fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014800:	f1be 0f09 	cmp.w	lr, #9
 8014804:	d816      	bhi.n	8014834 <_strtol_l.constprop.0+0xa4>
 8014806:	4674      	mov	r4, lr
 8014808:	42a3      	cmp	r3, r4
 801480a:	dd24      	ble.n	8014856 <_strtol_l.constprop.0+0xc6>
 801480c:	f1bc 0f00 	cmp.w	ip, #0
 8014810:	db1e      	blt.n	8014850 <_strtol_l.constprop.0+0xc0>
 8014812:	45b1      	cmp	r9, r6
 8014814:	d31c      	bcc.n	8014850 <_strtol_l.constprop.0+0xc0>
 8014816:	d101      	bne.n	801481c <_strtol_l.constprop.0+0x8c>
 8014818:	45a2      	cmp	sl, r4
 801481a:	db19      	blt.n	8014850 <_strtol_l.constprop.0+0xc0>
 801481c:	fb06 4603 	mla	r6, r6, r3, r4
 8014820:	f04f 0c01 	mov.w	ip, #1
 8014824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014828:	e7e8      	b.n	80147fc <_strtol_l.constprop.0+0x6c>
 801482a:	2c2b      	cmp	r4, #43	; 0x2b
 801482c:	bf04      	itt	eq
 801482e:	782c      	ldrbeq	r4, [r5, #0]
 8014830:	1cb5      	addeq	r5, r6, #2
 8014832:	e7ca      	b.n	80147ca <_strtol_l.constprop.0+0x3a>
 8014834:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014838:	f1be 0f19 	cmp.w	lr, #25
 801483c:	d801      	bhi.n	8014842 <_strtol_l.constprop.0+0xb2>
 801483e:	3c37      	subs	r4, #55	; 0x37
 8014840:	e7e2      	b.n	8014808 <_strtol_l.constprop.0+0x78>
 8014842:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014846:	f1be 0f19 	cmp.w	lr, #25
 801484a:	d804      	bhi.n	8014856 <_strtol_l.constprop.0+0xc6>
 801484c:	3c57      	subs	r4, #87	; 0x57
 801484e:	e7db      	b.n	8014808 <_strtol_l.constprop.0+0x78>
 8014850:	f04f 3cff 	mov.w	ip, #4294967295
 8014854:	e7e6      	b.n	8014824 <_strtol_l.constprop.0+0x94>
 8014856:	f1bc 0f00 	cmp.w	ip, #0
 801485a:	da05      	bge.n	8014868 <_strtol_l.constprop.0+0xd8>
 801485c:	2322      	movs	r3, #34	; 0x22
 801485e:	4646      	mov	r6, r8
 8014860:	6003      	str	r3, [r0, #0]
 8014862:	b942      	cbnz	r2, 8014876 <_strtol_l.constprop.0+0xe6>
 8014864:	4630      	mov	r0, r6
 8014866:	e79e      	b.n	80147a6 <_strtol_l.constprop.0+0x16>
 8014868:	b107      	cbz	r7, 801486c <_strtol_l.constprop.0+0xdc>
 801486a:	4276      	negs	r6, r6
 801486c:	2a00      	cmp	r2, #0
 801486e:	d0f9      	beq.n	8014864 <_strtol_l.constprop.0+0xd4>
 8014870:	f1bc 0f00 	cmp.w	ip, #0
 8014874:	d000      	beq.n	8014878 <_strtol_l.constprop.0+0xe8>
 8014876:	1e69      	subs	r1, r5, #1
 8014878:	6011      	str	r1, [r2, #0]
 801487a:	e7f3      	b.n	8014864 <_strtol_l.constprop.0+0xd4>
 801487c:	2430      	movs	r4, #48	; 0x30
 801487e:	2b00      	cmp	r3, #0
 8014880:	d1b1      	bne.n	80147e6 <_strtol_l.constprop.0+0x56>
 8014882:	2308      	movs	r3, #8
 8014884:	e7af      	b.n	80147e6 <_strtol_l.constprop.0+0x56>
 8014886:	2c30      	cmp	r4, #48	; 0x30
 8014888:	d0a5      	beq.n	80147d6 <_strtol_l.constprop.0+0x46>
 801488a:	230a      	movs	r3, #10
 801488c:	e7ab      	b.n	80147e6 <_strtol_l.constprop.0+0x56>
 801488e:	bf00      	nop
 8014890:	08015505 	.word	0x08015505

08014894 <strtol>:
 8014894:	4613      	mov	r3, r2
 8014896:	460a      	mov	r2, r1
 8014898:	4601      	mov	r1, r0
 801489a:	4802      	ldr	r0, [pc, #8]	; (80148a4 <strtol+0x10>)
 801489c:	6800      	ldr	r0, [r0, #0]
 801489e:	f7ff bf77 	b.w	8014790 <_strtol_l.constprop.0>
 80148a2:	bf00      	nop
 80148a4:	20000154 	.word	0x20000154

080148a8 <__ssputs_r>:
 80148a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148ac:	688e      	ldr	r6, [r1, #8]
 80148ae:	4682      	mov	sl, r0
 80148b0:	460c      	mov	r4, r1
 80148b2:	4690      	mov	r8, r2
 80148b4:	429e      	cmp	r6, r3
 80148b6:	461f      	mov	r7, r3
 80148b8:	d838      	bhi.n	801492c <__ssputs_r+0x84>
 80148ba:	898a      	ldrh	r2, [r1, #12]
 80148bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80148c0:	d032      	beq.n	8014928 <__ssputs_r+0x80>
 80148c2:	6825      	ldr	r5, [r4, #0]
 80148c4:	3301      	adds	r3, #1
 80148c6:	6909      	ldr	r1, [r1, #16]
 80148c8:	eba5 0901 	sub.w	r9, r5, r1
 80148cc:	6965      	ldr	r5, [r4, #20]
 80148ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80148d2:	444b      	add	r3, r9
 80148d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80148d8:	106d      	asrs	r5, r5, #1
 80148da:	429d      	cmp	r5, r3
 80148dc:	bf38      	it	cc
 80148de:	461d      	movcc	r5, r3
 80148e0:	0553      	lsls	r3, r2, #21
 80148e2:	d531      	bpl.n	8014948 <__ssputs_r+0xa0>
 80148e4:	4629      	mov	r1, r5
 80148e6:	f000 fb73 	bl	8014fd0 <_malloc_r>
 80148ea:	4606      	mov	r6, r0
 80148ec:	b950      	cbnz	r0, 8014904 <__ssputs_r+0x5c>
 80148ee:	230c      	movs	r3, #12
 80148f0:	f04f 30ff 	mov.w	r0, #4294967295
 80148f4:	f8ca 3000 	str.w	r3, [sl]
 80148f8:	89a3      	ldrh	r3, [r4, #12]
 80148fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148fe:	81a3      	strh	r3, [r4, #12]
 8014900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014904:	464a      	mov	r2, r9
 8014906:	6921      	ldr	r1, [r4, #16]
 8014908:	f000 face 	bl	8014ea8 <memcpy>
 801490c:	89a3      	ldrh	r3, [r4, #12]
 801490e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014916:	81a3      	strh	r3, [r4, #12]
 8014918:	6126      	str	r6, [r4, #16]
 801491a:	444e      	add	r6, r9
 801491c:	6165      	str	r5, [r4, #20]
 801491e:	eba5 0509 	sub.w	r5, r5, r9
 8014922:	6026      	str	r6, [r4, #0]
 8014924:	463e      	mov	r6, r7
 8014926:	60a5      	str	r5, [r4, #8]
 8014928:	42be      	cmp	r6, r7
 801492a:	d900      	bls.n	801492e <__ssputs_r+0x86>
 801492c:	463e      	mov	r6, r7
 801492e:	4632      	mov	r2, r6
 8014930:	4641      	mov	r1, r8
 8014932:	6820      	ldr	r0, [r4, #0]
 8014934:	f000 fac5 	bl	8014ec2 <memmove>
 8014938:	68a3      	ldr	r3, [r4, #8]
 801493a:	2000      	movs	r0, #0
 801493c:	1b9b      	subs	r3, r3, r6
 801493e:	60a3      	str	r3, [r4, #8]
 8014940:	6823      	ldr	r3, [r4, #0]
 8014942:	4433      	add	r3, r6
 8014944:	6023      	str	r3, [r4, #0]
 8014946:	e7db      	b.n	8014900 <__ssputs_r+0x58>
 8014948:	462a      	mov	r2, r5
 801494a:	f000 fbb5 	bl	80150b8 <_realloc_r>
 801494e:	4606      	mov	r6, r0
 8014950:	2800      	cmp	r0, #0
 8014952:	d1e1      	bne.n	8014918 <__ssputs_r+0x70>
 8014954:	6921      	ldr	r1, [r4, #16]
 8014956:	4650      	mov	r0, sl
 8014958:	f000 face 	bl	8014ef8 <_free_r>
 801495c:	e7c7      	b.n	80148ee <__ssputs_r+0x46>
	...

08014960 <_svfiprintf_r>:
 8014960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014964:	4698      	mov	r8, r3
 8014966:	898b      	ldrh	r3, [r1, #12]
 8014968:	b09d      	sub	sp, #116	; 0x74
 801496a:	4607      	mov	r7, r0
 801496c:	061b      	lsls	r3, r3, #24
 801496e:	460d      	mov	r5, r1
 8014970:	4614      	mov	r4, r2
 8014972:	d50e      	bpl.n	8014992 <_svfiprintf_r+0x32>
 8014974:	690b      	ldr	r3, [r1, #16]
 8014976:	b963      	cbnz	r3, 8014992 <_svfiprintf_r+0x32>
 8014978:	2140      	movs	r1, #64	; 0x40
 801497a:	f000 fb29 	bl	8014fd0 <_malloc_r>
 801497e:	6028      	str	r0, [r5, #0]
 8014980:	6128      	str	r0, [r5, #16]
 8014982:	b920      	cbnz	r0, 801498e <_svfiprintf_r+0x2e>
 8014984:	230c      	movs	r3, #12
 8014986:	603b      	str	r3, [r7, #0]
 8014988:	f04f 30ff 	mov.w	r0, #4294967295
 801498c:	e0d1      	b.n	8014b32 <_svfiprintf_r+0x1d2>
 801498e:	2340      	movs	r3, #64	; 0x40
 8014990:	616b      	str	r3, [r5, #20]
 8014992:	2300      	movs	r3, #0
 8014994:	f8cd 800c 	str.w	r8, [sp, #12]
 8014998:	f04f 0901 	mov.w	r9, #1
 801499c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8014b4c <_svfiprintf_r+0x1ec>
 80149a0:	9309      	str	r3, [sp, #36]	; 0x24
 80149a2:	2320      	movs	r3, #32
 80149a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149a8:	2330      	movs	r3, #48	; 0x30
 80149aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149ae:	4623      	mov	r3, r4
 80149b0:	469a      	mov	sl, r3
 80149b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149b6:	b10a      	cbz	r2, 80149bc <_svfiprintf_r+0x5c>
 80149b8:	2a25      	cmp	r2, #37	; 0x25
 80149ba:	d1f9      	bne.n	80149b0 <_svfiprintf_r+0x50>
 80149bc:	ebba 0b04 	subs.w	fp, sl, r4
 80149c0:	d00b      	beq.n	80149da <_svfiprintf_r+0x7a>
 80149c2:	465b      	mov	r3, fp
 80149c4:	4622      	mov	r2, r4
 80149c6:	4629      	mov	r1, r5
 80149c8:	4638      	mov	r0, r7
 80149ca:	f7ff ff6d 	bl	80148a8 <__ssputs_r>
 80149ce:	3001      	adds	r0, #1
 80149d0:	f000 80aa 	beq.w	8014b28 <_svfiprintf_r+0x1c8>
 80149d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149d6:	445a      	add	r2, fp
 80149d8:	9209      	str	r2, [sp, #36]	; 0x24
 80149da:	f89a 3000 	ldrb.w	r3, [sl]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	f000 80a2 	beq.w	8014b28 <_svfiprintf_r+0x1c8>
 80149e4:	2300      	movs	r3, #0
 80149e6:	f04f 32ff 	mov.w	r2, #4294967295
 80149ea:	f10a 0a01 	add.w	sl, sl, #1
 80149ee:	9304      	str	r3, [sp, #16]
 80149f0:	9307      	str	r3, [sp, #28]
 80149f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149f6:	931a      	str	r3, [sp, #104]	; 0x68
 80149f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149fc:	4654      	mov	r4, sl
 80149fe:	2205      	movs	r2, #5
 8014a00:	4852      	ldr	r0, [pc, #328]	; (8014b4c <_svfiprintf_r+0x1ec>)
 8014a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a06:	f000 fa41 	bl	8014e8c <memchr>
 8014a0a:	9a04      	ldr	r2, [sp, #16]
 8014a0c:	b9d8      	cbnz	r0, 8014a46 <_svfiprintf_r+0xe6>
 8014a0e:	06d0      	lsls	r0, r2, #27
 8014a10:	bf44      	itt	mi
 8014a12:	2320      	movmi	r3, #32
 8014a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a18:	0711      	lsls	r1, r2, #28
 8014a1a:	bf44      	itt	mi
 8014a1c:	232b      	movmi	r3, #43	; 0x2b
 8014a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a22:	f89a 3000 	ldrb.w	r3, [sl]
 8014a26:	2b2a      	cmp	r3, #42	; 0x2a
 8014a28:	d015      	beq.n	8014a56 <_svfiprintf_r+0xf6>
 8014a2a:	9a07      	ldr	r2, [sp, #28]
 8014a2c:	4654      	mov	r4, sl
 8014a2e:	2000      	movs	r0, #0
 8014a30:	f04f 0c0a 	mov.w	ip, #10
 8014a34:	4621      	mov	r1, r4
 8014a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a3a:	3b30      	subs	r3, #48	; 0x30
 8014a3c:	2b09      	cmp	r3, #9
 8014a3e:	d94e      	bls.n	8014ade <_svfiprintf_r+0x17e>
 8014a40:	b1b0      	cbz	r0, 8014a70 <_svfiprintf_r+0x110>
 8014a42:	9207      	str	r2, [sp, #28]
 8014a44:	e014      	b.n	8014a70 <_svfiprintf_r+0x110>
 8014a46:	eba0 0308 	sub.w	r3, r0, r8
 8014a4a:	46a2      	mov	sl, r4
 8014a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8014a50:	4313      	orrs	r3, r2
 8014a52:	9304      	str	r3, [sp, #16]
 8014a54:	e7d2      	b.n	80149fc <_svfiprintf_r+0x9c>
 8014a56:	9b03      	ldr	r3, [sp, #12]
 8014a58:	1d19      	adds	r1, r3, #4
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	9103      	str	r1, [sp, #12]
 8014a60:	bfbb      	ittet	lt
 8014a62:	425b      	neglt	r3, r3
 8014a64:	f042 0202 	orrlt.w	r2, r2, #2
 8014a68:	9307      	strge	r3, [sp, #28]
 8014a6a:	9307      	strlt	r3, [sp, #28]
 8014a6c:	bfb8      	it	lt
 8014a6e:	9204      	strlt	r2, [sp, #16]
 8014a70:	7823      	ldrb	r3, [r4, #0]
 8014a72:	2b2e      	cmp	r3, #46	; 0x2e
 8014a74:	d10c      	bne.n	8014a90 <_svfiprintf_r+0x130>
 8014a76:	7863      	ldrb	r3, [r4, #1]
 8014a78:	2b2a      	cmp	r3, #42	; 0x2a
 8014a7a:	d135      	bne.n	8014ae8 <_svfiprintf_r+0x188>
 8014a7c:	9b03      	ldr	r3, [sp, #12]
 8014a7e:	3402      	adds	r4, #2
 8014a80:	1d1a      	adds	r2, r3, #4
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	9203      	str	r2, [sp, #12]
 8014a88:	bfb8      	it	lt
 8014a8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a8e:	9305      	str	r3, [sp, #20]
 8014a90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014b5c <_svfiprintf_r+0x1fc>
 8014a94:	2203      	movs	r2, #3
 8014a96:	7821      	ldrb	r1, [r4, #0]
 8014a98:	4650      	mov	r0, sl
 8014a9a:	f000 f9f7 	bl	8014e8c <memchr>
 8014a9e:	b140      	cbz	r0, 8014ab2 <_svfiprintf_r+0x152>
 8014aa0:	2340      	movs	r3, #64	; 0x40
 8014aa2:	eba0 000a 	sub.w	r0, r0, sl
 8014aa6:	3401      	adds	r4, #1
 8014aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8014aac:	9b04      	ldr	r3, [sp, #16]
 8014aae:	4303      	orrs	r3, r0
 8014ab0:	9304      	str	r3, [sp, #16]
 8014ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ab6:	2206      	movs	r2, #6
 8014ab8:	4825      	ldr	r0, [pc, #148]	; (8014b50 <_svfiprintf_r+0x1f0>)
 8014aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014abe:	f000 f9e5 	bl	8014e8c <memchr>
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	d038      	beq.n	8014b38 <_svfiprintf_r+0x1d8>
 8014ac6:	4b23      	ldr	r3, [pc, #140]	; (8014b54 <_svfiprintf_r+0x1f4>)
 8014ac8:	bb1b      	cbnz	r3, 8014b12 <_svfiprintf_r+0x1b2>
 8014aca:	9b03      	ldr	r3, [sp, #12]
 8014acc:	3307      	adds	r3, #7
 8014ace:	f023 0307 	bic.w	r3, r3, #7
 8014ad2:	3308      	adds	r3, #8
 8014ad4:	9303      	str	r3, [sp, #12]
 8014ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ad8:	4433      	add	r3, r6
 8014ada:	9309      	str	r3, [sp, #36]	; 0x24
 8014adc:	e767      	b.n	80149ae <_svfiprintf_r+0x4e>
 8014ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ae2:	460c      	mov	r4, r1
 8014ae4:	2001      	movs	r0, #1
 8014ae6:	e7a5      	b.n	8014a34 <_svfiprintf_r+0xd4>
 8014ae8:	2300      	movs	r3, #0
 8014aea:	3401      	adds	r4, #1
 8014aec:	f04f 0c0a 	mov.w	ip, #10
 8014af0:	4619      	mov	r1, r3
 8014af2:	9305      	str	r3, [sp, #20]
 8014af4:	4620      	mov	r0, r4
 8014af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014afa:	3a30      	subs	r2, #48	; 0x30
 8014afc:	2a09      	cmp	r2, #9
 8014afe:	d903      	bls.n	8014b08 <_svfiprintf_r+0x1a8>
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d0c5      	beq.n	8014a90 <_svfiprintf_r+0x130>
 8014b04:	9105      	str	r1, [sp, #20]
 8014b06:	e7c3      	b.n	8014a90 <_svfiprintf_r+0x130>
 8014b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	2301      	movs	r3, #1
 8014b10:	e7f0      	b.n	8014af4 <_svfiprintf_r+0x194>
 8014b12:	ab03      	add	r3, sp, #12
 8014b14:	462a      	mov	r2, r5
 8014b16:	a904      	add	r1, sp, #16
 8014b18:	4638      	mov	r0, r7
 8014b1a:	9300      	str	r3, [sp, #0]
 8014b1c:	4b0e      	ldr	r3, [pc, #56]	; (8014b58 <_svfiprintf_r+0x1f8>)
 8014b1e:	e000      	b.n	8014b22 <_svfiprintf_r+0x1c2>
 8014b20:	bf00      	nop
 8014b22:	1c42      	adds	r2, r0, #1
 8014b24:	4606      	mov	r6, r0
 8014b26:	d1d6      	bne.n	8014ad6 <_svfiprintf_r+0x176>
 8014b28:	89ab      	ldrh	r3, [r5, #12]
 8014b2a:	065b      	lsls	r3, r3, #25
 8014b2c:	f53f af2c 	bmi.w	8014988 <_svfiprintf_r+0x28>
 8014b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b32:	b01d      	add	sp, #116	; 0x74
 8014b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b38:	ab03      	add	r3, sp, #12
 8014b3a:	462a      	mov	r2, r5
 8014b3c:	a904      	add	r1, sp, #16
 8014b3e:	4638      	mov	r0, r7
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	4b05      	ldr	r3, [pc, #20]	; (8014b58 <_svfiprintf_r+0x1f8>)
 8014b44:	f000 f87c 	bl	8014c40 <_printf_i>
 8014b48:	e7eb      	b.n	8014b22 <_svfiprintf_r+0x1c2>
 8014b4a:	bf00      	nop
 8014b4c:	08015605 	.word	0x08015605
 8014b50:	0801560f 	.word	0x0801560f
 8014b54:	00000000 	.word	0x00000000
 8014b58:	080148a9 	.word	0x080148a9
 8014b5c:	0801560b 	.word	0x0801560b

08014b60 <_printf_common>:
 8014b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b64:	4616      	mov	r6, r2
 8014b66:	4699      	mov	r9, r3
 8014b68:	688a      	ldr	r2, [r1, #8]
 8014b6a:	4607      	mov	r7, r0
 8014b6c:	690b      	ldr	r3, [r1, #16]
 8014b6e:	460c      	mov	r4, r1
 8014b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b74:	4293      	cmp	r3, r2
 8014b76:	bfb8      	it	lt
 8014b78:	4613      	movlt	r3, r2
 8014b7a:	6033      	str	r3, [r6, #0]
 8014b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b80:	b10a      	cbz	r2, 8014b86 <_printf_common+0x26>
 8014b82:	3301      	adds	r3, #1
 8014b84:	6033      	str	r3, [r6, #0]
 8014b86:	6823      	ldr	r3, [r4, #0]
 8014b88:	0699      	lsls	r1, r3, #26
 8014b8a:	bf42      	ittt	mi
 8014b8c:	6833      	ldrmi	r3, [r6, #0]
 8014b8e:	3302      	addmi	r3, #2
 8014b90:	6033      	strmi	r3, [r6, #0]
 8014b92:	6825      	ldr	r5, [r4, #0]
 8014b94:	f015 0506 	ands.w	r5, r5, #6
 8014b98:	d106      	bne.n	8014ba8 <_printf_common+0x48>
 8014b9a:	f104 0a19 	add.w	sl, r4, #25
 8014b9e:	68e3      	ldr	r3, [r4, #12]
 8014ba0:	6832      	ldr	r2, [r6, #0]
 8014ba2:	1a9b      	subs	r3, r3, r2
 8014ba4:	42ab      	cmp	r3, r5
 8014ba6:	dc29      	bgt.n	8014bfc <_printf_common+0x9c>
 8014ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014bac:	1e13      	subs	r3, r2, #0
 8014bae:	6822      	ldr	r2, [r4, #0]
 8014bb0:	bf18      	it	ne
 8014bb2:	2301      	movne	r3, #1
 8014bb4:	0692      	lsls	r2, r2, #26
 8014bb6:	d42e      	bmi.n	8014c16 <_printf_common+0xb6>
 8014bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014bbc:	4649      	mov	r1, r9
 8014bbe:	4638      	mov	r0, r7
 8014bc0:	47c0      	blx	r8
 8014bc2:	3001      	adds	r0, #1
 8014bc4:	d021      	beq.n	8014c0a <_printf_common+0xaa>
 8014bc6:	6823      	ldr	r3, [r4, #0]
 8014bc8:	341a      	adds	r4, #26
 8014bca:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8014bce:	f003 0306 	and.w	r3, r3, #6
 8014bd2:	6832      	ldr	r2, [r6, #0]
 8014bd4:	2600      	movs	r6, #0
 8014bd6:	2b04      	cmp	r3, #4
 8014bd8:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8014bdc:	bf08      	it	eq
 8014bde:	1aad      	subeq	r5, r5, r2
 8014be0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8014be4:	bf14      	ite	ne
 8014be6:	2500      	movne	r5, #0
 8014be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bec:	4293      	cmp	r3, r2
 8014bee:	bfc4      	itt	gt
 8014bf0:	1a9b      	subgt	r3, r3, r2
 8014bf2:	18ed      	addgt	r5, r5, r3
 8014bf4:	42b5      	cmp	r5, r6
 8014bf6:	d11a      	bne.n	8014c2e <_printf_common+0xce>
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	e008      	b.n	8014c0e <_printf_common+0xae>
 8014bfc:	2301      	movs	r3, #1
 8014bfe:	4652      	mov	r2, sl
 8014c00:	4649      	mov	r1, r9
 8014c02:	4638      	mov	r0, r7
 8014c04:	47c0      	blx	r8
 8014c06:	3001      	adds	r0, #1
 8014c08:	d103      	bne.n	8014c12 <_printf_common+0xb2>
 8014c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c12:	3501      	adds	r5, #1
 8014c14:	e7c3      	b.n	8014b9e <_printf_common+0x3e>
 8014c16:	18e1      	adds	r1, r4, r3
 8014c18:	1c5a      	adds	r2, r3, #1
 8014c1a:	2030      	movs	r0, #48	; 0x30
 8014c1c:	3302      	adds	r3, #2
 8014c1e:	4422      	add	r2, r4
 8014c20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c2c:	e7c4      	b.n	8014bb8 <_printf_common+0x58>
 8014c2e:	2301      	movs	r3, #1
 8014c30:	4622      	mov	r2, r4
 8014c32:	4649      	mov	r1, r9
 8014c34:	4638      	mov	r0, r7
 8014c36:	47c0      	blx	r8
 8014c38:	3001      	adds	r0, #1
 8014c3a:	d0e6      	beq.n	8014c0a <_printf_common+0xaa>
 8014c3c:	3601      	adds	r6, #1
 8014c3e:	e7d9      	b.n	8014bf4 <_printf_common+0x94>

08014c40 <_printf_i>:
 8014c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c44:	7e0f      	ldrb	r7, [r1, #24]
 8014c46:	4691      	mov	r9, r2
 8014c48:	4680      	mov	r8, r0
 8014c4a:	460c      	mov	r4, r1
 8014c4c:	2f78      	cmp	r7, #120	; 0x78
 8014c4e:	469a      	mov	sl, r3
 8014c50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014c56:	d807      	bhi.n	8014c68 <_printf_i+0x28>
 8014c58:	2f62      	cmp	r7, #98	; 0x62
 8014c5a:	d80a      	bhi.n	8014c72 <_printf_i+0x32>
 8014c5c:	2f00      	cmp	r7, #0
 8014c5e:	f000 80d8 	beq.w	8014e12 <_printf_i+0x1d2>
 8014c62:	2f58      	cmp	r7, #88	; 0x58
 8014c64:	f000 80a3 	beq.w	8014dae <_printf_i+0x16e>
 8014c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014c70:	e03a      	b.n	8014ce8 <_printf_i+0xa8>
 8014c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014c76:	2b15      	cmp	r3, #21
 8014c78:	d8f6      	bhi.n	8014c68 <_printf_i+0x28>
 8014c7a:	a101      	add	r1, pc, #4	; (adr r1, 8014c80 <_printf_i+0x40>)
 8014c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c80:	08014cd9 	.word	0x08014cd9
 8014c84:	08014ced 	.word	0x08014ced
 8014c88:	08014c69 	.word	0x08014c69
 8014c8c:	08014c69 	.word	0x08014c69
 8014c90:	08014c69 	.word	0x08014c69
 8014c94:	08014c69 	.word	0x08014c69
 8014c98:	08014ced 	.word	0x08014ced
 8014c9c:	08014c69 	.word	0x08014c69
 8014ca0:	08014c69 	.word	0x08014c69
 8014ca4:	08014c69 	.word	0x08014c69
 8014ca8:	08014c69 	.word	0x08014c69
 8014cac:	08014df9 	.word	0x08014df9
 8014cb0:	08014d1d 	.word	0x08014d1d
 8014cb4:	08014ddb 	.word	0x08014ddb
 8014cb8:	08014c69 	.word	0x08014c69
 8014cbc:	08014c69 	.word	0x08014c69
 8014cc0:	08014e1b 	.word	0x08014e1b
 8014cc4:	08014c69 	.word	0x08014c69
 8014cc8:	08014d1d 	.word	0x08014d1d
 8014ccc:	08014c69 	.word	0x08014c69
 8014cd0:	08014c69 	.word	0x08014c69
 8014cd4:	08014de3 	.word	0x08014de3
 8014cd8:	682b      	ldr	r3, [r5, #0]
 8014cda:	1d1a      	adds	r2, r3, #4
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	602a      	str	r2, [r5, #0]
 8014ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014ce8:	2301      	movs	r3, #1
 8014cea:	e0a3      	b.n	8014e34 <_printf_i+0x1f4>
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	6829      	ldr	r1, [r5, #0]
 8014cf0:	0606      	lsls	r6, r0, #24
 8014cf2:	f101 0304 	add.w	r3, r1, #4
 8014cf6:	d50a      	bpl.n	8014d0e <_printf_i+0xce>
 8014cf8:	680e      	ldr	r6, [r1, #0]
 8014cfa:	602b      	str	r3, [r5, #0]
 8014cfc:	2e00      	cmp	r6, #0
 8014cfe:	da03      	bge.n	8014d08 <_printf_i+0xc8>
 8014d00:	232d      	movs	r3, #45	; 0x2d
 8014d02:	4276      	negs	r6, r6
 8014d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d08:	485e      	ldr	r0, [pc, #376]	; (8014e84 <_printf_i+0x244>)
 8014d0a:	230a      	movs	r3, #10
 8014d0c:	e019      	b.n	8014d42 <_printf_i+0x102>
 8014d0e:	680e      	ldr	r6, [r1, #0]
 8014d10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d14:	602b      	str	r3, [r5, #0]
 8014d16:	bf18      	it	ne
 8014d18:	b236      	sxthne	r6, r6
 8014d1a:	e7ef      	b.n	8014cfc <_printf_i+0xbc>
 8014d1c:	682b      	ldr	r3, [r5, #0]
 8014d1e:	6820      	ldr	r0, [r4, #0]
 8014d20:	1d19      	adds	r1, r3, #4
 8014d22:	6029      	str	r1, [r5, #0]
 8014d24:	0601      	lsls	r1, r0, #24
 8014d26:	d501      	bpl.n	8014d2c <_printf_i+0xec>
 8014d28:	681e      	ldr	r6, [r3, #0]
 8014d2a:	e002      	b.n	8014d32 <_printf_i+0xf2>
 8014d2c:	0646      	lsls	r6, r0, #25
 8014d2e:	d5fb      	bpl.n	8014d28 <_printf_i+0xe8>
 8014d30:	881e      	ldrh	r6, [r3, #0]
 8014d32:	2f6f      	cmp	r7, #111	; 0x6f
 8014d34:	4853      	ldr	r0, [pc, #332]	; (8014e84 <_printf_i+0x244>)
 8014d36:	bf0c      	ite	eq
 8014d38:	2308      	moveq	r3, #8
 8014d3a:	230a      	movne	r3, #10
 8014d3c:	2100      	movs	r1, #0
 8014d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d42:	6865      	ldr	r5, [r4, #4]
 8014d44:	2d00      	cmp	r5, #0
 8014d46:	60a5      	str	r5, [r4, #8]
 8014d48:	bfa2      	ittt	ge
 8014d4a:	6821      	ldrge	r1, [r4, #0]
 8014d4c:	f021 0104 	bicge.w	r1, r1, #4
 8014d50:	6021      	strge	r1, [r4, #0]
 8014d52:	b90e      	cbnz	r6, 8014d58 <_printf_i+0x118>
 8014d54:	2d00      	cmp	r5, #0
 8014d56:	d04d      	beq.n	8014df4 <_printf_i+0x1b4>
 8014d58:	4615      	mov	r5, r2
 8014d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8014d62:	5dc7      	ldrb	r7, [r0, r7]
 8014d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014d68:	4637      	mov	r7, r6
 8014d6a:	460e      	mov	r6, r1
 8014d6c:	42bb      	cmp	r3, r7
 8014d6e:	d9f4      	bls.n	8014d5a <_printf_i+0x11a>
 8014d70:	2b08      	cmp	r3, #8
 8014d72:	d10b      	bne.n	8014d8c <_printf_i+0x14c>
 8014d74:	6823      	ldr	r3, [r4, #0]
 8014d76:	07de      	lsls	r6, r3, #31
 8014d78:	d508      	bpl.n	8014d8c <_printf_i+0x14c>
 8014d7a:	6923      	ldr	r3, [r4, #16]
 8014d7c:	6861      	ldr	r1, [r4, #4]
 8014d7e:	4299      	cmp	r1, r3
 8014d80:	bfde      	ittt	le
 8014d82:	2330      	movle	r3, #48	; 0x30
 8014d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014d8c:	1b52      	subs	r2, r2, r5
 8014d8e:	6122      	str	r2, [r4, #16]
 8014d90:	464b      	mov	r3, r9
 8014d92:	aa03      	add	r2, sp, #12
 8014d94:	4621      	mov	r1, r4
 8014d96:	4640      	mov	r0, r8
 8014d98:	f8cd a000 	str.w	sl, [sp]
 8014d9c:	f7ff fee0 	bl	8014b60 <_printf_common>
 8014da0:	3001      	adds	r0, #1
 8014da2:	d14c      	bne.n	8014e3e <_printf_i+0x1fe>
 8014da4:	f04f 30ff 	mov.w	r0, #4294967295
 8014da8:	b004      	add	sp, #16
 8014daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dae:	4835      	ldr	r0, [pc, #212]	; (8014e84 <_printf_i+0x244>)
 8014db0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014db4:	6829      	ldr	r1, [r5, #0]
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	f851 6b04 	ldr.w	r6, [r1], #4
 8014dbc:	6029      	str	r1, [r5, #0]
 8014dbe:	061d      	lsls	r5, r3, #24
 8014dc0:	d514      	bpl.n	8014dec <_printf_i+0x1ac>
 8014dc2:	07df      	lsls	r7, r3, #31
 8014dc4:	bf44      	itt	mi
 8014dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8014dca:	6023      	strmi	r3, [r4, #0]
 8014dcc:	b91e      	cbnz	r6, 8014dd6 <_printf_i+0x196>
 8014dce:	6823      	ldr	r3, [r4, #0]
 8014dd0:	f023 0320 	bic.w	r3, r3, #32
 8014dd4:	6023      	str	r3, [r4, #0]
 8014dd6:	2310      	movs	r3, #16
 8014dd8:	e7b0      	b.n	8014d3c <_printf_i+0xfc>
 8014dda:	6823      	ldr	r3, [r4, #0]
 8014ddc:	f043 0320 	orr.w	r3, r3, #32
 8014de0:	6023      	str	r3, [r4, #0]
 8014de2:	2378      	movs	r3, #120	; 0x78
 8014de4:	4828      	ldr	r0, [pc, #160]	; (8014e88 <_printf_i+0x248>)
 8014de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014dea:	e7e3      	b.n	8014db4 <_printf_i+0x174>
 8014dec:	0659      	lsls	r1, r3, #25
 8014dee:	bf48      	it	mi
 8014df0:	b2b6      	uxthmi	r6, r6
 8014df2:	e7e6      	b.n	8014dc2 <_printf_i+0x182>
 8014df4:	4615      	mov	r5, r2
 8014df6:	e7bb      	b.n	8014d70 <_printf_i+0x130>
 8014df8:	682b      	ldr	r3, [r5, #0]
 8014dfa:	6826      	ldr	r6, [r4, #0]
 8014dfc:	1d18      	adds	r0, r3, #4
 8014dfe:	6961      	ldr	r1, [r4, #20]
 8014e00:	6028      	str	r0, [r5, #0]
 8014e02:	0635      	lsls	r5, r6, #24
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	d501      	bpl.n	8014e0c <_printf_i+0x1cc>
 8014e08:	6019      	str	r1, [r3, #0]
 8014e0a:	e002      	b.n	8014e12 <_printf_i+0x1d2>
 8014e0c:	0670      	lsls	r0, r6, #25
 8014e0e:	d5fb      	bpl.n	8014e08 <_printf_i+0x1c8>
 8014e10:	8019      	strh	r1, [r3, #0]
 8014e12:	2300      	movs	r3, #0
 8014e14:	4615      	mov	r5, r2
 8014e16:	6123      	str	r3, [r4, #16]
 8014e18:	e7ba      	b.n	8014d90 <_printf_i+0x150>
 8014e1a:	682b      	ldr	r3, [r5, #0]
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	1d1a      	adds	r2, r3, #4
 8014e20:	602a      	str	r2, [r5, #0]
 8014e22:	681d      	ldr	r5, [r3, #0]
 8014e24:	6862      	ldr	r2, [r4, #4]
 8014e26:	4628      	mov	r0, r5
 8014e28:	f000 f830 	bl	8014e8c <memchr>
 8014e2c:	b108      	cbz	r0, 8014e32 <_printf_i+0x1f2>
 8014e2e:	1b40      	subs	r0, r0, r5
 8014e30:	6060      	str	r0, [r4, #4]
 8014e32:	6863      	ldr	r3, [r4, #4]
 8014e34:	6123      	str	r3, [r4, #16]
 8014e36:	2300      	movs	r3, #0
 8014e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e3c:	e7a8      	b.n	8014d90 <_printf_i+0x150>
 8014e3e:	6923      	ldr	r3, [r4, #16]
 8014e40:	462a      	mov	r2, r5
 8014e42:	4649      	mov	r1, r9
 8014e44:	4640      	mov	r0, r8
 8014e46:	47d0      	blx	sl
 8014e48:	3001      	adds	r0, #1
 8014e4a:	d0ab      	beq.n	8014da4 <_printf_i+0x164>
 8014e4c:	6823      	ldr	r3, [r4, #0]
 8014e4e:	079b      	lsls	r3, r3, #30
 8014e50:	d413      	bmi.n	8014e7a <_printf_i+0x23a>
 8014e52:	68e0      	ldr	r0, [r4, #12]
 8014e54:	9b03      	ldr	r3, [sp, #12]
 8014e56:	4298      	cmp	r0, r3
 8014e58:	bfb8      	it	lt
 8014e5a:	4618      	movlt	r0, r3
 8014e5c:	e7a4      	b.n	8014da8 <_printf_i+0x168>
 8014e5e:	2301      	movs	r3, #1
 8014e60:	4632      	mov	r2, r6
 8014e62:	4649      	mov	r1, r9
 8014e64:	4640      	mov	r0, r8
 8014e66:	47d0      	blx	sl
 8014e68:	3001      	adds	r0, #1
 8014e6a:	d09b      	beq.n	8014da4 <_printf_i+0x164>
 8014e6c:	3501      	adds	r5, #1
 8014e6e:	68e3      	ldr	r3, [r4, #12]
 8014e70:	9903      	ldr	r1, [sp, #12]
 8014e72:	1a5b      	subs	r3, r3, r1
 8014e74:	42ab      	cmp	r3, r5
 8014e76:	dcf2      	bgt.n	8014e5e <_printf_i+0x21e>
 8014e78:	e7eb      	b.n	8014e52 <_printf_i+0x212>
 8014e7a:	2500      	movs	r5, #0
 8014e7c:	f104 0619 	add.w	r6, r4, #25
 8014e80:	e7f5      	b.n	8014e6e <_printf_i+0x22e>
 8014e82:	bf00      	nop
 8014e84:	08015616 	.word	0x08015616
 8014e88:	08015627 	.word	0x08015627

08014e8c <memchr>:
 8014e8c:	b2c9      	uxtb	r1, r1
 8014e8e:	4402      	add	r2, r0
 8014e90:	b510      	push	{r4, lr}
 8014e92:	4290      	cmp	r0, r2
 8014e94:	4603      	mov	r3, r0
 8014e96:	d101      	bne.n	8014e9c <memchr+0x10>
 8014e98:	2300      	movs	r3, #0
 8014e9a:	e003      	b.n	8014ea4 <memchr+0x18>
 8014e9c:	781c      	ldrb	r4, [r3, #0]
 8014e9e:	3001      	adds	r0, #1
 8014ea0:	428c      	cmp	r4, r1
 8014ea2:	d1f6      	bne.n	8014e92 <memchr+0x6>
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	bd10      	pop	{r4, pc}

08014ea8 <memcpy>:
 8014ea8:	440a      	add	r2, r1
 8014eaa:	1e43      	subs	r3, r0, #1
 8014eac:	4291      	cmp	r1, r2
 8014eae:	d100      	bne.n	8014eb2 <memcpy+0xa>
 8014eb0:	4770      	bx	lr
 8014eb2:	b510      	push	{r4, lr}
 8014eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eb8:	4291      	cmp	r1, r2
 8014eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ebe:	d1f9      	bne.n	8014eb4 <memcpy+0xc>
 8014ec0:	bd10      	pop	{r4, pc}

08014ec2 <memmove>:
 8014ec2:	4288      	cmp	r0, r1
 8014ec4:	b510      	push	{r4, lr}
 8014ec6:	eb01 0402 	add.w	r4, r1, r2
 8014eca:	d902      	bls.n	8014ed2 <memmove+0x10>
 8014ecc:	4284      	cmp	r4, r0
 8014ece:	4623      	mov	r3, r4
 8014ed0:	d807      	bhi.n	8014ee2 <memmove+0x20>
 8014ed2:	1e43      	subs	r3, r0, #1
 8014ed4:	42a1      	cmp	r1, r4
 8014ed6:	d008      	beq.n	8014eea <memmove+0x28>
 8014ed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014edc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ee0:	e7f8      	b.n	8014ed4 <memmove+0x12>
 8014ee2:	4402      	add	r2, r0
 8014ee4:	4601      	mov	r1, r0
 8014ee6:	428a      	cmp	r2, r1
 8014ee8:	d100      	bne.n	8014eec <memmove+0x2a>
 8014eea:	bd10      	pop	{r4, pc}
 8014eec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ef0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ef4:	e7f7      	b.n	8014ee6 <memmove+0x24>
	...

08014ef8 <_free_r>:
 8014ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014efa:	2900      	cmp	r1, #0
 8014efc:	d043      	beq.n	8014f86 <_free_r+0x8e>
 8014efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f02:	1f0c      	subs	r4, r1, #4
 8014f04:	9001      	str	r0, [sp, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	bfb8      	it	lt
 8014f0a:	18e4      	addlt	r4, r4, r3
 8014f0c:	f000 f914 	bl	8015138 <__malloc_lock>
 8014f10:	4a1e      	ldr	r2, [pc, #120]	; (8014f8c <_free_r+0x94>)
 8014f12:	9801      	ldr	r0, [sp, #4]
 8014f14:	6813      	ldr	r3, [r2, #0]
 8014f16:	b933      	cbnz	r3, 8014f26 <_free_r+0x2e>
 8014f18:	6063      	str	r3, [r4, #4]
 8014f1a:	6014      	str	r4, [r2, #0]
 8014f1c:	b003      	add	sp, #12
 8014f1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f22:	f000 b90f 	b.w	8015144 <__malloc_unlock>
 8014f26:	42a3      	cmp	r3, r4
 8014f28:	d908      	bls.n	8014f3c <_free_r+0x44>
 8014f2a:	6825      	ldr	r5, [r4, #0]
 8014f2c:	1961      	adds	r1, r4, r5
 8014f2e:	428b      	cmp	r3, r1
 8014f30:	bf01      	itttt	eq
 8014f32:	6819      	ldreq	r1, [r3, #0]
 8014f34:	685b      	ldreq	r3, [r3, #4]
 8014f36:	1949      	addeq	r1, r1, r5
 8014f38:	6021      	streq	r1, [r4, #0]
 8014f3a:	e7ed      	b.n	8014f18 <_free_r+0x20>
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	b10b      	cbz	r3, 8014f46 <_free_r+0x4e>
 8014f42:	42a3      	cmp	r3, r4
 8014f44:	d9fa      	bls.n	8014f3c <_free_r+0x44>
 8014f46:	6811      	ldr	r1, [r2, #0]
 8014f48:	1855      	adds	r5, r2, r1
 8014f4a:	42a5      	cmp	r5, r4
 8014f4c:	d10b      	bne.n	8014f66 <_free_r+0x6e>
 8014f4e:	6824      	ldr	r4, [r4, #0]
 8014f50:	4421      	add	r1, r4
 8014f52:	1854      	adds	r4, r2, r1
 8014f54:	6011      	str	r1, [r2, #0]
 8014f56:	42a3      	cmp	r3, r4
 8014f58:	d1e0      	bne.n	8014f1c <_free_r+0x24>
 8014f5a:	681c      	ldr	r4, [r3, #0]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	4421      	add	r1, r4
 8014f60:	6053      	str	r3, [r2, #4]
 8014f62:	6011      	str	r1, [r2, #0]
 8014f64:	e7da      	b.n	8014f1c <_free_r+0x24>
 8014f66:	d902      	bls.n	8014f6e <_free_r+0x76>
 8014f68:	230c      	movs	r3, #12
 8014f6a:	6003      	str	r3, [r0, #0]
 8014f6c:	e7d6      	b.n	8014f1c <_free_r+0x24>
 8014f6e:	6825      	ldr	r5, [r4, #0]
 8014f70:	1961      	adds	r1, r4, r5
 8014f72:	428b      	cmp	r3, r1
 8014f74:	bf02      	ittt	eq
 8014f76:	6819      	ldreq	r1, [r3, #0]
 8014f78:	685b      	ldreq	r3, [r3, #4]
 8014f7a:	1949      	addeq	r1, r1, r5
 8014f7c:	6063      	str	r3, [r4, #4]
 8014f7e:	bf08      	it	eq
 8014f80:	6021      	streq	r1, [r4, #0]
 8014f82:	6054      	str	r4, [r2, #4]
 8014f84:	e7ca      	b.n	8014f1c <_free_r+0x24>
 8014f86:	b003      	add	sp, #12
 8014f88:	bd30      	pop	{r4, r5, pc}
 8014f8a:	bf00      	nop
 8014f8c:	20001e4c 	.word	0x20001e4c

08014f90 <sbrk_aligned>:
 8014f90:	b570      	push	{r4, r5, r6, lr}
 8014f92:	4e0e      	ldr	r6, [pc, #56]	; (8014fcc <sbrk_aligned+0x3c>)
 8014f94:	460c      	mov	r4, r1
 8014f96:	4605      	mov	r5, r0
 8014f98:	6831      	ldr	r1, [r6, #0]
 8014f9a:	b911      	cbnz	r1, 8014fa2 <sbrk_aligned+0x12>
 8014f9c:	f000 f8bc 	bl	8015118 <_sbrk_r>
 8014fa0:	6030      	str	r0, [r6, #0]
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	f000 f8b7 	bl	8015118 <_sbrk_r>
 8014faa:	1c43      	adds	r3, r0, #1
 8014fac:	d00a      	beq.n	8014fc4 <sbrk_aligned+0x34>
 8014fae:	1cc4      	adds	r4, r0, #3
 8014fb0:	f024 0403 	bic.w	r4, r4, #3
 8014fb4:	42a0      	cmp	r0, r4
 8014fb6:	d007      	beq.n	8014fc8 <sbrk_aligned+0x38>
 8014fb8:	1a21      	subs	r1, r4, r0
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f000 f8ac 	bl	8015118 <_sbrk_r>
 8014fc0:	3001      	adds	r0, #1
 8014fc2:	d101      	bne.n	8014fc8 <sbrk_aligned+0x38>
 8014fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8014fc8:	4620      	mov	r0, r4
 8014fca:	bd70      	pop	{r4, r5, r6, pc}
 8014fcc:	20001e50 	.word	0x20001e50

08014fd0 <_malloc_r>:
 8014fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd4:	1ccd      	adds	r5, r1, #3
 8014fd6:	4607      	mov	r7, r0
 8014fd8:	f025 0503 	bic.w	r5, r5, #3
 8014fdc:	3508      	adds	r5, #8
 8014fde:	2d0c      	cmp	r5, #12
 8014fe0:	bf38      	it	cc
 8014fe2:	250c      	movcc	r5, #12
 8014fe4:	2d00      	cmp	r5, #0
 8014fe6:	db01      	blt.n	8014fec <_malloc_r+0x1c>
 8014fe8:	42a9      	cmp	r1, r5
 8014fea:	d905      	bls.n	8014ff8 <_malloc_r+0x28>
 8014fec:	230c      	movs	r3, #12
 8014fee:	2600      	movs	r6, #0
 8014ff0:	603b      	str	r3, [r7, #0]
 8014ff2:	4630      	mov	r0, r6
 8014ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff8:	4e2e      	ldr	r6, [pc, #184]	; (80150b4 <_malloc_r+0xe4>)
 8014ffa:	f000 f89d 	bl	8015138 <__malloc_lock>
 8014ffe:	6833      	ldr	r3, [r6, #0]
 8015000:	461c      	mov	r4, r3
 8015002:	bb34      	cbnz	r4, 8015052 <_malloc_r+0x82>
 8015004:	4629      	mov	r1, r5
 8015006:	4638      	mov	r0, r7
 8015008:	f7ff ffc2 	bl	8014f90 <sbrk_aligned>
 801500c:	1c43      	adds	r3, r0, #1
 801500e:	4604      	mov	r4, r0
 8015010:	d14d      	bne.n	80150ae <_malloc_r+0xde>
 8015012:	6834      	ldr	r4, [r6, #0]
 8015014:	4626      	mov	r6, r4
 8015016:	2e00      	cmp	r6, #0
 8015018:	d140      	bne.n	801509c <_malloc_r+0xcc>
 801501a:	6823      	ldr	r3, [r4, #0]
 801501c:	4631      	mov	r1, r6
 801501e:	4638      	mov	r0, r7
 8015020:	eb04 0803 	add.w	r8, r4, r3
 8015024:	f000 f878 	bl	8015118 <_sbrk_r>
 8015028:	4580      	cmp	r8, r0
 801502a:	d13a      	bne.n	80150a2 <_malloc_r+0xd2>
 801502c:	6821      	ldr	r1, [r4, #0]
 801502e:	3503      	adds	r5, #3
 8015030:	4638      	mov	r0, r7
 8015032:	1a6d      	subs	r5, r5, r1
 8015034:	f025 0503 	bic.w	r5, r5, #3
 8015038:	3508      	adds	r5, #8
 801503a:	2d0c      	cmp	r5, #12
 801503c:	bf38      	it	cc
 801503e:	250c      	movcc	r5, #12
 8015040:	4629      	mov	r1, r5
 8015042:	f7ff ffa5 	bl	8014f90 <sbrk_aligned>
 8015046:	3001      	adds	r0, #1
 8015048:	d02b      	beq.n	80150a2 <_malloc_r+0xd2>
 801504a:	6823      	ldr	r3, [r4, #0]
 801504c:	442b      	add	r3, r5
 801504e:	6023      	str	r3, [r4, #0]
 8015050:	e00e      	b.n	8015070 <_malloc_r+0xa0>
 8015052:	6822      	ldr	r2, [r4, #0]
 8015054:	1b52      	subs	r2, r2, r5
 8015056:	d41e      	bmi.n	8015096 <_malloc_r+0xc6>
 8015058:	2a0b      	cmp	r2, #11
 801505a:	d916      	bls.n	801508a <_malloc_r+0xba>
 801505c:	1961      	adds	r1, r4, r5
 801505e:	42a3      	cmp	r3, r4
 8015060:	6025      	str	r5, [r4, #0]
 8015062:	bf18      	it	ne
 8015064:	6059      	strne	r1, [r3, #4]
 8015066:	6863      	ldr	r3, [r4, #4]
 8015068:	bf08      	it	eq
 801506a:	6031      	streq	r1, [r6, #0]
 801506c:	5162      	str	r2, [r4, r5]
 801506e:	604b      	str	r3, [r1, #4]
 8015070:	f104 060b 	add.w	r6, r4, #11
 8015074:	4638      	mov	r0, r7
 8015076:	f000 f865 	bl	8015144 <__malloc_unlock>
 801507a:	1d23      	adds	r3, r4, #4
 801507c:	f026 0607 	bic.w	r6, r6, #7
 8015080:	1af2      	subs	r2, r6, r3
 8015082:	d0b6      	beq.n	8014ff2 <_malloc_r+0x22>
 8015084:	1b9b      	subs	r3, r3, r6
 8015086:	50a3      	str	r3, [r4, r2]
 8015088:	e7b3      	b.n	8014ff2 <_malloc_r+0x22>
 801508a:	6862      	ldr	r2, [r4, #4]
 801508c:	42a3      	cmp	r3, r4
 801508e:	bf0c      	ite	eq
 8015090:	6032      	streq	r2, [r6, #0]
 8015092:	605a      	strne	r2, [r3, #4]
 8015094:	e7ec      	b.n	8015070 <_malloc_r+0xa0>
 8015096:	4623      	mov	r3, r4
 8015098:	6864      	ldr	r4, [r4, #4]
 801509a:	e7b2      	b.n	8015002 <_malloc_r+0x32>
 801509c:	4634      	mov	r4, r6
 801509e:	6876      	ldr	r6, [r6, #4]
 80150a0:	e7b9      	b.n	8015016 <_malloc_r+0x46>
 80150a2:	230c      	movs	r3, #12
 80150a4:	4638      	mov	r0, r7
 80150a6:	603b      	str	r3, [r7, #0]
 80150a8:	f000 f84c 	bl	8015144 <__malloc_unlock>
 80150ac:	e7a1      	b.n	8014ff2 <_malloc_r+0x22>
 80150ae:	6025      	str	r5, [r4, #0]
 80150b0:	e7de      	b.n	8015070 <_malloc_r+0xa0>
 80150b2:	bf00      	nop
 80150b4:	20001e4c 	.word	0x20001e4c

080150b8 <_realloc_r>:
 80150b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150bc:	4680      	mov	r8, r0
 80150be:	4614      	mov	r4, r2
 80150c0:	460e      	mov	r6, r1
 80150c2:	b921      	cbnz	r1, 80150ce <_realloc_r+0x16>
 80150c4:	4611      	mov	r1, r2
 80150c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150ca:	f7ff bf81 	b.w	8014fd0 <_malloc_r>
 80150ce:	b92a      	cbnz	r2, 80150dc <_realloc_r+0x24>
 80150d0:	4625      	mov	r5, r4
 80150d2:	f7ff ff11 	bl	8014ef8 <_free_r>
 80150d6:	4628      	mov	r0, r5
 80150d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150dc:	f000 f838 	bl	8015150 <_malloc_usable_size_r>
 80150e0:	4284      	cmp	r4, r0
 80150e2:	4607      	mov	r7, r0
 80150e4:	d802      	bhi.n	80150ec <_realloc_r+0x34>
 80150e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80150ea:	d812      	bhi.n	8015112 <_realloc_r+0x5a>
 80150ec:	4621      	mov	r1, r4
 80150ee:	4640      	mov	r0, r8
 80150f0:	f7ff ff6e 	bl	8014fd0 <_malloc_r>
 80150f4:	4605      	mov	r5, r0
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d0ed      	beq.n	80150d6 <_realloc_r+0x1e>
 80150fa:	42bc      	cmp	r4, r7
 80150fc:	4622      	mov	r2, r4
 80150fe:	4631      	mov	r1, r6
 8015100:	bf28      	it	cs
 8015102:	463a      	movcs	r2, r7
 8015104:	f7ff fed0 	bl	8014ea8 <memcpy>
 8015108:	4631      	mov	r1, r6
 801510a:	4640      	mov	r0, r8
 801510c:	f7ff fef4 	bl	8014ef8 <_free_r>
 8015110:	e7e1      	b.n	80150d6 <_realloc_r+0x1e>
 8015112:	4635      	mov	r5, r6
 8015114:	e7df      	b.n	80150d6 <_realloc_r+0x1e>
	...

08015118 <_sbrk_r>:
 8015118:	b538      	push	{r3, r4, r5, lr}
 801511a:	2300      	movs	r3, #0
 801511c:	4d05      	ldr	r5, [pc, #20]	; (8015134 <_sbrk_r+0x1c>)
 801511e:	4604      	mov	r4, r0
 8015120:	4608      	mov	r0, r1
 8015122:	602b      	str	r3, [r5, #0]
 8015124:	f7ec faf8 	bl	8001718 <_sbrk>
 8015128:	1c43      	adds	r3, r0, #1
 801512a:	d102      	bne.n	8015132 <_sbrk_r+0x1a>
 801512c:	682b      	ldr	r3, [r5, #0]
 801512e:	b103      	cbz	r3, 8015132 <_sbrk_r+0x1a>
 8015130:	6023      	str	r3, [r4, #0]
 8015132:	bd38      	pop	{r3, r4, r5, pc}
 8015134:	20001e54 	.word	0x20001e54

08015138 <__malloc_lock>:
 8015138:	4801      	ldr	r0, [pc, #4]	; (8015140 <__malloc_lock+0x8>)
 801513a:	f000 b811 	b.w	8015160 <__retarget_lock_acquire_recursive>
 801513e:	bf00      	nop
 8015140:	20001e58 	.word	0x20001e58

08015144 <__malloc_unlock>:
 8015144:	4801      	ldr	r0, [pc, #4]	; (801514c <__malloc_unlock+0x8>)
 8015146:	f000 b80c 	b.w	8015162 <__retarget_lock_release_recursive>
 801514a:	bf00      	nop
 801514c:	20001e58 	.word	0x20001e58

08015150 <_malloc_usable_size_r>:
 8015150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015154:	1f18      	subs	r0, r3, #4
 8015156:	2b00      	cmp	r3, #0
 8015158:	bfbc      	itt	lt
 801515a:	580b      	ldrlt	r3, [r1, r0]
 801515c:	18c0      	addlt	r0, r0, r3
 801515e:	4770      	bx	lr

08015160 <__retarget_lock_acquire_recursive>:
 8015160:	4770      	bx	lr

08015162 <__retarget_lock_release_recursive>:
 8015162:	4770      	bx	lr

08015164 <_init>:
 8015164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015166:	bf00      	nop
 8015168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801516a:	bc08      	pop	{r3}
 801516c:	469e      	mov	lr, r3
 801516e:	4770      	bx	lr

08015170 <_fini>:
 8015170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015172:	bf00      	nop
 8015174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015176:	bc08      	pop	{r3}
 8015178:	469e      	mov	lr, r3
 801517a:	4770      	bx	lr
